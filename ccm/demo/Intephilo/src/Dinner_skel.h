// *************************************************************************
//
// This File Is Automatically Generated by the StarBusIDL-to-C++ Compiler !
//
// Copyright (c) 2003
// Network Information Security Institute,Computer College,NUDT.
// ChangSha,Hunan,PRC
//
// All Rights Reserved
//
// *************************************************************************

// Version: 5.0.0

#ifndef ___Dinner_skel_h__
#define ___Dinner_skel_h__

#include <Dinner.h>
#include <STAR/SkelForServerRequest.h>

#include <Components_skel.h>

//
// Module declare ::Dinner
//
namespace POA_Dinner
{

//
// Interface declare ::Dinner::Fork
//
class Fork : virtual public PortableServer::ServantBase,
             virtual public STAR::SkelForServerRequest
{
    Fork(const Fork&);
    void operator=(const Fork&);

protected:

    //
    // ProtectedOperation declare obtain_fork
    //
    static void _STAR_op_obtain_fork(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare release_fork
    //
    static void _STAR_op_release_fork(PortableServer::ServantBase *,STAR::Upcall_ptr);

public:

    Fork() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    Dinner::Fork_ptr _this();

    virtual void _STAR_dispatch(STAR::Upcall_ptr);

    //
    // Operation declare obtain_fork
    //
    virtual Components::Cookie* obtain_fork()
        throw(Dinner::ForkNotAvailable,
              CORBA::SystemException) = 0;

    //
    // Operation declare release_fork
    //
    virtual void release_fork(Components::Cookie* ck)
        throw(Dinner::NotTheEater,
              CORBA::SystemException) = 0;
};

//
// Interface declare ::Dinner::Named
//
class Named : virtual public PortableServer::ServantBase,
              virtual public STAR::SkelForServerRequest
{
    Named(const Named&);
    void operator=(const Named&);

protected:

    //
    // ProtectedAttribute declare name
    //
    static void _STAR_get_name(PortableServer::ServantBase *,STAR::Upcall_ptr);
    static void _STAR_set_name(PortableServer::ServantBase *,STAR::Upcall_ptr);

public:

    Named() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    Dinner::Named_ptr _this();

    virtual void _STAR_dispatch(STAR::Upcall_ptr);

    //
    // Attribute declare name
    //
    virtual char* name()
        throw(CORBA::SystemException) = 0;
    virtual void name(const char*)
        throw(CORBA::SystemException) = 0;
};

//
// Interface declare ::Dinner::Philosopher
//
class Philosopher : virtual public POA_Dinner::Named,
                    virtual public POA_Components::CCMObject
{
    Philosopher(const Philosopher&);
    void operator=(const Philosopher&);

protected:

    //
    // ProtectedAttribute declare thinking_seconds
    //
    static void _STAR_get_thinking_seconds(PortableServer::ServantBase *,STAR::Upcall_ptr);
    static void _STAR_set_thinking_seconds(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedAttribute declare eating_seconds
    //
    static void _STAR_get_eating_seconds(PortableServer::ServantBase *,STAR::Upcall_ptr);
    static void _STAR_set_eating_seconds(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedAttribute declare sleeping_seconds
    //
    static void _STAR_get_sleeping_seconds(PortableServer::ServantBase *,STAR::Upcall_ptr);
    static void _STAR_set_sleeping_seconds(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare connect_left_hand
    //
    static void _STAR_op_connect_left_hand(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare disconnect_left_hand
    //
    static void _STAR_op_disconnect_left_hand(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare get_connection_left_hand
    //
    static void _STAR_op_get_connection_left_hand(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare connect_right_hand
    //
    static void _STAR_op_connect_right_hand(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare disconnect_right_hand
    //
    static void _STAR_op_disconnect_right_hand(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare get_connection_right_hand
    //
    static void _STAR_op_get_connection_right_hand(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare connect_observer
    //
    static void _STAR_op_connect_observer(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare disconnect_observer
    //
    static void _STAR_op_disconnect_observer(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare get_connection_observer
    //
    static void _STAR_op_get_connection_observer(PortableServer::ServantBase *,STAR::Upcall_ptr);

public:

    Philosopher() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    Dinner::Philosopher_ptr _this();

    virtual void _STAR_dispatch(STAR::Upcall_ptr);

    //
    // Attribute declare thinking_seconds
    //
    virtual CORBA::ULong thinking_seconds()
        throw(CORBA::SystemException) = 0;
    virtual void thinking_seconds(CORBA::ULong)
        throw(CORBA::SystemException) = 0;

    //
    // Attribute declare eating_seconds
    //
    virtual CORBA::ULong eating_seconds()
        throw(CORBA::SystemException) = 0;
    virtual void eating_seconds(CORBA::ULong)
        throw(CORBA::SystemException) = 0;

    //
    // Attribute declare sleeping_seconds
    //
    virtual CORBA::ULong sleeping_seconds()
        throw(CORBA::SystemException) = 0;
    virtual void sleeping_seconds(CORBA::ULong)
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare connect_left_hand
    //
    virtual void connect_left_hand(Dinner::Fork_ptr conn)
        throw(Components::AlreadyConnected,
              Components::InvalidConnection,
              CORBA::SystemException) = 0;

    //
    // Operation declare disconnect_left_hand
    //
    virtual Dinner::Fork_ptr disconnect_left_hand()
        throw(Components::NoConnection,
              CORBA::SystemException) = 0;

    //
    // Operation declare get_connection_left_hand
    //
    virtual Dinner::Fork_ptr get_connection_left_hand()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare connect_right_hand
    //
    virtual void connect_right_hand(Dinner::Fork_ptr conn)
        throw(Components::AlreadyConnected,
              Components::InvalidConnection,
              CORBA::SystemException) = 0;

    //
    // Operation declare disconnect_right_hand
    //
    virtual Dinner::Fork_ptr disconnect_right_hand()
        throw(Components::NoConnection,
              CORBA::SystemException) = 0;

    //
    // Operation declare get_connection_right_hand
    //
    virtual Dinner::Fork_ptr get_connection_right_hand()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare connect_observer
    //
    virtual void connect_observer(Dinner::Observing_ptr conn)
        throw(Components::AlreadyConnected,
              Components::InvalidConnection,
              CORBA::SystemException) = 0;

    //
    // Operation declare disconnect_observer
    //
    virtual Dinner::Observing_ptr disconnect_observer()
        throw(Components::NoConnection,
              CORBA::SystemException) = 0;

    //
    // Operation declare get_connection_observer
    //
    virtual Dinner::Observing_ptr get_connection_observer()
        throw(CORBA::SystemException) = 0;
};

//
// Interface declare ::Dinner::Cutlery
//
class Cutlery : virtual public POA_Components::CCMObject
{
    Cutlery(const Cutlery&);
    void operator=(const Cutlery&);

protected:

    //
    // ProtectedOperation declare provide_the_fork
    //
    static void _STAR_op_provide_the_fork(PortableServer::ServantBase *,STAR::Upcall_ptr);

public:

    Cutlery() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    Dinner::Cutlery_ptr _this();

    virtual void _STAR_dispatch(STAR::Upcall_ptr);

    //
    // Operation declare provide_the_fork
    //
    virtual Dinner::Fork_ptr provide_the_fork()
        throw(CORBA::SystemException) = 0;
};

//
// Interface declare ::Dinner::PhilosopherHomeExplicit
//
class PhilosopherHomeExplicit : virtual public POA_Components::HomeConfiguration
{
    PhilosopherHomeExplicit(const PhilosopherHomeExplicit&);
    void operator=(const PhilosopherHomeExplicit&);

public:

    PhilosopherHomeExplicit() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    Dinner::PhilosopherHomeExplicit_ptr _this();

    virtual void _STAR_dispatch(STAR::Upcall_ptr);
};

//
// Interface declare ::Dinner::PhilosopherHomeImplicit
//
class PhilosopherHomeImplicit : virtual public POA_Components::KeylessCCMHome
{
    PhilosopherHomeImplicit(const PhilosopherHomeImplicit&);
    void operator=(const PhilosopherHomeImplicit&);

protected:

    //
    // ProtectedOperation declare create
    //
    static void _STAR_op_create(PortableServer::ServantBase *,STAR::Upcall_ptr);

public:

    PhilosopherHomeImplicit() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    Dinner::PhilosopherHomeImplicit_ptr _this();

    virtual void _STAR_dispatch(STAR::Upcall_ptr);

    //
    // Operation declare create
    //
    virtual Dinner::Philosopher_ptr create()
        throw(Components::CreateFailure,
              CORBA::SystemException) = 0;
};

//
// Interface declare ::Dinner::PhilosopherHome
//
class PhilosopherHome : virtual public POA_Dinner::PhilosopherHomeExplicit,
                        virtual public POA_Dinner::PhilosopherHomeImplicit
{
    PhilosopherHome(const PhilosopherHome&);
    void operator=(const PhilosopherHome&);

public:

    PhilosopherHome() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    Dinner::PhilosopherHome_ptr _this();

    virtual void _STAR_dispatch(STAR::Upcall_ptr);
};

//
// Interface declare ::Dinner::CutleryHomeExplicit
//
class CutleryHomeExplicit : virtual public POA_Components::HomeConfiguration
{
    CutleryHomeExplicit(const CutleryHomeExplicit&);
    void operator=(const CutleryHomeExplicit&);

public:

    CutleryHomeExplicit() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    Dinner::CutleryHomeExplicit_ptr _this();

    virtual void _STAR_dispatch(STAR::Upcall_ptr);
};

//
// Interface declare ::Dinner::CutleryHomeImplicit
//
class CutleryHomeImplicit : virtual public POA_Components::KeylessCCMHome
{
    CutleryHomeImplicit(const CutleryHomeImplicit&);
    void operator=(const CutleryHomeImplicit&);

protected:

    //
    // ProtectedOperation declare create
    //
    static void _STAR_op_create(PortableServer::ServantBase *,STAR::Upcall_ptr);

public:

    CutleryHomeImplicit() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    Dinner::CutleryHomeImplicit_ptr _this();

    virtual void _STAR_dispatch(STAR::Upcall_ptr);

    //
    // Operation declare create
    //
    virtual Dinner::Cutlery_ptr create()
        throw(Components::CreateFailure,
              CORBA::SystemException) = 0;
};

//
// Interface declare ::Dinner::CutleryHome
//
class CutleryHome : virtual public POA_Dinner::CutleryHomeExplicit,
                    virtual public POA_Dinner::CutleryHomeImplicit
{
    CutleryHome(const CutleryHome&);
    void operator=(const CutleryHome&);

public:

    CutleryHome() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    Dinner::CutleryHome_ptr _this();

    virtual void _STAR_dispatch(STAR::Upcall_ptr);
};

} // End of namespace POA_Dinner

#endif
