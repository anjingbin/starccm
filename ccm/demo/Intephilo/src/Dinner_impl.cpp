// **********************************************************************
//
// Generated by the IDL3 Translator
//
// Copyright (c) 2001-2004
// StarMiddleware Group
// www.StarMiddleware.net
//
// All Rights Reserved
//
// Author: Huang Jie        huangjie@email.com
// Author: Chang Junsheng   cjs7908@163.com
// Author: Zhen Xianrong
//
// **********************************************************************


#include <CORBA.h>
#include <CIFHook.h>
#include <UuidGenerator.h>
#include <ComponentServentBase.h>
#include <ComponentComposition.h>
#include <Dinner_impl.h>
#include <CCM_Dinner.h>
#include <CCM_Dinner_Context_impl.h>

using namespace std;
//Interface
//Interface
//Interface

//Interface
//Interface
//Interface
Dinner::Fork_impl::Fork_impl(PortableServer::POA_ptr poa,Dinner::CCM_Fork_ptr executor)
   : poa_(PortableServer::POA::_duplicate(poa)),executor_(Dinner::CCM_Fork::_duplicate(executor))
{
}

Dinner::Fork_impl::~Fork_impl()
{
}

PortableServer::POA_ptr
Dinner::Fork_impl::_default_POA()
{
    return PortableServer::POA::_duplicate(poa_);
}

void 
Dinner::Fork_impl::setExecutor(CORBA::Object_ptr obj)
{
    executor_ = Dinner::CCM_Fork::_duplicate(dynamic_cast<Dinner::CCM_Fork_ptr>(obj));
}

CORBA::Object_ptr 
Dinner::Fork_impl::getExecutor()
{
    return Dinner::CCM_Fork::_duplicate(executor_);
}

::Components::Cookie*
Dinner::Fork_impl::obtain_fork()
    throw(Dinner::ForkNotAvailable,
          CORBA::SystemException)
{
     return executor_ -> obtain_fork();
}

void
Dinner::Fork_impl::release_fork(::Components::Cookie* ck)
    throw(Dinner::NotTheEater,
          CORBA::SystemException)
{
     executor_ -> release_fork(ck);
}
//Interface
Dinner::Named_impl::Named_impl(PortableServer::POA_ptr poa,Dinner::CCM_Named_ptr executor)
   : poa_(PortableServer::POA::_duplicate(poa)),executor_(Dinner::CCM_Named::_duplicate(executor))
{
}

Dinner::Named_impl::~Named_impl()
{
}

PortableServer::POA_ptr
Dinner::Named_impl::_default_POA()
{
    return PortableServer::POA::_duplicate(poa_);
}

void 
Dinner::Named_impl::setExecutor(CORBA::Object_ptr obj)
{
    executor_ = Dinner::CCM_Named::_duplicate(dynamic_cast<Dinner::CCM_Named_ptr>(obj));
}

CORBA::Object_ptr 
Dinner::Named_impl::getExecutor()
{
    return Dinner::CCM_Named::_duplicate(executor_);
}

char*
Dinner::Named_impl::name()
    throw(CORBA::SystemException)
{
    return executor_ -> name();
}

void
Dinner::Named_impl::name(const char* a)
    throw(CORBA::SystemException)
{
    executor_ -> name(a);
}
//Component
Dinner::Philosopher_impl::Philosopher_impl(PortableServer::POA_ptr poa,Dinner::CCM_Philosopher_ptr executor)
   : poa_(PortableServer::POA::_duplicate(poa)),executor_(Dinner::CCM_Philosopher::_duplicate(executor))
{
}

Dinner::Philosopher_impl::~Philosopher_impl()
{
}

void 
Dinner::Philosopher_impl::configuration_complete()
{
    executor_ -> configuration_complete();
}

void 
Dinner::Philosopher_impl::remove()
throw(Components::RemoveFailure)
{
    Components::SessionComponent_var sessionComponent =
        Components::SessionComponent::_duplicate(dynamic_cast<Components::SessionComponent*>(executor_.in()));
    if(!CORBA::is_nil(sessionComponent))
    {
        sessionComponent -> ccm_remove();
    }
    Components::EntityComponent_var entityComponent =
        Components::EntityComponent::_duplicate(dynamic_cast<Components::EntityComponent*>(executor_.in()));
    if(!CORBA::is_nil(entityComponent))
    {
        entityComponent -> ccm_remove();
    }
    ComponentServentBase::remove();
    _remove_ref();
}

PortableServer::POA_ptr
Dinner::Philosopher_impl::_default_POA()
{
    return PortableServer::POA::_duplicate(poa_);
}

void
Dinner::Philosopher_impl::setExecutor(CORBA::Object_ptr obj)
{
    executor_ = Dinner::CCM_Philosopher::_duplicate(dynamic_cast<Dinner::CCM_Philosopher_ptr>(obj));
}

CORBA::Object_ptr 
Dinner::Philosopher_impl::getExecutor()
{
    return Dinner::CCM_Philosopher::_duplicate(executor_);
}

void
Dinner::Philosopher_impl::setCIFHook(Container::CIFHook_ptr cifHook)
{
    cifHook_ = OBJDUPLICATE(Container::CIFHook_ptr, cifHook);
}

void
Dinner::Philosopher_impl::setComObjectID(const PortableServer::ObjectId& objID)
{
    comObjectId_ = new PortableServer::ObjectId(objID);
}

//wsf
Container::CIFHook_ptr 
Dinner::Philosopher_impl::getCIFHook()
{
	if (!CORBA::is_nil(cifHook_))
	{
		
		return OBJDUPLICATE(Container::CIFHook_ptr, cifHook_);
	}
	else
	{
		return NULL;
	}
		
}

char*
Dinner::Philosopher_impl::name()
    throw(CORBA::SystemException)
{
    return executor_ -> name();
}

void
Dinner::Philosopher_impl::name(const char* a)
    throw(CORBA::SystemException)
{
    executor_ -> name(a);
}

CORBA::ULong
Dinner::Philosopher_impl::thinking_seconds()
    throw(CORBA::SystemException)
{
    return executor_ -> thinking_seconds();
}

void
Dinner::Philosopher_impl::thinking_seconds(CORBA::ULong a)
    throw(CORBA::SystemException)
{
    executor_ -> thinking_seconds(a);
}

CORBA::ULong
Dinner::Philosopher_impl::eating_seconds()
    throw(CORBA::SystemException)
{
    return executor_ -> eating_seconds();
}

void
Dinner::Philosopher_impl::eating_seconds(CORBA::ULong a)
    throw(CORBA::SystemException)
{
    executor_ -> eating_seconds(a);
}

CORBA::ULong
Dinner::Philosopher_impl::sleeping_seconds()
    throw(CORBA::SystemException)
{
    return executor_ -> sleeping_seconds();
}

void
Dinner::Philosopher_impl::sleeping_seconds(CORBA::ULong a)
    throw(CORBA::SystemException)
{
    executor_ -> sleeping_seconds(a);
}
//Uses
void 
Dinner::Philosopher_impl::connect_left_hand (::Dinner::Fork_ptr connection)
      throw(Components::AlreadyConnected,
            Components::InvalidConnection,
      CORBA::SystemException)
{
    Components::Cookie_var ck = connect("left_hand",connection);
}

::Dinner::Fork_ptr
Dinner::Philosopher_impl::disconnect_left_hand ()
      throw(Components::NoConnection,
            CORBA::SystemException)
{
    Components::ConnectionDescriptions_var connections = get_connections("left_hand");

    CORBA::Object_var obj = connections[(CORBA::ULong)0] -> objref();
    ::Dinner::Fork_var connection = ::Dinner::Fork::_narrow(obj);

    if(CORBA::is_nil(connection))
    {
             throw Components::NoConnection();
    }
    else
    {
        disconnect("left_hand",0);
    }

    return connection._retn();
}

::Dinner::Fork_ptr
Dinner::Philosopher_impl::get_connection_left_hand ()
     throw(CORBA::SystemException)
{
    Components::ConnectionDescriptions_var connections = get_connections("left_hand");

    CORBA::Object_var obj = connections[(CORBA::ULong)0] -> objref();
    ::Dinner::Fork_var connection = ::Dinner::Fork::_narrow(obj);

    return connection._retn();
}

//Uses
void 
Dinner::Philosopher_impl::connect_right_hand (::Dinner::Fork_ptr connection)
      throw(Components::AlreadyConnected,
            Components::InvalidConnection,
      CORBA::SystemException)
{
    Components::Cookie_var ck = connect("right_hand",connection);
}

::Dinner::Fork_ptr
Dinner::Philosopher_impl::disconnect_right_hand ()
      throw(Components::NoConnection,
            CORBA::SystemException)
{
    Components::ConnectionDescriptions_var connections = get_connections("right_hand");

    CORBA::Object_var obj = connections[(CORBA::ULong)0] -> objref();
    ::Dinner::Fork_var connection = ::Dinner::Fork::_narrow(obj);

    if(CORBA::is_nil(connection))
    {
             throw Components::NoConnection();
    }
    else
    {
        disconnect("right_hand",0);
    }

    return connection._retn();
}

::Dinner::Fork_ptr
Dinner::Philosopher_impl::get_connection_right_hand ()
     throw(CORBA::SystemException)
{
    Components::ConnectionDescriptions_var connections = get_connections("right_hand");

    CORBA::Object_var obj = connections[(CORBA::ULong)0] -> objref();
    ::Dinner::Fork_var connection = ::Dinner::Fork::_narrow(obj);

    return connection._retn();
}

//Uses
void 
Dinner::Philosopher_impl::connect_observer (::Dinner::Observing_ptr connection)
      throw(Components::AlreadyConnected,
            Components::InvalidConnection,
      CORBA::SystemException)
{
    Components::Cookie_var ck = connect("observer",connection);
}

::Dinner::Observing_ptr
Dinner::Philosopher_impl::disconnect_observer ()
      throw(Components::NoConnection,
            CORBA::SystemException)
{
    Components::ConnectionDescriptions_var connections = get_connections("observer");

    CORBA::Object_var obj = connections[(CORBA::ULong)0] -> objref();
    ::Dinner::Observing_var connection = ::Dinner::Observing::_narrow(obj);

    if(CORBA::is_nil(connection))
    {
             throw Components::NoConnection();
    }
    else
    {
        disconnect("observer",0);
    }

    return connection._retn();
}

::Dinner::Observing_ptr
Dinner::Philosopher_impl::get_connection_observer ()
     throw(CORBA::SystemException)
{
    Components::ConnectionDescriptions_var connections = get_connections("observer");

    CORBA::Object_var obj = connections[(CORBA::ULong)0] -> objref();
    ::Dinner::Observing_var connection = ::Dinner::Observing::_narrow(obj);

    return connection._retn();
}

//Component
Dinner::Cutlery_impl::Cutlery_impl(PortableServer::POA_ptr poa,Dinner::CCM_Cutlery_ptr executor)
   : poa_(PortableServer::POA::_duplicate(poa)),executor_(Dinner::CCM_Cutlery::_duplicate(executor))
{
}

Dinner::Cutlery_impl::~Cutlery_impl()
{
}

void 
Dinner::Cutlery_impl::configuration_complete()
{
    executor_ -> configuration_complete();
}

void 
Dinner::Cutlery_impl::remove()
throw(Components::RemoveFailure)
{
    Components::SessionComponent_var sessionComponent =
        Components::SessionComponent::_duplicate(dynamic_cast<Components::SessionComponent*>(executor_.in()));
    if(!CORBA::is_nil(sessionComponent))
    {
        sessionComponent -> ccm_remove();
    }
    Components::EntityComponent_var entityComponent =
        Components::EntityComponent::_duplicate(dynamic_cast<Components::EntityComponent*>(executor_.in()));
    if(!CORBA::is_nil(entityComponent))
    {
        entityComponent -> ccm_remove();
    }
    ComponentServentBase::remove();
    _remove_ref();
}

PortableServer::POA_ptr
Dinner::Cutlery_impl::_default_POA()
{
    return PortableServer::POA::_duplicate(poa_);
}

void
Dinner::Cutlery_impl::setExecutor(CORBA::Object_ptr obj)
{
    executor_ = Dinner::CCM_Cutlery::_duplicate(dynamic_cast<Dinner::CCM_Cutlery_ptr>(obj));
}

CORBA::Object_ptr 
Dinner::Cutlery_impl::getExecutor()
{
    return Dinner::CCM_Cutlery::_duplicate(executor_);
}

void
Dinner::Cutlery_impl::setCIFHook(Container::CIFHook_ptr cifHook)
{
    cifHook_ = OBJDUPLICATE(Container::CIFHook_ptr, cifHook);
}

void
Dinner::Cutlery_impl::setComObjectID(const PortableServer::ObjectId& objID)
{
    comObjectId_ = new PortableServer::ObjectId(objID);
}

//Provides
::Dinner::Fork_ptr
Dinner::Cutlery_impl::provide_the_fork()
throw(CORBA::SystemException)
{
    return ::Dinner::Fork::_narrow(provide_facet("the_fork"));
}

//Home
Dinner::PhilosopherHome_impl::PhilosopherHome_impl(Container::CIFHook_ptr cifHook)
 : cifHook_(OBJDUPLICATE(Container::CIFHook_ptr, cifHook))
{
    enableHomeConfigutation_ = false;
    complete_ = false;
    homeExecutor_ = 
        dynamic_cast< Dinner::CCM_PhilosopherHome_ptr > (cifHook_ -> getHomeExecutorBase());

    homePOA_ =  cifHook_ -> getHomePOA();
    comPOA_ =  cifHook_ -> getComponentPOA();
}

Dinner::PhilosopherHome_impl::~PhilosopherHome_impl()
{
}

PortableServer::POA_ptr
Dinner::PhilosopherHome_impl::_default_POA()
{
    return PortableServer::POA::_duplicate(homePOA_);
}

void
Dinner::PhilosopherHome_impl::setExecutor(CORBA::Object_ptr obj)
{
    homeExecutor_ = Dinner::CCM_PhilosopherHome::_duplicate(dynamic_cast<Dinner::CCM_PhilosopherHome_ptr>(obj));
}

CORBA::Object_ptr
Dinner::PhilosopherHome_impl::getExecutor()
{
    return Dinner::CCM_PhilosopherHome::_duplicate(homeExecutor_);
}


void
Dinner::PhilosopherHome_impl::set_configurator(Components::Configurator_ptr configurator)
{
    configurator_ = Components::Configurator::_duplicate(configurator);
    enableHomeConfigutation_ = true;
}


void
Dinner::PhilosopherHome_impl::set_configuration_values(const Components::ConfigValues& configValues)
{
    configValues_ = new Components::ConfigValues(configValues);
}


void
Dinner::PhilosopherHome_impl::complete_component_configuration(CORBA::Boolean complete)
{
    complete_ = complete;
}


void
Dinner::PhilosopherHome_impl::disable_home_configuration()
{
    enableHomeConfigutation_ = false;
}

Dinner::Philosopher_ptr
Dinner::PhilosopherHome_impl::create()
throw(CORBA::SystemException, Components::CreateFailure)
{
    CORBA::String_var uuid;
    Container::ComponentComposition_var compComposition = new Container::ComponentComposition;

    if(homeExecutor_)
    {
        Components::EnterpriseComponent_var enterCom;
        try
        {
            enterCom = homeExecutor_ -> create();
        }
        catch(Components::CCMException& exc)
        {
            exc;
            throw Components::CreateFailure();
        }

        #ifdef TAO
        Dinner::CCM_Philosopher_var executor = dynamic_cast<Dinner::CCM_Philosopher*>(enterCom.in());
        #else
        Dinner::CCM_Philosopher_var executor = Dinner::CCM_Philosopher::_narrow(enterCom);
        #endif
        if(!CORBA::is_nil(executor))
        {
            compComposition -> registerComponentExecutor(enterCom.in());

            Dinner::Philosopher_impl* servantImpl 
                = new Dinner::Philosopher_impl(comPOA_.in(), executor.in());
            servantImpl -> setCIFHook(cifHook_);

            uuid = Components::UuidGenerator::generateUuid();

            PortableServer::ObjectId_var comObjectId = PortableServer::string_to_ObjectId(uuid);

            CORBA::Object_var comp = 
                 cifHook_ -> createReference(comObjectId.in(),"IDL:Dinner/Philosopher:1.0");
            compComposition -> registerComponentRef(comp.in());

            compComposition -> registerComponentServant(comObjectId.in(), servantImpl);

            servantImpl -> setComObjectID(comObjectId.in());

            cifHook_ -> onCreateComponent(compComposition.in());


            Components::FacetDescription_var facetDes;
            Components::ConsumerDescription_var consDes;
            Components::EmitterDescription_var emitDes;
            Components::PublisherDescription_var pubDes;
            Components::ReceptacleDescription_var recDes;

            //Uses
            recDes = new Components::ReceptacleDescription_impl;
            recDes -> name(static_cast<const char*>("left_hand"));
            recDes -> type_id(static_cast<const char*>("IDL:Dinner/Fork:1.0"));

            recDes -> is_multiple(false);
            recDes -> connections(*(new Components::ConnectionDescriptions));
            recDes -> _add_ref();
            servantImpl -> receptacles_.insert(
            Components::ReceptaclesMap::value_type(static_cast<const char*>("left_hand"),recDes.in()));

            //Uses
            recDes = new Components::ReceptacleDescription_impl;
            recDes -> name(static_cast<const char*>("right_hand"));
            recDes -> type_id(static_cast<const char*>("IDL:Dinner/Fork:1.0"));

            recDes -> is_multiple(false);
            recDes -> connections(*(new Components::ConnectionDescriptions));
            recDes -> _add_ref();
            servantImpl -> receptacles_.insert(
            Components::ReceptaclesMap::value_type(static_cast<const char*>("right_hand"),recDes.in()));

            //Uses
            recDes = new Components::ReceptacleDescription_impl;
            recDes -> name(static_cast<const char*>("observer"));
            recDes -> type_id(static_cast<const char*>("RMI:Dinner.Observing:0000000000000000"));

            recDes -> is_multiple(false);
            recDes -> connections(*(new Components::ConnectionDescriptions));
            recDes -> _add_ref();
            servantImpl -> receptacles_.insert(
            Components::ReceptaclesMap::value_type(static_cast<const char*>("observer"),recDes.in()));

            Components::SessionComponent_var sessionComponent =
                Components::SessionComponent::_duplicate(
                        dynamic_cast<Components::SessionComponent*>(enterCom.in()));

            if(!CORBA::is_nil(sessionComponent))
            {
                Components::Session2Context_var commonCtx = cifHook_ -> getSession2ctx();
                Dinner::CCM_Philosopher_Context_var compContext 
                = new CCM_Philosopher_Context_impl(servantImpl, commonCtx.in());

                ASSERT(dynamic_cast<Components::SessionContext *>(compContext.in()));

                sessionComponent -> set_session_context(dynamic_cast<Components::SessionContext *>(compContext.in()));

                compComposition -> setContext(compContext.in());
            }

            Components::EntityComponent_var entityComponent =
                      Components::EntityComponent::_duplicate(dynamic_cast<Components::EntityComponent*>(enterCom.in()));

            if(!CORBA::is_nil(entityComponent))
            {
                Components::Entity2Context_var commonCtx = cifHook_ -> getEntity2ctx();
                CCM_Philosopher_Context_var compContext
                       = new CCM_Philosopher_Context_impl(servantImpl, commonCtx.in());

                ASSERT(dynamic_cast<Components::EntityContext *>(compContext.in()));
                entityComponent -> set_entity_context(dynamic_cast<Components::EntityContext *>(compContext.in()));

                compComposition -> setContext(compContext.in());
            }

            if(enableHomeConfigutation_)
            {
                if(!CORBA::is_nil(configurator_))
                {
                    configurator_ -> configure(Components::CCMObject::_narrow(comp));
                }
                else if((Components::ConfigValues*)configValues_ != 0)
                {
                    //use config values to configurate the component which is newly created.
                    //have not implemented.
                }
                if(complete_)
                {
                    Components::CCMObject_var ccmObject = Components::CCMObject::_narrow(comp);
                    ccmObject -> configuration_complete();
                }
            }

            return Dinner::Philosopher::_narrow(comp);
        }
        else
        {
            throw Components::CreateFailure();
        }
    }
    else
    {
        throw Components::CreateFailure();
    }
    return Dinner::Philosopher::_nil();
}

/*Dinner::Philosopher_ptr
Dinner::PhilosopherHome_impl::activeComponent(ContainerPSS::ASComponentHome_ptr storageHome, const char* uuid)
throw(CORBA::SystemException, Components::CreateFailure)
{
    CORBA::Object_var compRef;
    Container::ComponentComposition_var compComposition = new Container::ComponentComposition;

    if(homeExecutor_)
    {
        Components::EnterpriseComponent_var enterCom;
        try
        {
            enterCom = homeExecutor_ -> create();
        }
        catch(Components::CCMException& exc)
        {
            exc;
            throw Components::CreateFailure();
        }

        Dinner::CCM_Philosopher_var executor = Dinner::CCM_Philosopher::_narrow(enterCom);
        if(!CORBA::is_nil(executor))
        {
            compComposition -> registerComponentExecutor(enterCom.in());

            Dinner::Philosopher_impl* servantImpl 
                = new Dinner::Philosopher_impl(comPOA_.in(), executor.in());
            servantImpl -> setCIFHook(cifHook_);

            compRef = servantImpl -> activate(storageHome, uuid);
            compComposition -> registerComponentRef(compRef.in());

            PortableServer::ObjectId_var comObjectId = PortableServer::string_to_ObjectId(uuid);
            compComposition -> registerComponentServant(comObjectId.in(), servantImpl);

            servantImpl -> setComObjectID(comObjectId.in());

            CORBA::Object_var portRef;
            cifHook_ -> onCreateComponent(compComposition.in());

            Components::SessionComponent_var sessionComponent =
                Components::SessionComponent::_duplicate(
                        dynamic_cast<Components::SessionComponent*>(enterCom.in()));

            if(!CORBA::is_nil(sessionComponent))
            {
                Components::Session2Context_var commonCtx = cifHook_ -> getSession2ctx();
                Dinner::CCM_Philosopher_Context_var compContext 
                = new CCM_Philosopher_Context_impl(servantImpl, commonCtx.in());

                ASSERT(dynamic_cast<Components::SessionContext *>(compContext.in()));

                sessionComponent -> set_session_context(dynamic_cast<Components::SessionContext *>(compContext.in()));

                compComposition -> setContext(compContext.in());
            }

            Components::EntityComponent_var entityComponent =
                      Components::EntityComponent::_duplicate(dynamic_cast<Components::EntityComponent*>(enterCom.in()));

            if(!CORBA::is_nil(entityComponent))
            {
                Components::Entity2Context_var commonCtx = cifHook_ -> getEntity2ctx();
                CCM_Philosopher_Context_var compContext
                       = new CCM_Philosopher_Context_impl(servantImpl, commonCtx.in());

                ASSERT(dynamic_cast<Components::EntityContext *>(compContext.in()));
                entityComponent -> set_entity_context(dynamic_cast<Components::EntityContext *>(compContext.in()));

                compComposition -> setContext(compContext.in());
            }

            return Dinner::Philosopher::_narrow(compRef);
        }
        else
        {
            throw Components::CreateFailure();
        }
    }
    else
    {
        throw Components::CreateFailure();
    }
    return Dinner::Philosopher::_nil();
}*/

//Home
Dinner::CutleryHome_impl::CutleryHome_impl(Container::CIFHook_ptr cifHook)
 : cifHook_(OBJDUPLICATE(Container::CIFHook_ptr, cifHook))
{
    enableHomeConfigutation_ = false;
    complete_ = false;
    homeExecutor_ = 
        dynamic_cast< Dinner::CCM_CutleryHome_ptr > (cifHook_ -> getHomeExecutorBase());

    homePOA_ =  cifHook_ -> getHomePOA();
    comPOA_ =  cifHook_ -> getComponentPOA();
}

Dinner::CutleryHome_impl::~CutleryHome_impl()
{
}

PortableServer::POA_ptr
Dinner::CutleryHome_impl::_default_POA()
{
    return PortableServer::POA::_duplicate(homePOA_);
}

void
Dinner::CutleryHome_impl::setExecutor(CORBA::Object_ptr obj)
{
    homeExecutor_ = Dinner::CCM_CutleryHome::_duplicate(dynamic_cast<Dinner::CCM_CutleryHome_ptr>(obj));
}

CORBA::Object_ptr
Dinner::CutleryHome_impl::getExecutor()
{
    return Dinner::CCM_CutleryHome::_duplicate(homeExecutor_);
}


void
Dinner::CutleryHome_impl::set_configurator(Components::Configurator_ptr configurator)
{
    configurator_ = Components::Configurator::_duplicate(configurator);
    enableHomeConfigutation_ = true;
}


void
Dinner::CutleryHome_impl::set_configuration_values(const Components::ConfigValues& configValues)
{
    configValues_ = new Components::ConfigValues(configValues);
}


void
Dinner::CutleryHome_impl::complete_component_configuration(CORBA::Boolean complete)
{
    complete_ = complete;
}


void
Dinner::CutleryHome_impl::disable_home_configuration()
{
    enableHomeConfigutation_ = false;
}

Dinner::Cutlery_ptr
Dinner::CutleryHome_impl::create()
throw(CORBA::SystemException, Components::CreateFailure)
{
    CORBA::String_var uuid;
    Container::ComponentComposition_var compComposition = new Container::ComponentComposition;

    if(homeExecutor_)
    {
        Components::EnterpriseComponent_var enterCom;
        try
        {
            enterCom = homeExecutor_ -> create();
        }
        catch(Components::CCMException& exc)
        {
            exc;
            throw Components::CreateFailure();
        }

        #ifdef TAO
        Dinner::CCM_Cutlery_var executor = dynamic_cast<Dinner::CCM_Cutlery*>(enterCom.in());
        #else
        Dinner::CCM_Cutlery_var executor = Dinner::CCM_Cutlery::_narrow(enterCom);
        #endif
        if(!CORBA::is_nil(executor))
        {
            compComposition -> registerComponentExecutor(enterCom.in());

            Dinner::Cutlery_impl* servantImpl 
                = new Dinner::Cutlery_impl(comPOA_.in(), executor.in());
            servantImpl -> setCIFHook(cifHook_);

            uuid = Components::UuidGenerator::generateUuid();

            PortableServer::ObjectId_var comObjectId = PortableServer::string_to_ObjectId(uuid);

            CORBA::Object_var comp = 
                 cifHook_ -> createReference(comObjectId.in(),"IDL:Dinner/Cutlery:1.0");
            compComposition -> registerComponentRef(comp.in());

            compComposition -> registerComponentServant(comObjectId.in(), servantImpl);

            servantImpl -> setComObjectID(comObjectId.in());

            Dinner::CCM_Fork_var executorFork = executor -> get_the_fork();
            Dinner::Fork_impl* servantForkImpl 
                = new Dinner::Fork_impl(comPOA_.in(),executorFork.in());

            uuid = Components::UuidGenerator::generateUuid();
            PortableServer::ObjectId_var refForkObjectId = PortableServer::string_to_ObjectId(uuid);
            compComposition -> registerPortServant(refForkObjectId.in(), servantForkImpl);

            CORBA::Object_var refFork = 
            cifHook_ -> createReference(refForkObjectId.in(),"IDL:Dinner/Fork:1.0");

            cifHook_ -> onCreateComponent(compComposition.in());


            Components::FacetDescription_var facetDes;
            Components::ConsumerDescription_var consDes;
            Components::EmitterDescription_var emitDes;
            Components::PublisherDescription_var pubDes;
            Components::ReceptacleDescription_var recDes;

            //Provides
            facetDes = new Components::FacetDescription_impl;
            facetDes -> name(static_cast<const char*>("the_fork"));
            facetDes -> type_id(static_cast<const char*>("IDL:Dinner/Fork:1.0"));
            facetDes -> facet_ref(CORBA::Object::_duplicate(refFork.in()));
            facetDes -> _add_ref();
            servantImpl -> facets_.insert(Components::FacetsMap::value_type(static_cast<const char*>("the_fork"),facetDes.in()));

            Components::SessionComponent_var sessionComponent =
                Components::SessionComponent::_duplicate(
                        dynamic_cast<Components::SessionComponent*>(enterCom.in()));

            if(!CORBA::is_nil(sessionComponent))
            {
                Components::Session2Context_var commonCtx = cifHook_ -> getSession2ctx();
                Dinner::CCM_Cutlery_Context_var compContext 
                = new CCM_Cutlery_Context_impl(servantImpl, commonCtx.in());

                ASSERT(dynamic_cast<Components::SessionContext *>(compContext.in()));

                sessionComponent -> set_session_context(dynamic_cast<Components::SessionContext *>(compContext.in()));

                compComposition -> setContext(compContext.in());
            }

            Components::EntityComponent_var entityComponent =
                      Components::EntityComponent::_duplicate(dynamic_cast<Components::EntityComponent*>(enterCom.in()));

            if(!CORBA::is_nil(entityComponent))
            {
                Components::Entity2Context_var commonCtx = cifHook_ -> getEntity2ctx();
                CCM_Cutlery_Context_var compContext
                       = new CCM_Cutlery_Context_impl(servantImpl, commonCtx.in());

                ASSERT(dynamic_cast<Components::EntityContext *>(compContext.in()));
                entityComponent -> set_entity_context(dynamic_cast<Components::EntityContext *>(compContext.in()));

                compComposition -> setContext(compContext.in());
            }

            if(enableHomeConfigutation_)
            {
                if(!CORBA::is_nil(configurator_))
                {
                    configurator_ -> configure(Components::CCMObject::_narrow(comp));
                }
                else if((Components::ConfigValues*)configValues_ != 0)
                {
                    //use config values to configurate the component which is newly created.
                    //have not implemented.
                }
                if(complete_)
                {
                    Components::CCMObject_var ccmObject = Components::CCMObject::_narrow(comp);
                    ccmObject -> configuration_complete();
                }
            }

            return Dinner::Cutlery::_narrow(comp);
        }
        else
        {
            throw Components::CreateFailure();
        }
    }
    else
    {
        throw Components::CreateFailure();
    }
    return Dinner::Cutlery::_nil();
}

/*Dinner::Cutlery_ptr
Dinner::CutleryHome_impl::activeComponent(ContainerPSS::ASComponentHome_ptr storageHome, const char* uuid)
throw(CORBA::SystemException, Components::CreateFailure)
{
    CORBA::Object_var compRef;
    Container::ComponentComposition_var compComposition = new Container::ComponentComposition;

    if(homeExecutor_)
    {
        Components::EnterpriseComponent_var enterCom;
        try
        {
            enterCom = homeExecutor_ -> create();
        }
        catch(Components::CCMException& exc)
        {
            exc;
            throw Components::CreateFailure();
        }

        Dinner::CCM_Cutlery_var executor = Dinner::CCM_Cutlery::_narrow(enterCom);
        if(!CORBA::is_nil(executor))
        {
            compComposition -> registerComponentExecutor(enterCom.in());

            Dinner::Cutlery_impl* servantImpl 
                = new Dinner::Cutlery_impl(comPOA_.in(), executor.in());
            servantImpl -> setCIFHook(cifHook_);

            compRef = servantImpl -> activate(storageHome, uuid);
            compComposition -> registerComponentRef(compRef.in());

            PortableServer::ObjectId_var comObjectId = PortableServer::string_to_ObjectId(uuid);
            compComposition -> registerComponentServant(comObjectId.in(), servantImpl);

            servantImpl -> setComObjectID(comObjectId.in());

            CORBA::Object_var portRef;
            Dinner::CCM_Fork_var executorFork = executor -> get_the_fork();
            Dinner::Fork_impl* servantForkImpl 
                = new Dinner::Fork_impl(comPOA_.in(),executorFork.in());

            portRef = servantImpl -> provide_the_fork();
            PortableServer::ObjectId_var refForkObjectId = comPOA_ -> reference_to_id(portRef);
            compComposition -> registerPortServant(refForkObjectId.in(), servantForkImpl);

            cifHook_ -> onCreateComponent(compComposition.in());

            Components::SessionComponent_var sessionComponent =
                Components::SessionComponent::_duplicate(
                        dynamic_cast<Components::SessionComponent*>(enterCom.in()));

            if(!CORBA::is_nil(sessionComponent))
            {
                Components::Session2Context_var commonCtx = cifHook_ -> getSession2ctx();
                Dinner::CCM_Cutlery_Context_var compContext 
                = new CCM_Cutlery_Context_impl(servantImpl, commonCtx.in());

                ASSERT(dynamic_cast<Components::SessionContext *>(compContext.in()));

                sessionComponent -> set_session_context(dynamic_cast<Components::SessionContext *>(compContext.in()));

                compComposition -> setContext(compContext.in());
            }

            Components::EntityComponent_var entityComponent =
                      Components::EntityComponent::_duplicate(dynamic_cast<Components::EntityComponent*>(enterCom.in()));

            if(!CORBA::is_nil(entityComponent))
            {
                Components::Entity2Context_var commonCtx = cifHook_ -> getEntity2ctx();
                CCM_Cutlery_Context_var compContext
                       = new CCM_Cutlery_Context_impl(servantImpl, commonCtx.in());

                ASSERT(dynamic_cast<Components::EntityContext *>(compContext.in()));
                entityComponent -> set_entity_context(dynamic_cast<Components::EntityContext *>(compContext.in()));

                compComposition -> setContext(compContext.in());
            }

            return Dinner::Cutlery::_narrow(compRef);
        }
        else
        {
            throw Components::CreateFailure();
        }
    }
    else
    {
        throw Components::CreateFailure();
    }
    return Dinner::Cutlery::_nil();
}*/


CORBA::IRObject_ptr 
Dinner::PhilosopherHome_impl::get_component_def()
{
    return 0;
}

CORBA::IRObject_ptr 
Dinner::PhilosopherHome_impl::get_home_def()
{
    return 0;
}

Components::CCMObject_ptr 
Dinner::PhilosopherHome_impl::create_component() 
     throw (Components::CreateFailure)
{
    return create();
}

void 
Dinner::PhilosopherHome_impl::remove_component(Components::CCMObject_ptr comp)
     throw (Components::RemoveFailure)
{
    comp -> remove();
}

CORBA::IRObject_ptr 
Dinner::CutleryHome_impl::get_component_def()
{
    return 0;
}

CORBA::IRObject_ptr 
Dinner::CutleryHome_impl::get_home_def()
{
    return 0;
}

Components::CCMObject_ptr 
Dinner::CutleryHome_impl::create_component() 
     throw (Components::CreateFailure)
{
    return create();
}

void 
Dinner::CutleryHome_impl::remove_component(Components::CCMObject_ptr comp)
     throw (Components::RemoveFailure)
{
    comp -> remove();
}

