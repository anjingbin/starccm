// **********************************************************************
//
// Generated by the CIDL Translator
//
// Copyright (c) 2001-2004
// StarMiddleware Group
// www.StarMiddleware.net
//
// All Rights Reserved
//
// Author: Huang Jie        huangjie@email.com
// Author: Chang Junsheng   cjs7908@163.com
// Author: Zhen Xianrong
//
// **********************************************************************


#ifndef __CCM_Dinner_skel_h__
#define __CCM_Dinner_skel_h__

#include <CCM_Dinner.h>

namespace Dinner
{
    namespace PhilosopherImpl
    {
        class CCM_Philosopher_skel : virtual public Dinner::CCM_Philosopher,
                                     public CORBA::LocalObject
        {
            CCM_Philosopher_skel(const CCM_Philosopher_skel&);
            void operator=(const CCM_Philosopher_skel&);

        public:

            CCM_Philosopher_skel();
            ~CCM_Philosopher_skel();

            virtual const char** _STAR_ids() const { return 0; }

            virtual ::CORBA::OctetSeq* get_pid();

            virtual void configuration_complete()
                throw(CORBA::SystemException,
                      Components::InvalidConfiguration)
            {
            }
            #ifdef TAO
            virtual const char* _interface_repository_id() const { return 0; }
            virtual void* _tao_QueryInterface(ptr_arith_t type) { return 0; }
            #endif
        };

        class CCM_PhilosopherHome_skel : virtual public Dinner::CCM_PhilosopherHome,
                                         public CORBA::LocalObject
        {
            CCM_PhilosopherHome_skel(const CCM_PhilosopherHome_skel&);
            void operator=(const CCM_PhilosopherHome_skel&);

        protected:

            Components::CCM2Context_var ctx_;
        public:

            CCM_PhilosopherHome_skel();
            ~CCM_PhilosopherHome_skel();

            virtual ::CORBA::OctetSeq* get_pid();
            virtual char* get_storage_home_id() = 0;

            void set_context(Components::CCM2Context_ptr ctx);
        };


    }//End of namespace PhilosopherImpl


    namespace CutleryImpl
    {
        class CCM_Cutlery_skel : virtual public Dinner::CCM_Fork,
                                 virtual public Dinner::CCM_Cutlery,
                                 public CORBA::LocalObject
        {
            CCM_Cutlery_skel(const CCM_Cutlery_skel&);
            void operator=(const CCM_Cutlery_skel&);

        public:

            CCM_Cutlery_skel();
            ~CCM_Cutlery_skel();

            virtual const char** _STAR_ids() const { return 0; }

            virtual Dinner::CCM_Fork_ptr get_the_fork()
                throw(CORBA::SystemException);

            virtual ::CORBA::OctetSeq* get_pid();

            virtual void configuration_complete()
                throw(CORBA::SystemException,
                      Components::InvalidConfiguration)
            {
            }
            #ifdef TAO
            virtual const char* _interface_repository_id() const { return 0; }
            virtual void* _tao_QueryInterface(ptr_arith_t type) { return 0; }
            #endif
        };

        class CCM_CutleryHome_skel : virtual public Dinner::CCM_CutleryHome,
                                     public CORBA::LocalObject
        {
            CCM_CutleryHome_skel(const CCM_CutleryHome_skel&);
            void operator=(const CCM_CutleryHome_skel&);

        protected:

            Components::CCM2Context_var ctx_;
        public:

            CCM_CutleryHome_skel();
            ~CCM_CutleryHome_skel();

            virtual ::CORBA::OctetSeq* get_pid();
            virtual char* get_storage_home_id() = 0;

            void set_context(Components::CCM2Context_ptr ctx);
        };


    }//End of namespace CutleryImpl


}//End of namespace Dinner


#endif
