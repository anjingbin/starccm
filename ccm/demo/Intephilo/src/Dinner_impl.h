// **********************************************************************
//
// Generated by the IDL3 Translator
//
// Copyright (c) 2001-2004
// StarMiddleware Group
// www.StarMiddleware.net
//
// All Rights Reserved
//
// Author: Huang Jie        huangjie@email.com
// Author: Chang Junsheng   cjs7908@163.com
// Author: Zhen Xianrong
//
// **********************************************************************


#ifndef __Dinner_impl_h__
#define __Dinner_impl_h__


#include <CIFHook.h>
#include <ComponentServentBase.h>
#include <Dinner_skel.h>
#include <CCM_Dinner.h>
#include <Delegation.h>
//Interface
//Interface
//Interface

namespace Dinner
{
    //Interface
    //Interface
    //Interface
    class Fork_impl : virtual public Components::Delegation,
                      virtual public POA_Dinner::Fork,
                      virtual public PortableServer::RefCountServantBase
    {
        Fork_impl(const Fork_impl&);
        void operator=(const Fork_impl&);

        PortableServer::POA_var poa_;

        Dinner::CCM_Fork_var executor_;

    public:

        Fork_impl(PortableServer::POA_ptr, Dinner::CCM_Fork_ptr);

        ~Fork_impl();

        virtual PortableServer::POA_ptr _default_POA();

        virtual void setExecutor(CORBA::Object_ptr obj);
        virtual CORBA::Object_ptr getExecutor();


        //
        // IDL:Dinner/Fork/obtain_fork:1.0
        //
        virtual Components::Cookie* obtain_fork()
            throw(Dinner::ForkNotAvailable,
                  CORBA::SystemException);

        //
        // IDL:Dinner/Fork/release_fork:1.0
        //
        virtual void release_fork(Components::Cookie* ck)
            throw(Dinner::NotTheEater,
                  CORBA::SystemException);
    };

    //Interface
    class Named_impl : virtual public Components::Delegation,
                       virtual public POA_Dinner::Named,
                       virtual public PortableServer::RefCountServantBase
    {
        Named_impl(const Named_impl&);
        void operator=(const Named_impl&);

        PortableServer::POA_var poa_;

        Dinner::CCM_Named_var executor_;

    public:

        Named_impl(PortableServer::POA_ptr, Dinner::CCM_Named_ptr);

        ~Named_impl();

        virtual PortableServer::POA_ptr _default_POA();

        virtual void setExecutor(CORBA::Object_ptr obj);
        virtual CORBA::Object_ptr getExecutor();


        //
        // IDL:Dinner/Named/name:1.0
        //
        virtual char* name()
            throw(CORBA::SystemException);
        virtual void name(const char*)
            throw(CORBA::SystemException);
    };

    //Component
    class Philosopher_impl : virtual public POA_Dinner::Philosopher,
                             virtual public POA_Dinner::Named,
                             virtual public Components::Delegation,
                             virtual public PortableServer::RefCountServantBase,
                             public Components::ComponentServentBase
    {
        Philosopher_impl(const Philosopher_impl&);
        void operator=(const Philosopher_impl&);

        PortableServer::POA_var poa_;
        Dinner::CCM_Philosopher_var executor_;
        Container::CIFHook_var cifHook_;
        PortableServer::ObjectId_var comObjectId_;

    public:

        Philosopher_impl(PortableServer::POA_ptr, Dinner::CCM_Philosopher_ptr);

        ~Philosopher_impl();

        virtual PortableServer::POA_ptr _default_POA();

        virtual void setExecutor(CORBA::Object_ptr obj);
        virtual CORBA::Object_ptr getExecutor();
        void setCIFHook(Container::CIFHook_ptr cifHook);
        void setComObjectID(const PortableServer::ObjectId& objID);
        //add by wsf
        Container::CIFHook_ptr getCIFHook();
        //end of adding by wsf

        //
        // IDL:Dinner/Named/name:1.0
        //
        virtual char* name()
            throw(CORBA::SystemException);
        virtual void name(const char*)
            throw(CORBA::SystemException);

        //
        // IDL:Dinner/Philosopher/thinking_seconds:1.0
        //
        virtual CORBA::ULong thinking_seconds()
            throw(CORBA::SystemException);
        virtual void thinking_seconds(CORBA::ULong)
            throw(CORBA::SystemException);

        //
        // IDL:Dinner/Philosopher/eating_seconds:1.0
        //
        virtual CORBA::ULong eating_seconds()
            throw(CORBA::SystemException);
        virtual void eating_seconds(CORBA::ULong)
            throw(CORBA::SystemException);

        //
        // IDL:Dinner/Philosopher/sleeping_seconds:1.0
        //
        virtual CORBA::ULong sleeping_seconds()
            throw(CORBA::SystemException);
        virtual void sleeping_seconds(CORBA::ULong)
            throw(CORBA::SystemException);

        virtual void connect_left_hand(::Dinner::Fork_ptr connection)
          throw(Components::AlreadyConnected,
                      Components::InvalidConnection,
                      CORBA::SystemException);

        virtual ::Dinner::Fork_ptr disconnect_left_hand ()
           throw(Components::NoConnection,
                       CORBA::SystemException);

        virtual ::Dinner::Fork_ptr get_connection_left_hand ()
                throw(CORBA::SystemException);

        virtual void connect_right_hand(::Dinner::Fork_ptr connection)
          throw(Components::AlreadyConnected,
                      Components::InvalidConnection,
                      CORBA::SystemException);

        virtual ::Dinner::Fork_ptr disconnect_right_hand ()
           throw(Components::NoConnection,
                       CORBA::SystemException);

        virtual ::Dinner::Fork_ptr get_connection_right_hand ()
                throw(CORBA::SystemException);

        virtual void connect_observer(::Dinner::Observing_ptr connection)
          throw(Components::AlreadyConnected,
                      Components::InvalidConnection,
                      CORBA::SystemException);

        virtual ::Dinner::Observing_ptr disconnect_observer ()
           throw(Components::NoConnection,
                       CORBA::SystemException);

        virtual ::Dinner::Observing_ptr get_connection_observer ()
                throw(CORBA::SystemException);


        virtual void configuration_complete();
        virtual void remove()
            throw(Components::RemoveFailure);
    };

    //Component
    class Cutlery_impl : virtual public POA_Dinner::Cutlery,
                         virtual public Components::Delegation,
                         virtual public PortableServer::RefCountServantBase,
                         public Components::ComponentServentBase
    {
        Cutlery_impl(const Cutlery_impl&);
        void operator=(const Cutlery_impl&);

        PortableServer::POA_var poa_;
        Dinner::CCM_Cutlery_var executor_;
        Container::CIFHook_var cifHook_;
        PortableServer::ObjectId_var comObjectId_;

    public:

        Cutlery_impl(PortableServer::POA_ptr, Dinner::CCM_Cutlery_ptr);

        ~Cutlery_impl();

        virtual PortableServer::POA_ptr _default_POA();

        virtual void setExecutor(CORBA::Object_ptr obj);
        virtual CORBA::Object_ptr getExecutor();
        void setCIFHook(Container::CIFHook_ptr cifHook);
        void setComObjectID(const PortableServer::ObjectId& objID);


        //Provides
        virtual ::Dinner::Fork_ptr provide_the_fork()
        throw(CORBA::SystemException);


        virtual void configuration_complete();
        virtual void remove()
            throw(Components::RemoveFailure);
    };

    //Home
    class PhilosopherHome_impl : virtual public POA_Dinner::PhilosopherHome,
                                 virtual public POA_Dinner::PhilosopherHomeImplicit,
                                 virtual public POA_Dinner::PhilosopherHomeExplicit,
                                 virtual public Components::Delegation
    {
        PhilosopherHome_impl(const PhilosopherHome_impl&);
        void operator=(const PhilosopherHome_impl&);

        PortableServer::POA_var homePOA_;
        PortableServer::POA_var comPOA_;

        Container::CIFHook_var cifHook_;

        Dinner::CCM_PhilosopherHome_var homeExecutor_;

        Components::Configurator_var configurator_;
        Components::ConfigValues_var configValues_;
        CORBA::Boolean enableHomeConfigutation_;
        CORBA::Boolean complete_;
    public:

        PhilosopherHome_impl(Container::CIFHook_ptr cifHook);
        ~PhilosopherHome_impl();

        virtual PortableServer::POA_ptr _default_POA();

        virtual void setExecutor(CORBA::Object_ptr obj);
        virtual CORBA::Object_ptr getExecutor();

        virtual void set_configurator(Components::Configurator_ptr configurator);
        virtual void set_configuration_values(const Components::ConfigValues& configValues);
        virtual void complete_component_configuration(CORBA::Boolean complete);
        virtual void disable_home_configuration();

        virtual ::Dinner::Philosopher_ptr create()
        throw(CORBA::SystemException, Components::CreateFailure);
        //virtual ::Dinner::Philosopher_ptr activeComponent(ContainerPSS::ASComponentHome_ptr storageHome, const char* uuid)
        //throw(Components::CreateFailure, CORBA::SystemException);

        virtual CORBA::IRObject_ptr get_component_def();
        virtual CORBA::IRObject_ptr get_home_def ();

        virtual Components::CCMObject_ptr create_component() 
        throw (Components::CreateFailure);

        virtual void remove_component(Components::CCMObject_ptr comp)
        throw (Components::RemoveFailure);

    };
    //Home
    class CutleryHome_impl : virtual public POA_Dinner::CutleryHome,
                             virtual public POA_Dinner::CutleryHomeImplicit,
                             virtual public POA_Dinner::CutleryHomeExplicit,
                             virtual public Components::Delegation
    {
        CutleryHome_impl(const CutleryHome_impl&);
        void operator=(const CutleryHome_impl&);

        PortableServer::POA_var homePOA_;
        PortableServer::POA_var comPOA_;

        Container::CIFHook_var cifHook_;

        Dinner::CCM_CutleryHome_var homeExecutor_;

        Components::Configurator_var configurator_;
        Components::ConfigValues_var configValues_;
        CORBA::Boolean enableHomeConfigutation_;
        CORBA::Boolean complete_;
    public:

        CutleryHome_impl(Container::CIFHook_ptr cifHook);
        ~CutleryHome_impl();

        virtual PortableServer::POA_ptr _default_POA();

        virtual void setExecutor(CORBA::Object_ptr obj);
        virtual CORBA::Object_ptr getExecutor();

        virtual void set_configurator(Components::Configurator_ptr configurator);
        virtual void set_configuration_values(const Components::ConfigValues& configValues);
        virtual void complete_component_configuration(CORBA::Boolean complete);
        virtual void disable_home_configuration();

        virtual ::Dinner::Cutlery_ptr create()
        throw(CORBA::SystemException, Components::CreateFailure);
        //virtual ::Dinner::Cutlery_ptr activeComponent(ContainerPSS::ASComponentHome_ptr storageHome, const char* uuid)
        //throw(Components::CreateFailure, CORBA::SystemException);

        virtual CORBA::IRObject_ptr get_component_def();
        virtual CORBA::IRObject_ptr get_home_def ();

        virtual Components::CCMObject_ptr create_component() 
        throw (Components::CreateFailure);

        virtual void remove_component(Components::CCMObject_ptr comp)
        throw (Components::RemoveFailure);

    };

}

#endif
