// *************************************************************************
//
// This File Is Automatically Generated by the StarBusIDL-to-C++ Compiler !
//
// Copyright (c) 2003
// Network Information Security Institute,Computer College,NUDT.
// ChangSha,Hunan,PRC
//
// All Rights Reserved
//
// *************************************************************************

// Version: 5.0.0

#include <STAR/CORBAClient.h>
#include <STAR/CORBAServer.h>
#include <CCM_Dinner.h>

namespace Dinner
{

STAR::TypeCodeConst _tc_CCM_Fork(
"01f71200210000002d000000010000001800000049444c3a44696e6e65722f43434d5f466f726"
"b3a312e30000900000043434d5f466f726b00"
);

STAR::TypeCodeConst _tc_CCM_Named(
"01f71200210000003200000001ee12001900000049444c3a44696e6e65722f43434d5f4e616d6"
"5643a312e3000ffffff0a00000043434d5f4e616d656400"
);

STAR::TypeCodeConst _tc_CCM_Philosopher(
"01f71200210000003c00000001ee12001f00000049444c3a44696e6e65722f43434d5f5068696"
"c6f736f706865723a312e3000001000000043434d5f5068696c6f736f7068657200"
);

STAR::TypeCodeConst _tc_CCM_Cutlery(
"01f71200210000003400000001ee12001b00000049444c3a44696e6e65722f43434d5f4375746"
"c6572793a312e3000ff0c00000043434d5f4375746c65727900"
);

STAR::TypeCodeConst _tc_CCM_PhilosopherHomeExplicit(
"01f71200210000005400000001ee12002b00000049444c3a44696e6e65722f43434d5f5068696"
"c6f736f70686572486f6d654578706c696369743a312e3000001c00000043434d5f5068696c6f"
"736f70686572486f6d654578706c6963697400"
);

STAR::TypeCodeConst _tc_CCM_PhilosopherHomeImplicit(
"01f71200210000005400000001ee12002b00000049444c3a44696e6e65722f43434d5f5068696"
"c6f736f70686572486f6d65496d706c696369743a312e3000001c00000043434d5f5068696c6f"
"736f70686572486f6d65496d706c6963697400"
);

STAR::TypeCodeConst _tc_CCM_PhilosopherHome(
"01f71200210000004400000001ee12002300000049444c3a44696e6e65722f43434d5f5068696"
"c6f736f70686572486f6d653a312e3000001400000043434d5f5068696c6f736f70686572486f"
"6d6500"
);

STAR::TypeCodeConst _tc_CCM_CutleryHomeExplicit(
"01f71200210000004c00000001ee12002700000049444c3a44696e6e65722f43434d5f4375746"
"c657279486f6d654578706c696369743a312e3000001800000043434d5f4375746c657279486f"
"6d654578706c6963697400"
);

STAR::TypeCodeConst _tc_CCM_CutleryHomeImplicit(
"01f71200210000004c00000001ee12002700000049444c3a44696e6e65722f43434d5f4375746"
"c657279486f6d65496d706c696369743a312e3000001800000043434d5f4375746c657279486f"
"6d65496d706c6963697400"
);

STAR::TypeCodeConst _tc_CCM_CutleryHome(
"01f71200210000003c00000001ee12001f00000049444c3a44696e6e65722f43434d5f4375746"
"c657279486f6d653a312e3000001000000043434d5f4375746c657279486f6d6500"
);

STAR::TypeCodeConst _tc_CCM_Philosopher_Context(
"01f71200210000004c00000001ee12002700000049444c3a44696e6e65722f43434d5f5068696"
"c6f736f706865725f436f6e746578743a312e3000001800000043434d5f5068696c6f736f7068"
"65725f436f6e7465787400"
);

STAR::TypeCodeConst _tc_CCM_Cutlery_Context(
"01f71200210000004400000001ee12002300000049444c3a44696e6e65722f43434d5f4375746"
"c6572795f436f6e746578743a312e3000001400000043434d5f4375746c6572795f436f6e7465"
"787400"
);

} // End of namespace Dinner

//
// Interface declare ::Dinner::CCM_Fork
//
void
STARDuplicate(Dinner::CCM_Fork_ptr p)
{
    if(p)
        p -> _STAR_incRef();
}

void
STARRelease(Dinner::CCM_Fork_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

Dinner::CCM_Fork_ptr
Dinner::CCM_Fork::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CCM_Fork_ptr v = dynamic_cast<CCM_Fork_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

Dinner::CCM_Fork_ptr
Dinner::CCM_Fork::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

void
STARMarshal(Dinner::CCM_Fork_ptr, STAR::OutputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
STARUnmarshal(Dinner::CCM_Fork_ptr&, STAR::InputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_Fork_ptr* v)
{
    any.replace(Dinner::_tc_CCM_Fork, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_Fork_ptr v)
{
    Dinner::CCM_Fork_ptr val = Dinner::CCM_Fork::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Dinner::CCM_Fork_ptr& v)
{
    if(any.check_type(Dinner::_tc_CCM_Fork))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<Dinner::CCM_Fork_ptr>(val);
        }
        else
            v = Dinner::CCM_Fork::_nil();

        return true;
    }
    else
        return false;
}

//
// Interface declare ::Dinner::CCM_Named
//
void
STARDuplicate(Dinner::CCM_Named_ptr p)
{
    if(p)
        p -> _STAR_incRef();
}

void
STARRelease(Dinner::CCM_Named_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

Dinner::CCM_Named_ptr
Dinner::CCM_Named::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CCM_Named_ptr v = dynamic_cast<CCM_Named_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

Dinner::CCM_Named_ptr
Dinner::CCM_Named::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

void
STARMarshal(Dinner::CCM_Named_ptr, STAR::OutputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
STARUnmarshal(Dinner::CCM_Named_ptr&, STAR::InputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_Named_ptr* v)
{
    any.replace(Dinner::_tc_CCM_Named, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_Named_ptr v)
{
    Dinner::CCM_Named_ptr val = Dinner::CCM_Named::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Dinner::CCM_Named_ptr& v)
{
    if(any.check_type(Dinner::_tc_CCM_Named))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<Dinner::CCM_Named_ptr>(val);
        }
        else
            v = Dinner::CCM_Named::_nil();

        return true;
    }
    else
        return false;
}

//
// Interface declare ::Dinner::CCM_Philosopher
//
void
STARDuplicate(Dinner::CCM_Philosopher_ptr p)
{
    if(p)
        p -> _STAR_incRef();
}

void
STARRelease(Dinner::CCM_Philosopher_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

Dinner::CCM_Philosopher_ptr
Dinner::CCM_Philosopher::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CCM_Philosopher_ptr v = dynamic_cast<CCM_Philosopher_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

Dinner::CCM_Philosopher_ptr
Dinner::CCM_Philosopher::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

void
STARMarshal(Dinner::CCM_Philosopher_ptr, STAR::OutputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
STARUnmarshal(Dinner::CCM_Philosopher_ptr&, STAR::InputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_Philosopher_ptr* v)
{
    any.replace(Dinner::_tc_CCM_Philosopher, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_Philosopher_ptr v)
{
    Dinner::CCM_Philosopher_ptr val = Dinner::CCM_Philosopher::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Dinner::CCM_Philosopher_ptr& v)
{
    if(any.check_type(Dinner::_tc_CCM_Philosopher))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<Dinner::CCM_Philosopher_ptr>(val);
        }
        else
            v = Dinner::CCM_Philosopher::_nil();

        return true;
    }
    else
        return false;
}

//
// Interface declare ::Dinner::CCM_Cutlery
//
void
STARDuplicate(Dinner::CCM_Cutlery_ptr p)
{
    if(p)
        p -> _STAR_incRef();
}

void
STARRelease(Dinner::CCM_Cutlery_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

Dinner::CCM_Cutlery_ptr
Dinner::CCM_Cutlery::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CCM_Cutlery_ptr v = dynamic_cast<CCM_Cutlery_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

Dinner::CCM_Cutlery_ptr
Dinner::CCM_Cutlery::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

void
STARMarshal(Dinner::CCM_Cutlery_ptr, STAR::OutputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
STARUnmarshal(Dinner::CCM_Cutlery_ptr&, STAR::InputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_Cutlery_ptr* v)
{
    any.replace(Dinner::_tc_CCM_Cutlery, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_Cutlery_ptr v)
{
    Dinner::CCM_Cutlery_ptr val = Dinner::CCM_Cutlery::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Dinner::CCM_Cutlery_ptr& v)
{
    if(any.check_type(Dinner::_tc_CCM_Cutlery))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<Dinner::CCM_Cutlery_ptr>(val);
        }
        else
            v = Dinner::CCM_Cutlery::_nil();

        return true;
    }
    else
        return false;
}

//
// Interface declare ::Dinner::CCM_PhilosopherHomeExplicit
//
void
STARDuplicate(Dinner::CCM_PhilosopherHomeExplicit_ptr p)
{
    if(p)
        p -> _STAR_incRef();
}

void
STARRelease(Dinner::CCM_PhilosopherHomeExplicit_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

Dinner::CCM_PhilosopherHomeExplicit_ptr
Dinner::CCM_PhilosopherHomeExplicit::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CCM_PhilosopherHomeExplicit_ptr v = dynamic_cast<CCM_PhilosopherHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

Dinner::CCM_PhilosopherHomeExplicit_ptr
Dinner::CCM_PhilosopherHomeExplicit::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

void
STARMarshal(Dinner::CCM_PhilosopherHomeExplicit_ptr, STAR::OutputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
STARUnmarshal(Dinner::CCM_PhilosopherHomeExplicit_ptr&, STAR::InputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_PhilosopherHomeExplicit_ptr* v)
{
    any.replace(Dinner::_tc_CCM_PhilosopherHomeExplicit, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_PhilosopherHomeExplicit_ptr v)
{
    Dinner::CCM_PhilosopherHomeExplicit_ptr val = Dinner::CCM_PhilosopherHomeExplicit::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Dinner::CCM_PhilosopherHomeExplicit_ptr& v)
{
    if(any.check_type(Dinner::_tc_CCM_PhilosopherHomeExplicit))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<Dinner::CCM_PhilosopherHomeExplicit_ptr>(val);
        }
        else
            v = Dinner::CCM_PhilosopherHomeExplicit::_nil();

        return true;
    }
    else
        return false;
}

//
// Interface declare ::Dinner::CCM_PhilosopherHomeImplicit
//
void
STARDuplicate(Dinner::CCM_PhilosopherHomeImplicit_ptr p)
{
    if(p)
        p -> _STAR_incRef();
}

void
STARRelease(Dinner::CCM_PhilosopherHomeImplicit_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

Dinner::CCM_PhilosopherHomeImplicit_ptr
Dinner::CCM_PhilosopherHomeImplicit::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CCM_PhilosopherHomeImplicit_ptr v = dynamic_cast<CCM_PhilosopherHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

Dinner::CCM_PhilosopherHomeImplicit_ptr
Dinner::CCM_PhilosopherHomeImplicit::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

void
STARMarshal(Dinner::CCM_PhilosopherHomeImplicit_ptr, STAR::OutputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
STARUnmarshal(Dinner::CCM_PhilosopherHomeImplicit_ptr&, STAR::InputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_PhilosopherHomeImplicit_ptr* v)
{
    any.replace(Dinner::_tc_CCM_PhilosopherHomeImplicit, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_PhilosopherHomeImplicit_ptr v)
{
    Dinner::CCM_PhilosopherHomeImplicit_ptr val = Dinner::CCM_PhilosopherHomeImplicit::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Dinner::CCM_PhilosopherHomeImplicit_ptr& v)
{
    if(any.check_type(Dinner::_tc_CCM_PhilosopherHomeImplicit))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<Dinner::CCM_PhilosopherHomeImplicit_ptr>(val);
        }
        else
            v = Dinner::CCM_PhilosopherHomeImplicit::_nil();

        return true;
    }
    else
        return false;
}

//
// Interface declare ::Dinner::CCM_PhilosopherHome
//
void
STARDuplicate(Dinner::CCM_PhilosopherHome_ptr p)
{
    if(p)
        p -> _STAR_incRef();
}

void
STARRelease(Dinner::CCM_PhilosopherHome_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

Dinner::CCM_PhilosopherHome_ptr
Dinner::CCM_PhilosopherHome::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CCM_PhilosopherHome_ptr v = dynamic_cast<CCM_PhilosopherHome_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

Dinner::CCM_PhilosopherHome_ptr
Dinner::CCM_PhilosopherHome::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

void
STARMarshal(Dinner::CCM_PhilosopherHome_ptr, STAR::OutputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
STARUnmarshal(Dinner::CCM_PhilosopherHome_ptr&, STAR::InputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_PhilosopherHome_ptr* v)
{
    any.replace(Dinner::_tc_CCM_PhilosopherHome, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_PhilosopherHome_ptr v)
{
    Dinner::CCM_PhilosopherHome_ptr val = Dinner::CCM_PhilosopherHome::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Dinner::CCM_PhilosopherHome_ptr& v)
{
    if(any.check_type(Dinner::_tc_CCM_PhilosopherHome))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<Dinner::CCM_PhilosopherHome_ptr>(val);
        }
        else
            v = Dinner::CCM_PhilosopherHome::_nil();

        return true;
    }
    else
        return false;
}

//
// Interface declare ::Dinner::CCM_CutleryHomeExplicit
//
void
STARDuplicate(Dinner::CCM_CutleryHomeExplicit_ptr p)
{
    if(p)
        p -> _STAR_incRef();
}

void
STARRelease(Dinner::CCM_CutleryHomeExplicit_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

Dinner::CCM_CutleryHomeExplicit_ptr
Dinner::CCM_CutleryHomeExplicit::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CCM_CutleryHomeExplicit_ptr v = dynamic_cast<CCM_CutleryHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

Dinner::CCM_CutleryHomeExplicit_ptr
Dinner::CCM_CutleryHomeExplicit::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

void
STARMarshal(Dinner::CCM_CutleryHomeExplicit_ptr, STAR::OutputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
STARUnmarshal(Dinner::CCM_CutleryHomeExplicit_ptr&, STAR::InputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_CutleryHomeExplicit_ptr* v)
{
    any.replace(Dinner::_tc_CCM_CutleryHomeExplicit, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_CutleryHomeExplicit_ptr v)
{
    Dinner::CCM_CutleryHomeExplicit_ptr val = Dinner::CCM_CutleryHomeExplicit::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Dinner::CCM_CutleryHomeExplicit_ptr& v)
{
    if(any.check_type(Dinner::_tc_CCM_CutleryHomeExplicit))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<Dinner::CCM_CutleryHomeExplicit_ptr>(val);
        }
        else
            v = Dinner::CCM_CutleryHomeExplicit::_nil();

        return true;
    }
    else
        return false;
}

//
// Interface declare ::Dinner::CCM_CutleryHomeImplicit
//
void
STARDuplicate(Dinner::CCM_CutleryHomeImplicit_ptr p)
{
    if(p)
        p -> _STAR_incRef();
}

void
STARRelease(Dinner::CCM_CutleryHomeImplicit_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

Dinner::CCM_CutleryHomeImplicit_ptr
Dinner::CCM_CutleryHomeImplicit::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CCM_CutleryHomeImplicit_ptr v = dynamic_cast<CCM_CutleryHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

Dinner::CCM_CutleryHomeImplicit_ptr
Dinner::CCM_CutleryHomeImplicit::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

void
STARMarshal(Dinner::CCM_CutleryHomeImplicit_ptr, STAR::OutputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
STARUnmarshal(Dinner::CCM_CutleryHomeImplicit_ptr&, STAR::InputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_CutleryHomeImplicit_ptr* v)
{
    any.replace(Dinner::_tc_CCM_CutleryHomeImplicit, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_CutleryHomeImplicit_ptr v)
{
    Dinner::CCM_CutleryHomeImplicit_ptr val = Dinner::CCM_CutleryHomeImplicit::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Dinner::CCM_CutleryHomeImplicit_ptr& v)
{
    if(any.check_type(Dinner::_tc_CCM_CutleryHomeImplicit))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<Dinner::CCM_CutleryHomeImplicit_ptr>(val);
        }
        else
            v = Dinner::CCM_CutleryHomeImplicit::_nil();

        return true;
    }
    else
        return false;
}

//
// Interface declare ::Dinner::CCM_CutleryHome
//
void
STARDuplicate(Dinner::CCM_CutleryHome_ptr p)
{
    if(p)
        p -> _STAR_incRef();
}

void
STARRelease(Dinner::CCM_CutleryHome_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

Dinner::CCM_CutleryHome_ptr
Dinner::CCM_CutleryHome::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CCM_CutleryHome_ptr v = dynamic_cast<CCM_CutleryHome_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

Dinner::CCM_CutleryHome_ptr
Dinner::CCM_CutleryHome::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

void
STARMarshal(Dinner::CCM_CutleryHome_ptr, STAR::OutputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
STARUnmarshal(Dinner::CCM_CutleryHome_ptr&, STAR::InputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_CutleryHome_ptr* v)
{
    any.replace(Dinner::_tc_CCM_CutleryHome, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_CutleryHome_ptr v)
{
    Dinner::CCM_CutleryHome_ptr val = Dinner::CCM_CutleryHome::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Dinner::CCM_CutleryHome_ptr& v)
{
    if(any.check_type(Dinner::_tc_CCM_CutleryHome))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<Dinner::CCM_CutleryHome_ptr>(val);
        }
        else
            v = Dinner::CCM_CutleryHome::_nil();

        return true;
    }
    else
        return false;
}

//
// Interface declare ::Dinner::CCM_Philosopher_Context
//
void
STARDuplicate(Dinner::CCM_Philosopher_Context_ptr p)
{
    if(p)
        p -> _STAR_incRef();
}

void
STARRelease(Dinner::CCM_Philosopher_Context_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

Dinner::CCM_Philosopher_Context_ptr
Dinner::CCM_Philosopher_Context::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CCM_Philosopher_Context_ptr v = dynamic_cast<CCM_Philosopher_Context_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

Dinner::CCM_Philosopher_Context_ptr
Dinner::CCM_Philosopher_Context::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

void
STARMarshal(Dinner::CCM_Philosopher_Context_ptr, STAR::OutputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
STARUnmarshal(Dinner::CCM_Philosopher_Context_ptr&, STAR::InputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_Philosopher_Context_ptr* v)
{
    any.replace(Dinner::_tc_CCM_Philosopher_Context, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_Philosopher_Context_ptr v)
{
    Dinner::CCM_Philosopher_Context_ptr val = Dinner::CCM_Philosopher_Context::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Dinner::CCM_Philosopher_Context_ptr& v)
{
    if(any.check_type(Dinner::_tc_CCM_Philosopher_Context))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<Dinner::CCM_Philosopher_Context_ptr>(val);
        }
        else
            v = Dinner::CCM_Philosopher_Context::_nil();

        return true;
    }
    else
        return false;
}

//
// Interface declare ::Dinner::CCM_Cutlery_Context
//
void
STARDuplicate(Dinner::CCM_Cutlery_Context_ptr p)
{
    if(p)
        p -> _STAR_incRef();
}

void
STARRelease(Dinner::CCM_Cutlery_Context_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

Dinner::CCM_Cutlery_Context_ptr
Dinner::CCM_Cutlery_Context::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CCM_Cutlery_Context_ptr v = dynamic_cast<CCM_Cutlery_Context_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

Dinner::CCM_Cutlery_Context_ptr
Dinner::CCM_Cutlery_Context::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

void
STARMarshal(Dinner::CCM_Cutlery_Context_ptr, STAR::OutputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
STARUnmarshal(Dinner::CCM_Cutlery_Context_ptr&, STAR::InputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_Cutlery_Context_ptr* v)
{
    any.replace(Dinner::_tc_CCM_Cutlery_Context, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, Dinner::CCM_Cutlery_Context_ptr v)
{
    Dinner::CCM_Cutlery_Context_ptr val = Dinner::CCM_Cutlery_Context::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, Dinner::CCM_Cutlery_Context_ptr& v)
{
    if(any.check_type(Dinner::_tc_CCM_Cutlery_Context))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<Dinner::CCM_Cutlery_Context_ptr>(val);
        }
        else
            v = Dinner::CCM_Cutlery_Context::_nil();

        return true;
    }
    else
        return false;
}
