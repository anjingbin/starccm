// **********************************************************************
//
// Generated by the CIDL Translator
//
// Copyright (c) 2001-2004
// StarMiddleware Group
// www.StarMiddleware.net
//
// All Rights Reserved
//
// Author: Huang Jie        huangjie@email.com
// Author: Chang Junsheng   cjs7908@163.com
// Author: Zhen Xianrong
//
// **********************************************************************

#include <CORBA.h>
#include <CCM_Account_impl.h>
#include <CommonFunc.h>

#include <string>


#ifdef HAVE_STD_IOSTREAM
using namespace std;
#endif

Bank::AccountComposition::CCM_Account_impl::CCM_Account_impl():database_( NULL )
{
}

Bank::AccountComposition::CCM_Account_impl::~CCM_Account_impl()
{
}

void
Bank::AccountComposition::CCM_Account_impl::configuration_complete()
	throw (Components::InvalidConfiguration, CORBA::SystemException)
{
}

void
Bank::AccountComposition::CCM_Account_impl::enter_dyn_deploy()
		throw(CORBA::SystemException)
{
}

void
Bank::AccountComposition::CCM_Account_impl::leave_dyn_deploy()
		throw(CORBA::SystemException)
{
}

void
Bank::AccountComposition::CCM_Account_impl::set_session_context(Components::SessionContext* ctx)
    throw(Components::CCMException,
          CORBA::SystemException)
{
    #ifdef TAO
    ctx_ = Bank::CCM_Account_Context::_duplicate(dynamic_cast<Bank::CCM_Account_Context*>(ctx));
    #else
    ctx_ = Bank::CCM_Account_Context::_narrow(ctx);
    #endif
}

void
Bank::AccountComposition::CCM_Account_impl::ccm_activate()
    throw(Components::CCMException,
          CORBA::SystemException)
{
}

void
Bank::AccountComposition::CCM_Account_impl::ccm_passivate()
    throw(Components::CCMException,
          CORBA::SystemException)
{
}

void
Bank::AccountComposition::CCM_Account_impl::ccm_remove()
    throw(Components::CCMException,
          CORBA::SystemException)
{
	if( database_ != NULL)
	{
		PQfinish(database_);
		database_ = NULL;
	}
}


CORBA::ULong
Bank::AccountComposition::CCM_Account_impl::getBalance(const char* id)
    throw(CORBA::SystemException)
{
    CORBA::ULong _r = 0;
    
	if( database_ == NULL)
	{
		connect_database();
	}    
	
	string query = "select balance from account";
	query += " where ";	
	query += " id = \'";
	query += id;
	query += "\'";
	
	PGresult * result = PQexec(database_,query.c_str());

	if( PQresultStatus(result) != PGRES_TUPLES_OK)
	{
		PQclear(result);
		throw CORBA::PERSIST_STORE();
	}
	
	int ret_count = PQntuples(result);
	if( ret_count == 0)
	{
		throw CORBA::PERSIST_STORE();
	}

	int len = PQgetlength(result, 0, 0);
	char*  data = PQgetvalue(result, 0, 0);
	
	int balance;

	sscanf(data,"%d",&balance);
	

	_r = balance;
    return _r;   
}

void
Bank::AccountComposition::CCM_Account_impl::deposit(const char* id,
                                                    CORBA::ULong amount)
    throw(CORBA::SystemException)
{
	if( database_ == NULL)
	{
		connect_database();
	}    
	
	string query = "select balance from account";
	query += " where ";	
	query += " id = \'";
	query += id;
	query += "\'";
	
	PGresult * result = PQexec(database_,query.c_str());

	if( PQresultStatus(result) != PGRES_TUPLES_OK)
	{
		PQclear(result);
		throw CORBA::PERSIST_STORE();
	}
	
	int ret_count = PQntuples(result);
	if( ret_count == 0)
	{
		throw CORBA::PERSIST_STORE();
	}

	int len = PQgetlength(result, 0, 0);
	char*  data = PQgetvalue(result, 0, 0);
	
	int balance;

	sscanf(data,"%d",&balance);
	
	balance += amount;
		
	PQclear(result);

	char buf[256];
	sprintf(buf,"%d",balance);
	
	query = "update account set ";
	query += "balance = ";
	query += buf;
	query += " where id = \'";
	query += id;
	query += "\'";
	
	result = PQexec(database_,query.c_str());

	if( PQresultStatus(result) != PGRES_COMMAND_OK)
	{
		PQclear(result);
		throw CORBA::PERSIST_STORE();
	}	
}

CORBA::ULong
Bank::AccountComposition::CCM_Account_impl::withdraw(const char* id,
                                                     CORBA::ULong amount)
    throw(CORBA::SystemException)
{
    CORBA::ULong _r = 0;
    
	if( database_ == NULL)
	{
		connect_database();
	}    
	
	string query = "select balance from account";
	query += " where ";	
	query += " id = \'";
	query += id;
	query += "\'";
	
	PGresult * result = PQexec(database_,query.c_str());

	if( PQresultStatus(result) != PGRES_TUPLES_OK)
	{
		PQclear(result);
		throw CORBA::PERSIST_STORE();
	}
	
	int ret_count = PQntuples(result);
	if( ret_count == 0)
	{
		throw CORBA::PERSIST_STORE();
	}

	int len = PQgetlength(result, 0, 0);
	char*  data = PQgetvalue(result, 0, 0);
	
	int balance;

	sscanf(data,"%d",&balance);
	
	if( balance >= amount)
	{
		balance -= amount;
		_r = amount;
	}
	else
	{
		_r = balance;
		balance = 0;
	}
		
	PQclear(result);

	char buf[256];
	sprintf(buf,"%d",balance);
	
	query = "update account set ";
	query += "balance = ";
	query += buf;
	query += " where id = \'";
	query += id;
	query += "\'";
	
	result = PQexec(database_,query.c_str());

	if( PQresultStatus(result) != PGRES_COMMAND_OK)
	{
		PQclear(result);
		throw CORBA::PERSIST_STORE();
	}	
	
    return _r;
}

CORBA::Boolean
Bank::AccountComposition::CCM_Account_impl::authenticate(const char* id,
                                                         const char* password)
    throw(CORBA::SystemException)
{
    CORBA::Boolean _r = false;
    TRACE0(LEVEL6, "======================authenticate0\n");
	if( database_ == NULL)
	{
		connect_database();
	}    

	TRACE0(LEVEL6, "======================authenticate1\n");
	string query = "select * from account";
	query += " where ";	
	query += " id = \'";
	query += id;
	query += "\'";
	query += " and ";
	query += " password = \'";
	query += password;
	query += "\'";
	TRACE0(LEVEL6, "======================authenticate2\n");
	PGresult * result = PQexec(database_,query.c_str());
        TRACE0(LEVEL6, "======================authenticate3\n");
	if( PQresultStatus(result) != PGRES_TUPLES_OK)
	{
		PQclear(result);
		throw CORBA::PERSIST_STORE();
	}
	TRACE0(LEVEL6, "======================authenticate4\n");
	int ret_count = PQntuples(result);
	if( ret_count == 0)
	{
		_r = false;
	}
	else
		_r = true;
	TRACE0(LEVEL6, "======================authenticate5\n");
	PQclear(result);
	TRACE0(LEVEL6, "======================authenticate6\n");
    
    return _r;
}

void
Bank::AccountComposition::CCM_Account_impl::changePassword(const char* id,
                                                           const char* newPassword)
    throw(CORBA::SystemException)
{
  	if( database_ == NULL)
	{
		connect_database();
	}    

	string query = "update account set ";
	query += "password = \'";
	query += newPassword;
	query += "\'";
	query += " where id = \'";
	query += id;
	query += "\'";
	
	PGresult * result = PQexec(database_,query.c_str());

	if( PQresultStatus(result) != PGRES_COMMAND_OK)
	{
		PQclear(result);
		throw CORBA::PERSIST_STORE();
	}	
}

Bank::AccountComposition::CCM_AccountHome_impl::CCM_AccountHome_impl()
{
}

Bank::AccountComposition::CCM_AccountHome_impl::~CCM_AccountHome_impl()
{
}

Components::EnterpriseComponent_ptr
Bank::AccountComposition::CCM_AccountHome_impl::create()
    throw(Components::CCMException,
          CORBA::SystemException)
{
    return new Bank::AccountComposition::CCM_Account_impl();
}

char*
Bank::AccountComposition::CCM_AccountHome_impl::get_storage_home_id()
{
    return 0;
}

CORBA::Boolean
Bank::AccountComposition::CCM_Account_impl::connect_database()
    throw(CORBA::SystemException)
{
	// TODO: Implementation
	CORBA::Boolean _r = false;

//modified by xiao heping 2004/07/20		
//	string conninfo = "";
//	conninfo += "hostaddr = ";
//	conninfo += "172.26.13.88";
//	
//	conninfo += " dbname = \'";
//	conninfo += "bank";
//	conninfo += "\'";
//	
//	conninfo += " user = \'";
//	conninfo += "ccm";
//	conninfo += "\'";
//	
//	conninfo += " password = \'";
//	conninfo += "ccm613";
//	conninfo += "\'";

	string str = HelpFun::GetCCMProfileString("Bank","Bank_Database_Host","","starccm.properties");
	string conninfo = "";
	conninfo += "hostaddr = ";
	conninfo += str;
	
	str = HelpFun::GetCCMProfileString("Bank","Bank_Database_Name","","starccm.properties");	
	conninfo += " dbname = \'";
	conninfo += str;
	conninfo += "\'";
	
	str = HelpFun::GetCCMProfileString("Bank","Bank_Database_User","","starccm.properties");	
	conninfo += " user = \'";
	conninfo += str;
	conninfo += "\'";
	
	str = HelpFun::GetCCMProfileString("Bank","Bank_Database_Password","","starccm.properties");
	conninfo += " password = \'";
	conninfo += str;
	conninfo += "\'";
//end modify 
	TRACE1(LEVEL6, "======================connect4: %s\n",  conninfo.c_str());
	PGconn * conn = PQconnectdb( conninfo.c_str() );
	TRACE0(LEVEL6, "======================connect5\n");
	if (PQstatus(conn) == CONNECTION_BAD)
	{
		TRACE1(LEVEL6, "======================connect8: %s\n", PQerrorMessage(conn));
		PQfinish(conn);
		TRACE0(LEVEL6, "======================connect9\n");
		throw CORBA::PERSIST_STORE();
	}

	TRACE0(LEVEL6, "======================connect6\n");
	database_ = conn;    
	_r = true;
	TRACE0(LEVEL6, "======================connect7\n");
	return _r;
}

