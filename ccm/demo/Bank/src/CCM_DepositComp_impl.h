// **********************************************************************
//
// Generated by the CIDL Translator
//
// Copyright (c) 2001-2004
// StarMiddleware Group
// www.StarMiddleware.net
//
// All Rights Reserved
//
// Author: Huang Jie        huangjie@email.com
// Author: Chang Junsheng   cjs7908@163.com
// Author: Zhen Xianrong
//
// **********************************************************************


#ifndef __CCM_DepositComp_impl_h__
#define __CCM_DepositComp_impl_h__

#include <CCM.h>

#include <CCM_DepositComp_skel.h>
#include <DepositComp_ValueType_impl.h>


namespace Bank
{
    namespace DepositCompComposition
    {
        class CCM_DepositComp_impl : virtual public Bank::DepositCompComposition::CCM_DepositComp_skel,
                                     public Components::SessionComponent
        {
            CCM_DepositComp_impl(const CCM_DepositComp_impl&);
            void operator=(const CCM_DepositComp_impl&);

        protected:
            Bank::CCM_DepositComp_Context_var ctx_;
        public:

            CCM_DepositComp_impl();
            ~CCM_DepositComp_impl();

	    virtual const char** _STAR_ids() const { return 0; }
            virtual void configuration_complete()
		    	throw (Components::InvalidConfiguration, CORBA::SystemException);
            virtual void enter_dyn_deploy()
            	throw(CORBA::SystemException);
            virtual void leave_dyn_deploy()
            	throw(CORBA::SystemException);
            virtual void set_session_context(Components::SessionContext*)
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_activate()
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_passivate()
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_remove()
                throw(Components::CCMException,
                      CORBA::SystemException);
            #ifdef TAO
            virtual const char* _interface_repository_id() const { return 0; }
            virtual void* _tao_QueryInterface(ptr_arith_t type) { return 0; }
            #endif

            virtual void deposit(const char* id,
                                 CORBA::ULong amount)
                throw(CORBA::SystemException);
        };

        class CCM_DepositCompHome_impl : virtual public Bank::DepositCompComposition::CCM_DepositCompHome_skel
        {
            CCM_DepositCompHome_impl(const CCM_DepositCompHome_impl&);
            void operator=(const CCM_DepositCompHome_impl&);

        public:

            CCM_DepositCompHome_impl();
            ~CCM_DepositCompHome_impl();

            virtual Components::EnterpriseComponent_ptr create()
                throw(Components::CCMException,
                      CORBA::SystemException);

            virtual char* get_storage_home_id();
        };


    }//End of namespace DepositCompComposition


}//End of namespace Bank


#endif
