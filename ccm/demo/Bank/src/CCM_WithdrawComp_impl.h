// **********************************************************************
//
// Generated by the CIDL Translator
//
// Copyright (c) 2001-2004
// StarMiddleware Group
// www.StarMiddleware.net
//
// All Rights Reserved
//
// Author: Huang Jie        huangjie@email.com
// Author: Chang Junsheng   cjs7908@163.com
// Author: Zhen Xianrong
//
// **********************************************************************


#ifndef __CCM_WithdrawComp_impl_h__
#define __CCM_WithdrawComp_impl_h__

#include <CCM.h>

#include <CCM_WithdrawComp_skel.h>
#include <WithdrawComp_ValueType_impl.h>


namespace Bank
{
    namespace WithdrawCompComposition
    {
        class CCM_WithdrawComp_impl : virtual public Bank::WithdrawCompComposition::CCM_WithdrawComp_skel,
                                      public Components::SessionComponent
        {
            CCM_WithdrawComp_impl(const CCM_WithdrawComp_impl&);
            void operator=(const CCM_WithdrawComp_impl&);

        protected:
            Bank::CCM_WithdrawComp_Context_var ctx_;
        public:

            CCM_WithdrawComp_impl();
            ~CCM_WithdrawComp_impl();

	    virtual const char** _STAR_ids() const { return 0; }
            virtual void configuration_complete()
            	throw (Components::InvalidConfiguration, CORBA::SystemException);
            virtual void enter_dyn_deploy()
            	throw(CORBA::SystemException);
            virtual void leave_dyn_deploy()
            	throw(CORBA::SystemException);
            virtual void set_session_context(Components::SessionContext*)
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_activate()
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_passivate()
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_remove()
                throw(Components::CCMException,
                      CORBA::SystemException);
            #ifdef TAO
            virtual const char* _interface_repository_id() const { return 0; }
            virtual void* _tao_QueryInterface(ptr_arith_t type) { return 0; }
            #endif

            virtual CORBA::ULong withdraw(const char* id,
                                          CORBA::ULong amount)
                throw(CORBA::SystemException);
        };

        class CCM_WithdrawCompHome_impl : virtual public Bank::WithdrawCompComposition::CCM_WithdrawCompHome_skel
        {
            CCM_WithdrawCompHome_impl(const CCM_WithdrawCompHome_impl&);
            void operator=(const CCM_WithdrawCompHome_impl&);

        public:

            CCM_WithdrawCompHome_impl();
            ~CCM_WithdrawCompHome_impl();

            virtual Components::EnterpriseComponent_ptr create()
                throw(Components::CCMException,
                      CORBA::SystemException);

            virtual char* get_storage_home_id();
        };


    }//End of namespace WithdrawCompComposition


}//End of namespace Bank


#endif
