// **********************************************************************
//
// Copyright (c) 2002
// Network Information Security Institute,Computer College,NUDT.
// ChangSha,Hunan,PRC
//
// All Rights Reserved
//
// **********************************************************************

#ifndef STAR_COS_TRANSACTIONS_OTS_IDL
#define STAR_COS_TRANSACTIONS_OTS_IDL


//Forward references for interfaces defined in 'pg_res.idl'
interface ResourceFactory;
interface Resource;

module CosTransactions {

interface Synchronization;//renyi 12 25

//DATATYPES
enum Status {
		StatusActive,
    	StatusMarkedRollback,
		StatusPrepared,
		StatusCommitted,
    	StatusRolledBack,
    	StatusUnknown,
    	StatusNoTransaction,
    	StatusPreparing,
    	StatusCommitting,
    	StatusRollingBack
};

enum Vote {
		VoteCommit,
    	VoteRollback,
    	VoteReadOnly
};


/* Added */
enum ResourceVote {	//the Resource status in coordinator's ResourceList
	RV_Vote_Commit,
    	RV_Vote_Rollback,
    	RV_Vote_ReadOnly,
	RV_NotPrepared,
	RV_Committed,
	RV_RolledBack
};


//Forward references for interfaces defined later in module
interface TransactionFactory;
interface Control;
interface Terminator;
interface Coordinator;
interface RecoveryCoordinator;
interface TransactionalObject;


//Standard exceptions
exception TRANSACTION_REQUIRED {};
exception TRANSACTION_ROLLEDBACK {};
exception INVALID_TRANSACTION {};

//Exception raised by ORB
exception WRONG_TRANSACTION {};

//Heuristic exceptions
exception HeuristicRollback {};
exception HeuristicCommit {};
exception HeuristicMixed {};
exception HeuristicHazard {};

//Other transaction-specific exceptions
exception SubtransactionsUnavailable {};
exception NotSubtransaction {};
exception Inactive {};
exception NotPrepared {};
exception NoTransaction {};
exception InvalidControl {};
exception Unavailable {};
exception SynchronizationUnavailable {};


interface TransactionFactory {
	
	Control create(in unsigned long time_out)
		raises(
				TRANSACTION_REQUIRED,				
				TRANSACTION_ROLLEDBACK,
				INVALID_TRANSACTION,
				WRONG_TRANSACTION
		);
};

interface Control {

	Terminator get_terminator()
		raises(
				Unavailable,

				TRANSACTION_REQUIRED,				
				TRANSACTION_ROLLEDBACK,
				INVALID_TRANSACTION,
				WRONG_TRANSACTION
		);
		
	Coordinator get_coordinator()
		raises(
				Unavailable,

				TRANSACTION_REQUIRED,				
				TRANSACTION_ROLLEDBACK,
				INVALID_TRANSACTION,
				WRONG_TRANSACTION
		);
	
	// Added to free private variables' spaces of Control object 
	// then release itself additionally.
	void release ();
};

interface Terminator {

	void commit(in boolean report_heuristics)
		raises(
		    		HeuristicMixed,
               			HeuristicHazard,
				HeuristicRollback,
				HeuristicCommit,

				TRANSACTION_REQUIRED,				
				TRANSACTION_ROLLEDBACK,
				INVALID_TRANSACTION,
				WRONG_TRANSACTION
		);
		
    	void rollback()
		raises(
				TRANSACTION_REQUIRED,				
				TRANSACTION_ROLLEDBACK,
				INVALID_TRANSACTION,
				WRONG_TRANSACTION
		);
	
	// Added to free private variables' spaces of Terminator object.
	void release ();
};

interface Coordinator {

	/* Added */
	struct RCV {
		Resource r;
		RecoveryCoordinator rc;
		ResourceVote rv;
	};
	typedef sequence<RCV> RCVs;

	Status get_status()
		raises(
				TRANSACTION_REQUIRED,				
				TRANSACTION_ROLLEDBACK,
				INVALID_TRANSACTION,
				WRONG_TRANSACTION
		);

	boolean is_same_transaction(in Coordinator tc)
		raises(
				TRANSACTION_REQUIRED,				
				TRANSACTION_ROLLEDBACK,
				INVALID_TRANSACTION,
				WRONG_TRANSACTION
		);

	RecoveryCoordinator register_resource(in Resource r)
		raises(
				Inactive,

				TRANSACTION_REQUIRED,				
				TRANSACTION_ROLLEDBACK,
				INVALID_TRANSACTION,
				WRONG_TRANSACTION
		);

	void register_synchronization (in Synchronization sync)
        raises(
        		Inactive, 
        		SynchronizationUnavailable
        );
        
	void rollback_only()
		raises(
				Inactive,

				TRANSACTION_REQUIRED,				
				TRANSACTION_ROLLEDBACK,
				INVALID_TRANSACTION,
				WRONG_TRANSACTION
		);


	/* Added */
    	void commit(in boolean report_heuristics)
		raises(
				TRANSACTION_REQUIRED,				
				TRANSACTION_ROLLEDBACK,
				INVALID_TRANSACTION,
				WRONG_TRANSACTION
		);
		
	void rollback()
		raises(
				TRANSACTION_REQUIRED,				
				TRANSACTION_ROLLEDBACK,
				INVALID_TRANSACTION,
				WRONG_TRANSACTION
		);
		
	void change_resourcevote (in Resource r, in ResourceVote rv)	
		raises(
				TRANSACTION_REQUIRED,				
				TRANSACTION_ROLLEDBACK,
				INVALID_TRANSACTION,
				WRONG_TRANSACTION
		);
	
	// Added to free private variables' spaces of Coordinator object.
	void release ();
};


interface RecoveryCoordinator {

	Status replay_completion(in Resource r)
		raises(				
				NotPrepared,

				TRANSACTION_REQUIRED,				
				TRANSACTION_ROLLEDBACK,
				INVALID_TRANSACTION,
				WRONG_TRANSACTION
		);
	
	// Added to free private variables' spaces of RecoveryCoordinator object.
	void release ();
};


interface TransactionalObject{
};

};//End of CosTransactions Module

#endif
