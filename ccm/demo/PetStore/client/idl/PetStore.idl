// **********************************************************************
//
// Generated by the IDL3 Translator
//
// Copyright (c) 2002
// NUDT 613 Technologies.
// ChangSha, China
//
// All Rights Reserved
//
// **********************************************************************


#ifndef ___PetStore_idl__
#define ___PetStore_idl__

#include <CCMCommon.idl>
#include <CCMObject.idl>
#include <CCMHome.idl>

module PetStore
{
    interface Calculate;
    interface Pricer;
    valuetype KeyID;
    interface Product;
    interface OrderItem;
    interface OrderOp;
    interface Order;
    interface ShoppingCart;
    interface Cart;
    valuetype SalesReport;
    interface BusinessOp;
    interface AdvancedOp;
    interface Sales;
    interface Manage;
    interface Manager;
}; // End of module PetStore

module PetStore
{
    struct OrderIndexInfo
    {
        string order_id;
        unsigned long sub_total;
    };

    typedef sequence<OrderIndexInfo> OrderIndexInfoList;

    typedef sequence<unsigned long> ItemPriceList;

    interface Calculate
    {
        unsigned long multiply(in unsigned long unitPrice,
                               in unsigned long quantity);
        unsigned long add(in ItemPriceList itemList);
    };

    //Component

    interface Pricer: ::PetStore::Calculate,
    ::Components::CCMObject
    {
    };

    //Home

    interface PricerHomeExplicit: ::Components::CCMHome
    {
    };

    interface PricerHomeImplicit: ::Components::KeylessCCMHome 
    {
        ::PetStore::Pricer create()
            raises(::Components::CreateFailure);
    };

    interface PricerHome:PricerHomeExplicit, 
                         PricerHomeImplicit
    {
    };

    valuetype KeyID : ::Components::PrimaryKeyBase
    {
        public string id;
    };

    enum ProductCategory
    {
        DOG,
        CAT,
        FISH,
        BIRD
    };

    //Component

    interface Product: ::Components::CCMObject
    {
        readonly attribute KeyID product_id;
        attribute string product_name;
        attribute string product_picture;
        attribute string product_category;
        attribute unsigned long product_price;
        attribute unsigned long product_qty;
        attribute string product_description;
    };

    typedef sequence<Product> ProductList;


    struct ProductIndexInfo
    {
        string product_id;
        string product_name;
        string product_category;
    };

    typedef sequence<ProductIndexInfo> ProductIndexInfoList;

    //Home

    interface ProductHomeExplicit: ::Components::CCMHome
    {
        ProductIndexInfoList findByProductCategory(in ProductCategory category);
        ProductIndexInfoList findAllProducts();
    };

    interface ProductHomeImplicit
    {
        ::PetStore::Product create(in ::PetStore::KeyID pkey)
            raises(::Components::CreateFailure,
                   ::Components::DuplicateKeyValue,
                   ::Components::InvalidKey);
        ::PetStore::Product find_by_primary_key(in ::PetStore::KeyID pkey)
            raises(::Components::FinderFailure,
                   ::Components::UnknownKeyValue,
                   ::Components::InvalidKey);
        void remove(in ::PetStore::KeyID pkey)
            raises(::Components::RemoveFailure,
                   ::Components::UnknownKeyValue,
                   ::Components::InvalidKey);
        ::PetStore::KeyID get_primary_key(in ::PetStore::Product comp);
    };

    interface ProductHome:ProductHomeExplicit, 
                          ProductHomeImplicit
    {
    };

    //Component

    interface OrderItem: ::Components::CCMObject
    {
        readonly attribute KeyID orderItem_id;
        attribute string product_id;
        attribute string product_name;
        attribute unsigned long quantity;
        attribute unsigned long unit_price;
        attribute unsigned long sub_total;
    };

    //Home

    interface OrderItemHomeExplicit: ::Components::CCMHome
    {
    };

    interface OrderItemHomeImplicit
    {
        ::PetStore::OrderItem create(in ::PetStore::KeyID pkey)
            raises(::Components::CreateFailure,
                   ::Components::DuplicateKeyValue,
                   ::Components::InvalidKey);
        ::PetStore::OrderItem find_by_primary_key(in ::PetStore::KeyID pkey)
            raises(::Components::FinderFailure,
                   ::Components::UnknownKeyValue,
                   ::Components::InvalidKey);
        void remove(in ::PetStore::KeyID pkey)
            raises(::Components::RemoveFailure,
                   ::Components::UnknownKeyValue,
                   ::Components::InvalidKey);
        ::PetStore::KeyID get_primary_key(in ::PetStore::OrderItem comp);
    };

    interface OrderItemHome:OrderItemHomeExplicit, 
                            OrderItemHomeImplicit
    {
    };

    typedef sequence<KeyID> IDSeq;

    interface OrderOp
    {
        KeyID addItem(in string product_id,
                      in string product_name,
                      in unsigned long quantity,
                      in unsigned long unit_price,
                      in unsigned long sub_total);
        void delItem(in KeyID ID);
    };


    struct OrderItemInfo
    {
        string orderItem_id;
        string product_id;
        string product_name;
        unsigned long quantity;
        unsigned long unit_price;
        unsigned long sub_total;
    };

    typedef sequence<OrderItemInfo> OrderItemInfoList;

    //Component

    interface Order: ::PetStore::OrderOp,
    ::Components::CCMObject
    {
        readonly attribute KeyID order_id;
        attribute string user_name;
        attribute string user_address;
        attribute OrderItemInfoList order_items;
        attribute string order_time;
        attribute unsigned long sub_total;
        //Uses
        void connect_the_OrderItemHome (in ::PetStore::OrderItemHome conn )
            raises (::Components::AlreadyConnected,
                    ::Components::InvalidConnection);
        ::PetStore::OrderItemHome disconnect_the_OrderItemHome()
            raises (::Components::NoConnection );
        ::PetStore::OrderItemHome get_connection_the_OrderItemHome();

    };

    typedef sequence<Order> OrderList;

    //Home

    interface OrderHomeExplicit: ::Components::CCMHome
    {
        OrderIndexInfoList findAllOrders();
    };

    interface OrderHomeImplicit
    {
        ::PetStore::Order create(in ::PetStore::KeyID pkey)
            raises(::Components::CreateFailure,
                   ::Components::DuplicateKeyValue,
                   ::Components::InvalidKey);
        ::PetStore::Order find_by_primary_key(in ::PetStore::KeyID pkey)
            raises(::Components::FinderFailure,
                   ::Components::UnknownKeyValue,
                   ::Components::InvalidKey);
        void remove(in ::PetStore::KeyID pkey)
            raises(::Components::RemoveFailure,
                   ::Components::UnknownKeyValue,
                   ::Components::InvalidKey);
        ::PetStore::KeyID get_primary_key(in ::PetStore::Order comp);
    };

    interface OrderHome:OrderHomeExplicit, 
                        OrderHomeImplicit
    {
    };


    struct SalesRecordInfo
    {
        string product_id;
        string product_name;
        unsigned long quantity;
        unsigned long unit_price;
        unsigned long sub_total;
    };

    typedef sequence<SalesRecordInfo> SalesRecordInfoList;


    struct SalesRecord
    {
        SalesRecordInfoList sales_record_list;
        unsigned long sub_total;
    };

    interface ShoppingCart
    {
        SalesRecord list();
        void addProduct(in SalesRecordInfo productWanted);
        void updateProductQty(in string productID,
                              in unsigned long newQty);
        void deleteProduct(in string productID);
        void clear();
    };

    //Component

    interface Cart: ::PetStore::ShoppingCart,
    ::Components::CCMObject
    {
    };

    //Home

    interface CartHomeExplicit: ::Components::CCMHome
    {
    };

    interface CartHomeImplicit: ::Components::KeylessCCMHome 
    {
        ::PetStore::Cart create()
            raises(::Components::CreateFailure);
    };

    interface CartHome:CartHomeExplicit, 
                       CartHomeImplicit
    {
    };


    struct ProductInfo
    {
        string product_id;
        string product_name;
        string product_picture;
        string product_category;
        unsigned long product_price;
        unsigned long product_qty;
        string product_description;
    };


    struct OrderInfo
    {
        string order_id;
        string user_name;
        string user_address;
        string order_time;
        OrderItemInfoList order_items;
        unsigned long sub_total;
    };

    typedef sequence<OrderInfo> OrderInfoList;

    //Event
    valuetype SalesReport :  ::Components::EventBase
    {
        public unsigned long sub_total;

        factory create(in unsigned long sub_total);
    };

    interface SalesReportConsumer :  ::Components::EventConsumerBase
    {
        void push_SalesReportConsumer(in SalesReport event);
    };

    typedef sequence<ProductInfo> ProductInfoList;

    interface BusinessOp
    {
        ProductIndexInfoList listAllProducts();
        ProductIndexInfoList listProductByCategory(in ProductCategory category);
        ProductInfo listProduct(in string productID);
        string placeOrder(in string userName,
                          in string userAddress,
                          in Cart myCart);
        void cancelOrder(in string orderID);
        OrderInfo listOrder(in string orderID);
    };

    interface AdvancedOp
    {
        OrderInfoList listAllOrders();
        void addProduct(in ProductInfo newProduct);
    };

    //Component

    interface Sales: ::Components::CCMObject
    {
        BusinessOp provide_for_client();

        AdvancedOp provide_for_mgr();

        //Uses
        void connect_the_calculate (in ::PetStore::Calculate conn )
            raises (::Components::AlreadyConnected,
                    ::Components::InvalidConnection);
        ::PetStore::Calculate disconnect_the_calculate()
            raises (::Components::NoConnection );
        ::PetStore::Calculate get_connection_the_calculate();

        //Uses
        void connect_product_home (in ::PetStore::ProductHome conn )
            raises (::Components::AlreadyConnected,
                    ::Components::InvalidConnection);
        ::PetStore::ProductHome disconnect_product_home()
            raises (::Components::NoConnection );
        ::PetStore::ProductHome get_connection_product_home();

        //Uses
        void connect_order_home (in ::PetStore::OrderHome conn )
            raises (::Components::AlreadyConnected,
                    ::Components::InvalidConnection);
        ::PetStore::OrderHome disconnect_order_home()
            raises (::Components::NoConnection );
        ::PetStore::OrderHome get_connection_order_home();

        void connect_report( in ::PetStore::SalesReportConsumer consumer)
            raises (::Components::AlreadyConnected);
        ::PetStore::SalesReportConsumer disconnect_report ()
            raises (::Components::NoConnection);

    };

    //Home

    interface SalesHomeExplicit: ::Components::CCMHome
    {
    };

    interface SalesHomeImplicit: ::Components::KeylessCCMHome 
    {
        ::PetStore::Sales create()
            raises(::Components::CreateFailure);
    };

    interface SalesHome:SalesHomeExplicit, 
                        SalesHomeImplicit
    {
    };


    struct OrderRecord
    {
        OrderIndexInfoList order_index_list;
        unsigned long sub_total;
    };

    interface Manage
    {
        void addProduct(in ProductInfo newProduct);
        OrderInfoList listAllOrders();
        OrderRecord account();
    };

    //Component

    interface Manager: ::PetStore::Manage,
    ::Components::CCMObject
    {
        //Uses
        void connect_manage_op (in ::PetStore::AdvancedOp conn )
            raises (::Components::AlreadyConnected,
                    ::Components::InvalidConnection);
        ::PetStore::AdvancedOp disconnect_manage_op()
            raises (::Components::NoConnection );
        ::PetStore::AdvancedOp get_connection_manage_op();

        //Uses
        void connect_price_calculater (in ::PetStore::Calculate conn )
            raises (::Components::AlreadyConnected,
                    ::Components::InvalidConnection);
        ::PetStore::Calculate disconnect_price_calculater()
            raises (::Components::NoConnection );
        ::PetStore::Calculate get_connection_price_calculater();

        ::PetStore::SalesReportConsumer get_consumer_analyse();

    };

    //Home

    interface ManagerHomeExplicit: ::Components::CCMHome
    {
    };

    interface ManagerHomeImplicit: ::Components::KeylessCCMHome 
    {
        ::PetStore::Manager create()
            raises(::Components::CreateFailure);
    };

    interface ManagerHome:ManagerHomeExplicit, 
                          ManagerHomeImplicit
    {
    };

}; // End of module PetStore


#endif
