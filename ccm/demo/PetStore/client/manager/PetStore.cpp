// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.0

#include <OB/CORBAClient.h>
#include <PetStore.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010000L)
#       error ORBacus version mismatch!
#   endif
#endif

namespace PetStore
{

::OB::TypeCodeConst _tc_ItemPriceList(
"01c67a001500000050000000010000001f00000049444c3a50657453746f72652f4974656d507"
"26963654c6973743a312e3000010e0000004974656d50726963654c697374000000130000000c"
"000000010849010500000000000000"
);

::OB::TypeCodeConst _tc_Calculate(
"01c67a000e00000032000000010000001b00000049444c3a50657453746f72652f43616c63756"
"c6174653a312e3000310a00000043616c63756c61746500"
);

::OB::TypeCodeConst _tc_Pricer(
"01c67a000e0000002b00000001184b011800000049444c3a50657453746f72652f50726963657"
"23a312e30000700000050726963657200"
);

::OB::TypeCodeConst _tc_PricerHomeExplicit(
"01c67a000e0000004300000001574b012400000049444c3a50657453746f72652f50726963657"
"2486f6d654578706c696369743a312e300013000000507269636572486f6d654578706c696369"
"7400"
);

::OB::TypeCodeConst _tc_PricerHomeImplicit(
"01c67a000e0000004300000001004b012400000049444c3a50657453746f72652f50726963657"
"2486f6d65496d706c696369743a312e300013000000507269636572486f6d65496d706c696369"
"7400"
);

::OB::TypeCodeConst _tc_PricerHome(
"01c67a000e00000033000000015e4b011c00000049444c3a50657453746f72652f50726963657"
"2486f6d653a312e30000b000000507269636572486f6d6500"
);

::OB::TypeCodeConst _tc_KeyID(
"01c67a001d0000004600000001574b011700000049444c3a50657453746f72652f4b657949443"
"a312e300001060000004b65794944000000000000000100000003000000696400101200000000"
"0000000100"
);

::OB::TypeCodeConst _tc_ProductCategory(
"01c67a00110000006900000001574b012100000049444c3a50657453746f72652f50726f64756"
"37443617465676f72793a312e30005706001000000050726f6475637443617465676f72790004"
"00000004000000444f47000400000043415400050000004649534800c67a00050000004249524"
"400"
);

::OB::TypeCodeConst _tc_Product(
"01c67a000e0000003000000001574b011900000049444c3a50657453746f72652f50726f64756"
"3743a312e30006f72790800000050726f6475637400"
);

::OB::TypeCodeConst _tc_ProductList(
"01c67a00150000008000000001574b011d00000049444c3a50657453746f72652f50726f64756"
"3744c6973743a312e30000000000c00000050726f647563744c69737400130000004000000001"
"df20100e0000003000000001ea12001900000049444c3a50657453746f72652f50726f6475637"
"43a312e30002f4b010800000050726f647563740000000000"
);

::OB::TypeCodeConst _tc_ProductHomeExplicit(
"01c67a000e0000004800000001574b012500000049444c3a50657453746f72652f50726f64756"
"374486f6d654578706c696369743a312e3000726f641400000050726f64756374486f6d654578"
"706c6963697400"
);

::OB::TypeCodeConst _tc_ProductHomeImplicit(
"01c67a000e0000004800000001704b012500000049444c3a50657453746f72652f50726f64756"
"374486f6d65496d706c696369743a312e30000000001400000050726f64756374486f6d65496d"
"706c6963697400"
);

::OB::TypeCodeConst _tc_ProductHome(
"01c67a000e0000003800000001004b011d00000049444c3a50657453746f72652f50726f64756"
"374486f6d653a312e30000000000c00000050726f64756374486f6d6500"
);

::OB::TypeCodeConst _tc_OrderItem(
"01c67a000e0000003200000001574b011b00000049444c3a50657453746f72652f4f726465724"
"974656d3a312e3000000a0000004f726465724974656d00"
);

::OB::TypeCodeConst _tc_OrderItemHomeExplicit(
"01c67a000e0000004a00000001574b012700000049444c3a50657453746f72652f4f726465724"
"974656d486f6d654578706c696369743a312e300000160000004f726465724974656d486f6d65"
"4578706c6963697400"
);

::OB::TypeCodeConst _tc_OrderItemHomeImplicit(
"01c67a000e0000004a00000001574b012700000049444c3a50657453746f72652f4f726465724"
"974656d486f6d65496d706c696369743a312e300000160000004f726465724974656d486f6d65"
"496d706c6963697400"
);

::OB::TypeCodeConst _tc_OrderItemHome(
"01c67a000e0000003a00000001574b011f00000049444c3a50657453746f72652f4f726465724"
"974656d486f6d653a312e3000000e0000004f726465724974656d486f6d6500"
);

::OB::TypeCodeConst _tc_IDSeq(
"01c67a00150000008c00000001574b011700000049444c3a50657453746f72652f49445365713"
"a312e300001060000004944536571000600130000005800000001b920101d0000004600000001"
"df20101700000049444c3a50657453746f72652f4b657949443a312e300000060000004b65794"
"9440000000000000001000000030000006964007f120000000000000001004b0100000000"
);

::OB::TypeCodeConst _tc_OrderOp(
"01c67a000e0000003000000001574b011900000049444c3a50657453746f72652f4f726465724"
"f703a312e3000000000080000004f726465724f7000"
);

::OB::TypeCodeConst _tc_OrderItemInfo(
"01c67a000f000000cc00000001574b011f00000049444c3a50657453746f72652f4f726465724"
"974656d496e666f3a312e3000000e0000004f726465724974656d496e666f002510060000000d"
"0000006f726465724974656d5f69640026211012000000000000000b00000070726f647563745"
"f6964000112000000000000000d00000070726f647563745f6e616d6500594b01120000000000"
"0000090000007175616e7469747900594b01050000000b000000756e69745f707269636500010"
"50000000a0000007375625f746f74616c00eb7705000000"
);

::OB::TypeCodeConst _tc_OrderItemInfoList(
"01c67a00150000002801000001594b012300000049444c3a50657453746f72652f4f726465724"
"974656d496e666f4c6973743a312e300000120000004f726465724974656d496e666f4c697374"
"00201013000000dc00000001ea12000f000000cc000000010000001f00000049444c3a5065745"
"3746f72652f4f726465724974656d496e666f3a312e3000010e0000004f726465724974656d49"
"6e666f000000060000000d0000006f726465724974656d5f696400f0fd7f12000000000000000"
"b00000070726f647563745f6964000012000000000000000d00000070726f647563745f6e616d"
"65000000001200000000000000090000007175616e7469747900cc7a00050000000b000000756"
"e69745f70726963650000050000000a0000007375625f746f74616c00fd7f0500000000000000"
);

::OB::TypeCodeConst _tc_Order(
"01c67a000e0000002a00000001594b011700000049444c3a50657453746f72652f4f726465723"
"a312e30006e060000004f7264657200"
);

::OB::TypeCodeConst _tc_OrderList(
"01c67a00150000007800000001574b011b00000049444c3a50657453746f72652f4f726465724"
"c6973743a312e3000000a0000004f726465724c697374002501130000003c00000001ea12000e"
"0000002a000000011e34001700000049444c3a50657453746f72652f4f726465723a312e30000"
"1060000004f7264657200000000000000"
);

::OB::TypeCodeConst _tc_OrderHomeExplicit(
"01c67a000e0000004200000001574b012300000049444c3a50657453746f72652f4f726465724"
"86f6d654578706c696369743a312e300065120000004f72646572486f6d654578706c69636974"
"00"
);

::OB::TypeCodeConst _tc_OrderHomeImplicit(
"01c67a000e00000042000000015e4b012300000049444c3a50657453746f72652f4f726465724"
"86f6d65496d706c696369743a312e300000120000004f72646572486f6d65496d706c69636974"
"00"
);

::OB::TypeCodeConst _tc_OrderHome(
"01c67a000e0000003200000001704b011b00000049444c3a50657453746f72652f4f726465724"
"86f6d653a312e3000000a0000004f72646572486f6d6500"
);

::OB::TypeCodeConst _tc_SalesRecordInfo(
"01c67a000f000000b400000001574b012100000049444c3a50657453746f72652f53616c65735"
"265636f7264496e666f3a312e30005706001000000053616c65735265636f7264496e666f0005"
"0000000b00000070726f647563745f6964001012000000000000000d00000070726f647563745"
"f6e616d6500424b011200000000000000090000007175616e7469747900594b01050000000b00"
"0000756e69745f70726963650001050000000a0000007375625f746f74616c00250105000000"
);

::OB::TypeCodeConst _tc_SalesRecordInfoList(
"01c67a00150000001401000001594b012500000049444c3a50657453746f72652f53616c65735"
"265636f7264496e666f4c6973743a312e30000000001400000053616c65735265636f7264496e"
"666f4c6973740013000000c4000000012621100f000000b400000001c67a002100000049444c3"
"a50657453746f72652f53616c65735265636f7264496e666f3a312e3000004b01100000005361"
"6c65735265636f7264496e666f00050000000b00000070726f647563745f69640001120000000"
"00000000d00000070726f647563745f6e616d6500c02501120000000000000009000000717561"
"6e7469747900000000050000000b000000756e69745f70726963650000050000000a000000737"
"5625f746f74616c0000000500000000000000"
);

::OB::TypeCodeConst _tc_SalesRecord(
"01c67a000f0000008401000001594b011d00000049444c3a50657453746f72652f53616c65735"
"265636f72643a312e30006973740c00000053616c65735265636f726400020000001200000073"
"616c65735f7265636f72645f6c697374002110150000001401000001c67a002500000049444c3"
"a50657453746f72652f53616c65735265636f7264496e666f4c6973743a312e30000000001400"
"000053616c65735265636f7264496e666f4c6973740013000000c4000000016400010f000000b"
"4000000010000002100000049444c3a50657453746f72652f53616c65735265636f7264496e66"
"6f3a312e30000000001000000053616c65735265636f7264496e666f00050000000b000000707"
"26f647563745f6964000012000000000000000d00000070726f647563745f6e616d6500a37a00"
"1200000000000000090000007175616e7469747900896800050000000b000000756e69745f707"
"26963650000050000000a0000007375625f746f74616c00000005000000000000000a00000073"
"75625f746f74616c00000005000000"
);

::OB::TypeCodeConst _tc_ShoppingCart(
"01c67a000e00000039000000014f4b011e00000049444c3a50657453746f72652f53686f70706"
"96e67436172743a312e300000000d00000053686f7070696e674361727400"
);

::OB::TypeCodeConst _tc_Cart(
"01c67a000e0000002900000001574b011600000049444c3a50657453746f72652f436172743a3"
"12e30004b01050000004361727400"
);

::OB::TypeCodeConst _tc_CartHomeExplicit(
"01c67a000e0000004100000001574b012200000049444c3a50657453746f72652f43617274486"
"f6d654578706c696369743a312e300006001100000043617274486f6d654578706c6963697400"
);

::OB::TypeCodeConst _tc_CartHomeImplicit(
"01c67a000e00000041000000015e4b012200000049444c3a50657453746f72652f43617274486"
"f6d65496d706c696369743a312e300006001100000043617274486f6d65496d706c6963697400"
);

::OB::TypeCodeConst _tc_CartHome(
"01c67a000e0000003100000001704b011a00000049444c3a50657453746f72652f43617274486"
"f6d653a312e300012000900000043617274486f6d6500"
);

::OB::TypeCodeConst _tc_ProductInfo(
"01c67a000f000000f800000001574b011d00000049444c3a50657453746f72652f50726f64756"
"374496e666f3a312e30000000000c00000050726f64756374496e666f00070000000b00000070"
"726f647563745f6964000012000000000000000d00000070726f647563745f6e616d6500a7250"
"112000000000000001000000070726f647563745f706963747572650012000000000000001100"
"000070726f647563745f63617465676f72790000000012000000000000000e00000070726f647"
"563745f7072696365000000050000000c00000070726f647563745f7174790005000000140000"
"0070726f647563745f6465736372697074696f6e001200000000000000"
);

::OB::TypeCodeConst _tc_ProductInfoList(
"01c67a001500000050010000014f4b012100000049444c3a50657453746f72652f50726f64756"
"374496e666f4c6973743a312e30004e06001000000050726f64756374496e666f4c6973740013"
"00000008010000011e34000f000000f8000000014e4b011d00000049444c3a50657453746f726"
"52f50726f64756374496e666f3a312e3000f0fd7f0c00000050726f64756374496e666f000700"
"00000b00000070726f647563745f6964000112000000000000000d00000070726f647563745f6"
"e616d650000000012000000000000001000000070726f647563745f7069637475726500120000"
"00000000001100000070726f647563745f63617465676f727900cc7a0012000000000000000e0"
"0000070726f647563745f7072696365000000050000000c00000070726f647563745f71747900"
"050000001400000070726f647563745f6465736372697074696f6e00120000000000000000000"
"000"
);

::OB::TypeCodeConst _tc_ProductIndexInfo(
"01c67a000f0000009c000000014f4b012200000049444c3a50657453746f72652f50726f64756"
"374496e646578496e666f3a312e300006001100000050726f64756374496e646578496e666f00"
"000000030000000b00000070726f647563745f6964000112000000000000000d00000070726f6"
"47563745f6e616d65006e666f12000000000000001100000070726f647563745f63617465676f"
"7279000000001200000000000000"
);

::OB::TypeCodeConst _tc_ProductIndexInfoList(
"01c67a00150000000001000001594b012600000049444c3a50657453746f72652f50726f64756"
"374496e646578496e666f4c6973743a312e300000001500000050726f64756374496e64657849"
"6e666f4c697374001e340013000000ac00000001594b010f0000009c00000001f0fd7f2200000"
"049444c3a50657453746f72652f50726f64756374496e646578496e666f3a312e300000001100"
"000050726f64756374496e646578496e666f00000000030000000b00000070726f647563745f6"
"964000112000000000000000d00000070726f647563745f6e616d6500eb120012000000000000"
"001100000070726f647563745f63617465676f727900000000120000000000000000000000"
);

::OB::TypeCodeConst _tc_OrderInfo(
"01c67a000f000000f001000001594b011b00000049444c3a50657453746f72652f4f726465724"
"96e666f3a312e3000660a0000004f72646572496e666f00000006000000090000006f72646572"
"5f69640069737412000000000000000a000000757365725f6e616d65000000120000000000000"
"00d000000757365725f616464726573730075637412000000000000000b0000006f726465725f"
"74696d65006412000000000000000c0000006f726465725f6974656d730015000000280100000"
"16400012300000049444c3a50657453746f72652f4f726465724974656d496e666f4c6973743a"
"312e300000120000004f726465724974656d496e666f4c69737400000013000000dc00000001f"
"0fd7f0f000000cc000000010000001f00000049444c3a50657453746f72652f4f726465724974"
"656d496e666f3a312e3000000e0000004f726465724974656d496e666f000000060000000d000"
"0006f726465724974656d5f69640000000012000000000000000b00000070726f647563745f69"
"64000012000000000000000d00000070726f647563745f6e616d6500a37a00120000000000000"
"0090000007175616e7469747900000000050000000b000000756e69745f707269636500010500"
"00000a0000007375625f746f74616c00250105000000000000000a0000007375625f746f74616"
"c00250105000000"
);

::OB::TypeCodeConst _tc_OrderInfoList(
"01c67a001500000044020000014f4b011f00000049444c3a50657453746f72652f4f726465724"
"96e666f4c6973743a312e3000000e0000004f72646572496e666f4c6973740025101300000000"
"020000010000000f000000f0010000012621101b00000049444c3a50657453746f72652f4f726"
"46572496e666f3a312e3000000a0000004f72646572496e666f004b0106000000090000006f72"
"6465725f69640013eb7712000000000000000a000000757365725f6e616d65002501120000000"
"00000000d000000757365725f6164647265737300c0250112000000000000000b0000006f7264"
"65725f74696d65000012000000000000000c0000006f726465725f6974656d730015000000280"
"10000019be8772300000049444c3a50657453746f72652f4f726465724974656d496e666f4c69"
"73743a312e300077120000004f726465724974656d496e666f4c69737400000013000000dc000"
"00001c67a000f000000cc000000010000001f00000049444c3a50657453746f72652f4f726465"
"724974656d496e666f3a312e3000000e0000004f726465724974656d496e666f0012000600000"
"00d0000006f726465724974656d5f696400c67a0012000000000000000b00000070726f647563"
"745f6964000012000000000000000d00000070726f647563745f6e616d6500590600120000000"
"0000000090000007175616e7469747900df2010050000000b000000756e69745f707269636500"
"01050000000a0000007375625f746f74616c004b0105000000000000000a0000007375625f746"
"f74616c0025010500000000000000"
);

::OB::TypeCodeConst _tc_SalesReport(
"01c67a001d0000005a000000014f4b011d00000049444c3a50657453746f72652f53616c65735"
"265706f72743a312e30003000000c00000053616c65735265706f727400000025100000000001"
"0000000a0000007375625f746f74616c002110050000000100"
);

::OB::TypeCodeConst _tc_SalesReportConsumer(
"01c67a000e0000004800000001574b012500000049444c3a50657453746f72652f53616c65735"
"265706f7274436f6e73756d65723a312e30000000001400000053616c65735265706f7274436f"
"6e73756d657200"
);

::OB::TypeCodeConst _tc_BusinessOp(
"01c67a000e00000033000000015e4b011c00000049444c3a50657453746f72652f427573696e6"
"573734f703a312e30000b000000427573696e6573734f7000"
);

::OB::TypeCodeConst _tc_AdvancedOp(
"01c67a000e0000003300000001574b011c00000049444c3a50657453746f72652f416476616e6"
"365644f703a312e30000b000000416476616e6365644f7000"
);

::OB::TypeCodeConst _tc_Sales(
"01c67a000e0000002a00000001574b011700000049444c3a50657453746f72652f53616c65733"
"a312e3000010600000053616c657300"
);

::OB::TypeCodeConst _tc_SalesHomeExplicit(
"01c67a000e0000004200000001574b012300000049444c3a50657453746f72652f53616c65734"
"86f6d654578706c696369743a312e3000001200000053616c6573486f6d654578706c69636974"
"00"
);

::OB::TypeCodeConst _tc_SalesHomeImplicit(
"01c67a000e0000004200000001704b012300000049444c3a50657453746f72652f53616c65734"
"86f6d65496d706c696369743a312e3000001200000053616c6573486f6d65496d706c69636974"
"00"
);

::OB::TypeCodeConst _tc_SalesHome(
"01c67a000e0000003200000001004b011b00000049444c3a50657453746f72652f53616c65734"
"86f6d653a312e3000000a00000053616c6573486f6d6500"
);

::OB::TypeCodeConst _tc_OrderIndexInfo(
"01c67a000f0000006c00000001574b012000000049444c3a50657453746f72652f4f726465724"
"96e646578496e666f3a312e30000f0000004f72646572496e646578496e666f00100200000009"
"0000006f726465725f696400ea120012000000000000000a0000007375625f746f74616c00250"
"105000000"
);

::OB::TypeCodeConst _tc_OrderIndexInfoList(
"01c67a0015000000c800000001594b012400000049444c3a50657453746f72652f4f726465724"
"96e646578496e666f4c6973743a312e3000130000004f72646572496e646578496e666f4c6973"
"740010130000007c00000001ea12000f0000006c000000010000002000000049444c3a5065745"
"3746f72652f4f72646572496e646578496e666f3a312e30000f0000004f72646572496e646578"
"496e666f000002000000090000006f726465725f696400c67a0012000000000000000a0000007"
"375625f746f74616c0012000500000000000000"
);

::OB::TypeCodeConst _tc_OrderRecord(
"01c67a000f0000003801000001594b011d00000049444c3a50657453746f72652f4f726465725"
"265636f72643a312e300073743a0c0000004f726465725265636f72640002000000110000006f"
"726465725f696e6465785f6c6973740000000015000000c8000000010000002400000049444c3"
"a50657453746f72652f4f72646572496e646578496e666f4c6973743a312e3000130000004f72"
"646572496e646578496e666f4c6973740065130000007c000000010000000f0000006c0000000"
"175625f2000000049444c3a50657453746f72652f4f72646572496e646578496e666f3a312e30"
"000f0000004f72646572496e646578496e666f000002000000090000006f726465725f696400f"
"0fd7f12000000000000000a0000007375625f746f74616c007a0005000000000000000a000000"
"7375625f746f74616c00000005000000"
);

::OB::TypeCodeConst _tc_Manage(
"01c67a000e0000002b000000014f4b011800000049444c3a50657453746f72652f4d616e61676"
"53a312e3000070000004d616e61676500"
);

::OB::TypeCodeConst _tc_Manager(
"01c67a000e0000003000000001574b011900000049444c3a50657453746f72652f4d616e61676"
"5723a312e3000ea1200080000004d616e6167657200"
);

::OB::TypeCodeConst _tc_ManagerHomeExplicit(
"01c67a000e0000004800000001574b012500000049444c3a50657453746f72652f4d616e61676"
"572486f6d654578706c696369743a312e3000000000140000004d616e61676572486f6d654578"
"706c6963697400"
);

::OB::TypeCodeConst _tc_ManagerHomeImplicit(
"01c67a000e0000004800000001704b012500000049444c3a50657453746f72652f4d616e61676"
"572486f6d65496d706c696369743a312e3000000000140000004d616e61676572486f6d65496d"
"706c6963697400"
);

::OB::TypeCodeConst _tc_ManagerHome(
"01c67a000e0000003800000001004b011d00000049444c3a50657453746f72652f4d616e61676"
"572486f6d653a312e30000000000c0000004d616e61676572486f6d6500"
);

} // End of namespace PetStore

//
// IDL:PetStore/ItemPriceList:1.0
//
void
PetStore::OBInfo_ItemPriceList::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const ::PetStore::ItemPriceList& _ob_seq = *(const ::PetStore::ItemPriceList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    _ob_out -> write_ulong_array(_ob_seq.get_buffer(), _ob_len0);
}

void
PetStore::OBInfo_ItemPriceList::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    ::PetStore::ItemPriceList& _ob_seq = *(::PetStore::ItemPriceList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    _ob_in -> read_ulong_array(_ob_seq.get_buffer(), _ob_len0);
}

void
operator<<=(CORBA::Any& any, PetStore::ItemPriceList* v)
{
    static const PetStore::OBInfo_ItemPriceList info;
    any.replace(PetStore::_tc_ItemPriceList, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PetStore::ItemPriceList& v)
{
    any <<= new PetStore::ItemPriceList(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PetStore::ItemPriceList*& v)
{
    if(any.check_type(PetStore::_tc_ItemPriceList))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PetStore::ItemPriceList* val = new PetStore::ItemPriceList;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            _ob_in -> read_ulong_array((*val).get_buffer(), _ob_len0);
            (CORBA::Any&)any <<= val;
        }

        v = (PetStore::ItemPriceList*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/Calculate:1.0
//
const char* PetStore::Calculate::ids_[] =
{
    "IDL:PetStore/Calculate:1.0",
    0
};

void
OBDuplicate(PetStore::Calculate_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::Calculate_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::Calculate_ptr
PetStore::Calculate::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Calculate_ptr v = dynamic_cast<Calculate_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::Calculate* val = new OBProxy_PetStore::Calculate;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::Calculate_ptr
PetStore::Calculate::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Calculate_ptr v = dynamic_cast<Calculate_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::Calculate_ptr
PetStore::Calculate::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Calculate_ptr v = dynamic_cast<Calculate_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::Calculate* val = new OBProxy_PetStore::Calculate;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::Calculate_ptr
PetStore::Calculate::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::Calculate::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::Calculate_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::Calculate_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::Calculate_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::Calculate* _ob_obj = new OBProxy_PetStore::Calculate;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::Calculate::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::Calculate_ptr* v)
{
    any.replace(PetStore::_tc_Calculate, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::Calculate_ptr v)
{
    PetStore::Calculate_ptr val = PetStore::Calculate::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::Calculate_ptr& v)
{
    if(any.check_type(PetStore::_tc_Calculate))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::Calculate_ptr>(val)))
            {
                OBProxy_PetStore::Calculate* obj = new OBProxy_PetStore::Calculate;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::Calculate::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/Pricer:1.0
//
const char* PetStore::Pricer::ids_[] =
{
    "IDL:PetStore/Pricer:1.0",
    "IDL:PetStore/Calculate:1.0",
    "IDL:omg.org/Components/Navigation:1.0",
    "IDL:omg.org/Components/Receptacles:1.0",
    "IDL:omg.org/Components/Events:1.0",
    "IDL:omg.org/Components/CCMObject:1.0",
    0
};

void
OBDuplicate(PetStore::Pricer_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::Pricer_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::Pricer_ptr
PetStore::Pricer::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Pricer_ptr v = dynamic_cast<Pricer_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::Pricer* val = new OBProxy_PetStore::Pricer;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::Pricer_ptr
PetStore::Pricer::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Pricer_ptr v = dynamic_cast<Pricer_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::Pricer_ptr
PetStore::Pricer::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Pricer_ptr v = dynamic_cast<Pricer_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::Pricer* val = new OBProxy_PetStore::Pricer;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::Pricer_ptr
PetStore::Pricer::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::Pricer::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::Pricer_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::Pricer_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::Pricer_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::Pricer* _ob_obj = new OBProxy_PetStore::Pricer;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::Pricer::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::Pricer_ptr* v)
{
    any.replace(PetStore::_tc_Pricer, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::Pricer_ptr v)
{
    PetStore::Pricer_ptr val = PetStore::Pricer::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::Pricer_ptr& v)
{
    if(any.check_type(PetStore::_tc_Pricer))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::Pricer_ptr>(val)))
            {
                OBProxy_PetStore::Pricer* obj = new OBProxy_PetStore::Pricer;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::Pricer::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/PricerHomeExplicit:1.0
//
const char* PetStore::PricerHomeExplicit::ids_[] =
{
    "IDL:PetStore/PricerHomeExplicit:1.0",
    "IDL:omg.org/Components/CCMHome:1.0",
    0
};

void
OBDuplicate(PetStore::PricerHomeExplicit_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::PricerHomeExplicit_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::PricerHomeExplicit_ptr
PetStore::PricerHomeExplicit::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        PricerHomeExplicit_ptr v = dynamic_cast<PricerHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::PricerHomeExplicit* val = new OBProxy_PetStore::PricerHomeExplicit;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::PricerHomeExplicit_ptr
PetStore::PricerHomeExplicit::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        PricerHomeExplicit_ptr v = dynamic_cast<PricerHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::PricerHomeExplicit_ptr
PetStore::PricerHomeExplicit::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        PricerHomeExplicit_ptr v = dynamic_cast<PricerHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::PricerHomeExplicit* val = new OBProxy_PetStore::PricerHomeExplicit;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::PricerHomeExplicit_ptr
PetStore::PricerHomeExplicit::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::PricerHomeExplicit::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::PricerHomeExplicit_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::PricerHomeExplicit_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::PricerHomeExplicit_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::PricerHomeExplicit* _ob_obj = new OBProxy_PetStore::PricerHomeExplicit;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::PricerHomeExplicit::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::PricerHomeExplicit_ptr* v)
{
    any.replace(PetStore::_tc_PricerHomeExplicit, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::PricerHomeExplicit_ptr v)
{
    PetStore::PricerHomeExplicit_ptr val = PetStore::PricerHomeExplicit::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::PricerHomeExplicit_ptr& v)
{
    if(any.check_type(PetStore::_tc_PricerHomeExplicit))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::PricerHomeExplicit_ptr>(val)))
            {
                OBProxy_PetStore::PricerHomeExplicit* obj = new OBProxy_PetStore::PricerHomeExplicit;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::PricerHomeExplicit::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/PricerHomeImplicit:1.0
//
const char* PetStore::PricerHomeImplicit::ids_[] =
{
    "IDL:PetStore/PricerHomeImplicit:1.0",
    "IDL:omg.org/Components/KeylessCCMHome:1.0",
    0
};

void
OBDuplicate(PetStore::PricerHomeImplicit_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::PricerHomeImplicit_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::PricerHomeImplicit_ptr
PetStore::PricerHomeImplicit::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        PricerHomeImplicit_ptr v = dynamic_cast<PricerHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::PricerHomeImplicit* val = new OBProxy_PetStore::PricerHomeImplicit;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::PricerHomeImplicit_ptr
PetStore::PricerHomeImplicit::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        PricerHomeImplicit_ptr v = dynamic_cast<PricerHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::PricerHomeImplicit_ptr
PetStore::PricerHomeImplicit::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        PricerHomeImplicit_ptr v = dynamic_cast<PricerHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::PricerHomeImplicit* val = new OBProxy_PetStore::PricerHomeImplicit;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::PricerHomeImplicit_ptr
PetStore::PricerHomeImplicit::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::PricerHomeImplicit::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::PricerHomeImplicit_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::PricerHomeImplicit_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::PricerHomeImplicit_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::PricerHomeImplicit* _ob_obj = new OBProxy_PetStore::PricerHomeImplicit;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::PricerHomeImplicit::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::PricerHomeImplicit_ptr* v)
{
    any.replace(PetStore::_tc_PricerHomeImplicit, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::PricerHomeImplicit_ptr v)
{
    PetStore::PricerHomeImplicit_ptr val = PetStore::PricerHomeImplicit::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::PricerHomeImplicit_ptr& v)
{
    if(any.check_type(PetStore::_tc_PricerHomeImplicit))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::PricerHomeImplicit_ptr>(val)))
            {
                OBProxy_PetStore::PricerHomeImplicit* obj = new OBProxy_PetStore::PricerHomeImplicit;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::PricerHomeImplicit::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/PricerHome:1.0
//
const char* PetStore::PricerHome::ids_[] =
{
    "IDL:PetStore/PricerHome:1.0",
    "IDL:omg.org/Components/CCMHome:1.0",
    "IDL:PetStore/PricerHomeExplicit:1.0",
    "IDL:omg.org/Components/KeylessCCMHome:1.0",
    "IDL:PetStore/PricerHomeImplicit:1.0",
    0
};

void
OBDuplicate(PetStore::PricerHome_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::PricerHome_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::PricerHome_ptr
PetStore::PricerHome::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        PricerHome_ptr v = dynamic_cast<PricerHome_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::PricerHome* val = new OBProxy_PetStore::PricerHome;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::PricerHome_ptr
PetStore::PricerHome::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        PricerHome_ptr v = dynamic_cast<PricerHome_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::PricerHome_ptr
PetStore::PricerHome::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        PricerHome_ptr v = dynamic_cast<PricerHome_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::PricerHome* val = new OBProxy_PetStore::PricerHome;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::PricerHome_ptr
PetStore::PricerHome::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::PricerHome::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::PricerHome_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::PricerHome_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::PricerHome_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::PricerHome* _ob_obj = new OBProxy_PetStore::PricerHome;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::PricerHome::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::PricerHome_ptr* v)
{
    any.replace(PetStore::_tc_PricerHome, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::PricerHome_ptr v)
{
    PetStore::PricerHome_ptr val = PetStore::PricerHome::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::PricerHome_ptr& v)
{
    if(any.check_type(PetStore::_tc_PricerHome))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::PricerHome_ptr>(val)))
            {
                OBProxy_PetStore::PricerHome* obj = new OBProxy_PetStore::PricerHome;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::PricerHome::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/KeyID:1.0
//
const char* PetStore::KeyID::_ob_id_ = "IDL:PetStore/KeyID:1.0";

void
OBDuplicate(PetStore::KeyID* p)
{
    CORBA::add_ref(p);
}

void
OBRelease(PetStore::KeyID* p)
{
    CORBA::remove_ref(p);
}

PetStore::KeyID*
PetStore::KeyID::_downcast(CORBA::ValueBase* p)
{
    return dynamic_cast<KeyID*>(p);
}

PetStore::KeyID*
PetStore::KeyID::_downcast(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::ValueBase_var v = p -> _to_value();
        return _downcast(v);
    }
    return 0;
}

const char*
PetStore::KeyID::_OB_typeId() const
{
    return _ob_id_;
}

const char*
PetStore::KeyID::_OB_id()
{
    return _ob_id_;
}

void
PetStore::KeyID::_OB_marshal(OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_string(id());
}

void
PetStore::KeyID::_OB_unmarshal(OB::InputStreamImpl* _ob_in)
{
    OB::StrForStruct _ob_m0;
    _ob_m0 = _ob_in -> read_string();
    id(_ob_m0);
}

void
OBMarshal(PetStore::KeyID* v, OB::OutputStreamImpl* out)
{
    out -> write_value(v, PetStore::KeyID::_OB_id());
}

void
OBUnmarshal(PetStore::KeyID*& v, OB::InputStreamImpl* in)
{
    CORBA::ValueBase* vb = in -> read_value(PetStore::KeyID::_OB_id());
    v = PetStore::KeyID::_downcast(vb);
}

void
operator<<=(CORBA::Any& any, PetStore::KeyID** v)
{
    static OB::ValueBaseInfo info;
    any.replace(PetStore::_tc_KeyID, (CORBA::ValueBase*)*v, true, &info);
}

void
operator<<=(CORBA::Any& any, PetStore::KeyID* v)
{
    CORBA::add_ref(v);
    any <<= &v;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::KeyID*& v)
{
    if(any.check_type(PetStore::_tc_KeyID))
    {
        CORBA::ValueBase_var vb;
        if(any >>= CORBA::Any::to_value(vb.out()))
        {
            PetStore::KeyID* val = 0;

            if(vb.in() != 0)
            {
                val = PetStore::KeyID::_downcast(vb);
                if(val == 0)
                    return false;
                if(!any.info())
                    (CORBA::Any&)any <<= val;
            }

            v = val;
            return true;
        }
    }

    return false;
}

CORBA::ValueBase*
PetStore::KeyID_init::create_for_unmarshal()
{
    return new ::OBV_PetStore::KeyID;
}

PetStore::KeyID_init*
PetStore::KeyID_init::_downcast(CORBA::ValueFactory f)
{
    return dynamic_cast<KeyID_init*>(f);
}

//
// IDL:PetStore/ProductCategory:1.0
//
void
operator<<=(CORBA::Any& any, PetStore::ProductCategory v)
{
    any.replace(PetStore::_tc_ProductCategory, new CORBA::ULong((CORBA::ULong)v), true);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::ProductCategory& v)
{
    if(any.check_type(PetStore::_tc_ProductCategory))
    {
        v = (PetStore::ProductCategory)(*(CORBA::ULong*)any.value());
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/Product:1.0
//
const char* PetStore::Product::ids_[] =
{
    "IDL:PetStore/Product:1.0",
    "IDL:omg.org/Components/Navigation:1.0",
    "IDL:omg.org/Components/Receptacles:1.0",
    "IDL:omg.org/Components/Events:1.0",
    "IDL:omg.org/Components/CCMObject:1.0",
    0
};

void
OBDuplicate(PetStore::Product_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::Product_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::Product_ptr
PetStore::Product::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Product_ptr v = dynamic_cast<Product_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::Product* val = new OBProxy_PetStore::Product;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::Product_ptr
PetStore::Product::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Product_ptr v = dynamic_cast<Product_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::Product_ptr
PetStore::Product::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Product_ptr v = dynamic_cast<Product_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::Product* val = new OBProxy_PetStore::Product;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::Product_ptr
PetStore::Product::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::Product::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::Product_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::Product_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::Product_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::Product* _ob_obj = new OBProxy_PetStore::Product;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::Product::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::Product_ptr* v)
{
    any.replace(PetStore::_tc_Product, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::Product_ptr v)
{
    PetStore::Product_ptr val = PetStore::Product::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::Product_ptr& v)
{
    if(any.check_type(PetStore::_tc_Product))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::Product_ptr>(val)))
            {
                OBProxy_PetStore::Product* obj = new OBProxy_PetStore::Product;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::Product::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/ProductList:1.0
//
void
PetStore::OBInfo_ProductList::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const ::PetStore::ProductList& _ob_seq = *(const ::PetStore::ProductList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    ::PetStore::Product_ptr const * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        OBMarshal(_ob_buf0[_ob_i0], _ob_out);
    }
}

void
PetStore::OBInfo_ProductList::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    ::PetStore::ProductList& _ob_seq = *(::PetStore::ProductList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    ::PetStore::Product_ptr * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        OBUnmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
}

void
operator<<=(CORBA::Any& any, PetStore::ProductList* v)
{
    static const PetStore::OBInfo_ProductList info;
    any.replace(PetStore::_tc_ProductList, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PetStore::ProductList& v)
{
    any <<= new PetStore::ProductList(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PetStore::ProductList*& v)
{
    if(any.check_type(PetStore::_tc_ProductList))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PetStore::ProductList* val = new PetStore::ProductList;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            ::PetStore::Product_ptr * _ob_buf0 = (*val).get_buffer();
            for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
            {
                OBUnmarshal(_ob_buf0[_ob_i0], _ob_in);
            }
            (CORBA::Any&)any <<= val;
        }

        v = (PetStore::ProductList*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/ProductHomeExplicit:1.0
//
const char* PetStore::ProductHomeExplicit::ids_[] =
{
    "IDL:PetStore/ProductHomeExplicit:1.0",
    "IDL:omg.org/Components/CCMHome:1.0",
    0
};

void
OBDuplicate(PetStore::ProductHomeExplicit_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::ProductHomeExplicit_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::ProductHomeExplicit_ptr
PetStore::ProductHomeExplicit::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ProductHomeExplicit_ptr v = dynamic_cast<ProductHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::ProductHomeExplicit* val = new OBProxy_PetStore::ProductHomeExplicit;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::ProductHomeExplicit_ptr
PetStore::ProductHomeExplicit::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ProductHomeExplicit_ptr v = dynamic_cast<ProductHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::ProductHomeExplicit_ptr
PetStore::ProductHomeExplicit::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ProductHomeExplicit_ptr v = dynamic_cast<ProductHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::ProductHomeExplicit* val = new OBProxy_PetStore::ProductHomeExplicit;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::ProductHomeExplicit_ptr
PetStore::ProductHomeExplicit::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::ProductHomeExplicit::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::ProductHomeExplicit_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::ProductHomeExplicit_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::ProductHomeExplicit_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::ProductHomeExplicit* _ob_obj = new OBProxy_PetStore::ProductHomeExplicit;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::ProductHomeExplicit::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::ProductHomeExplicit_ptr* v)
{
    any.replace(PetStore::_tc_ProductHomeExplicit, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::ProductHomeExplicit_ptr v)
{
    PetStore::ProductHomeExplicit_ptr val = PetStore::ProductHomeExplicit::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::ProductHomeExplicit_ptr& v)
{
    if(any.check_type(PetStore::_tc_ProductHomeExplicit))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::ProductHomeExplicit_ptr>(val)))
            {
                OBProxy_PetStore::ProductHomeExplicit* obj = new OBProxy_PetStore::ProductHomeExplicit;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::ProductHomeExplicit::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/ProductHomeImplicit:1.0
//
const char* PetStore::ProductHomeImplicit::ids_[] =
{
    "IDL:PetStore/ProductHomeImplicit:1.0",
    0
};

void
OBDuplicate(PetStore::ProductHomeImplicit_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::ProductHomeImplicit_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::ProductHomeImplicit_ptr
PetStore::ProductHomeImplicit::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ProductHomeImplicit_ptr v = dynamic_cast<ProductHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::ProductHomeImplicit* val = new OBProxy_PetStore::ProductHomeImplicit;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::ProductHomeImplicit_ptr
PetStore::ProductHomeImplicit::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ProductHomeImplicit_ptr v = dynamic_cast<ProductHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::ProductHomeImplicit_ptr
PetStore::ProductHomeImplicit::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ProductHomeImplicit_ptr v = dynamic_cast<ProductHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::ProductHomeImplicit* val = new OBProxy_PetStore::ProductHomeImplicit;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::ProductHomeImplicit_ptr
PetStore::ProductHomeImplicit::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::ProductHomeImplicit::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::ProductHomeImplicit_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::ProductHomeImplicit_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::ProductHomeImplicit_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::ProductHomeImplicit* _ob_obj = new OBProxy_PetStore::ProductHomeImplicit;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::ProductHomeImplicit::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::ProductHomeImplicit_ptr* v)
{
    any.replace(PetStore::_tc_ProductHomeImplicit, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::ProductHomeImplicit_ptr v)
{
    PetStore::ProductHomeImplicit_ptr val = PetStore::ProductHomeImplicit::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::ProductHomeImplicit_ptr& v)
{
    if(any.check_type(PetStore::_tc_ProductHomeImplicit))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::ProductHomeImplicit_ptr>(val)))
            {
                OBProxy_PetStore::ProductHomeImplicit* obj = new OBProxy_PetStore::ProductHomeImplicit;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::ProductHomeImplicit::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/ProductHome:1.0
//
const char* PetStore::ProductHome::ids_[] =
{
    "IDL:PetStore/ProductHome:1.0",
    "IDL:omg.org/Components/CCMHome:1.0",
    "IDL:PetStore/ProductHomeExplicit:1.0",
    "IDL:PetStore/ProductHomeImplicit:1.0",
    0
};

void
OBDuplicate(PetStore::ProductHome_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::ProductHome_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::ProductHome_ptr
PetStore::ProductHome::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ProductHome_ptr v = dynamic_cast<ProductHome_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::ProductHome* val = new OBProxy_PetStore::ProductHome;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::ProductHome_ptr
PetStore::ProductHome::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ProductHome_ptr v = dynamic_cast<ProductHome_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::ProductHome_ptr
PetStore::ProductHome::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ProductHome_ptr v = dynamic_cast<ProductHome_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::ProductHome* val = new OBProxy_PetStore::ProductHome;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::ProductHome_ptr
PetStore::ProductHome::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::ProductHome::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::ProductHome_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::ProductHome_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::ProductHome_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::ProductHome* _ob_obj = new OBProxy_PetStore::ProductHome;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::ProductHome::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::ProductHome_ptr* v)
{
    any.replace(PetStore::_tc_ProductHome, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::ProductHome_ptr v)
{
    PetStore::ProductHome_ptr val = PetStore::ProductHome::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::ProductHome_ptr& v)
{
    if(any.check_type(PetStore::_tc_ProductHome))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::ProductHome_ptr>(val)))
            {
                OBProxy_PetStore::ProductHome* obj = new OBProxy_PetStore::ProductHome;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::ProductHome::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/OrderItem:1.0
//
const char* PetStore::OrderItem::ids_[] =
{
    "IDL:PetStore/OrderItem:1.0",
    "IDL:omg.org/Components/Navigation:1.0",
    "IDL:omg.org/Components/Receptacles:1.0",
    "IDL:omg.org/Components/Events:1.0",
    "IDL:omg.org/Components/CCMObject:1.0",
    0
};

void
OBDuplicate(PetStore::OrderItem_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::OrderItem_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::OrderItem_ptr
PetStore::OrderItem::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderItem_ptr v = dynamic_cast<OrderItem_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::OrderItem* val = new OBProxy_PetStore::OrderItem;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::OrderItem_ptr
PetStore::OrderItem::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderItem_ptr v = dynamic_cast<OrderItem_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::OrderItem_ptr
PetStore::OrderItem::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderItem_ptr v = dynamic_cast<OrderItem_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::OrderItem* val = new OBProxy_PetStore::OrderItem;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::OrderItem_ptr
PetStore::OrderItem::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::OrderItem::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::OrderItem_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::OrderItem_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::OrderItem_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::OrderItem* _ob_obj = new OBProxy_PetStore::OrderItem;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::OrderItem::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::OrderItem_ptr* v)
{
    any.replace(PetStore::_tc_OrderItem, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::OrderItem_ptr v)
{
    PetStore::OrderItem_ptr val = PetStore::OrderItem::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::OrderItem_ptr& v)
{
    if(any.check_type(PetStore::_tc_OrderItem))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::OrderItem_ptr>(val)))
            {
                OBProxy_PetStore::OrderItem* obj = new OBProxy_PetStore::OrderItem;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::OrderItem::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/OrderItemHomeExplicit:1.0
//
const char* PetStore::OrderItemHomeExplicit::ids_[] =
{
    "IDL:PetStore/OrderItemHomeExplicit:1.0",
    "IDL:omg.org/Components/CCMHome:1.0",
    0
};

void
OBDuplicate(PetStore::OrderItemHomeExplicit_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::OrderItemHomeExplicit_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::OrderItemHomeExplicit_ptr
PetStore::OrderItemHomeExplicit::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderItemHomeExplicit_ptr v = dynamic_cast<OrderItemHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::OrderItemHomeExplicit* val = new OBProxy_PetStore::OrderItemHomeExplicit;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::OrderItemHomeExplicit_ptr
PetStore::OrderItemHomeExplicit::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderItemHomeExplicit_ptr v = dynamic_cast<OrderItemHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::OrderItemHomeExplicit_ptr
PetStore::OrderItemHomeExplicit::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderItemHomeExplicit_ptr v = dynamic_cast<OrderItemHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::OrderItemHomeExplicit* val = new OBProxy_PetStore::OrderItemHomeExplicit;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::OrderItemHomeExplicit_ptr
PetStore::OrderItemHomeExplicit::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::OrderItemHomeExplicit::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::OrderItemHomeExplicit_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::OrderItemHomeExplicit_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::OrderItemHomeExplicit_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::OrderItemHomeExplicit* _ob_obj = new OBProxy_PetStore::OrderItemHomeExplicit;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::OrderItemHomeExplicit::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::OrderItemHomeExplicit_ptr* v)
{
    any.replace(PetStore::_tc_OrderItemHomeExplicit, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::OrderItemHomeExplicit_ptr v)
{
    PetStore::OrderItemHomeExplicit_ptr val = PetStore::OrderItemHomeExplicit::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::OrderItemHomeExplicit_ptr& v)
{
    if(any.check_type(PetStore::_tc_OrderItemHomeExplicit))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::OrderItemHomeExplicit_ptr>(val)))
            {
                OBProxy_PetStore::OrderItemHomeExplicit* obj = new OBProxy_PetStore::OrderItemHomeExplicit;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::OrderItemHomeExplicit::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/OrderItemHomeImplicit:1.0
//
const char* PetStore::OrderItemHomeImplicit::ids_[] =
{
    "IDL:PetStore/OrderItemHomeImplicit:1.0",
    0
};

void
OBDuplicate(PetStore::OrderItemHomeImplicit_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::OrderItemHomeImplicit_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::OrderItemHomeImplicit_ptr
PetStore::OrderItemHomeImplicit::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderItemHomeImplicit_ptr v = dynamic_cast<OrderItemHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::OrderItemHomeImplicit* val = new OBProxy_PetStore::OrderItemHomeImplicit;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::OrderItemHomeImplicit_ptr
PetStore::OrderItemHomeImplicit::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderItemHomeImplicit_ptr v = dynamic_cast<OrderItemHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::OrderItemHomeImplicit_ptr
PetStore::OrderItemHomeImplicit::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderItemHomeImplicit_ptr v = dynamic_cast<OrderItemHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::OrderItemHomeImplicit* val = new OBProxy_PetStore::OrderItemHomeImplicit;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::OrderItemHomeImplicit_ptr
PetStore::OrderItemHomeImplicit::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::OrderItemHomeImplicit::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::OrderItemHomeImplicit_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::OrderItemHomeImplicit_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::OrderItemHomeImplicit_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::OrderItemHomeImplicit* _ob_obj = new OBProxy_PetStore::OrderItemHomeImplicit;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::OrderItemHomeImplicit::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::OrderItemHomeImplicit_ptr* v)
{
    any.replace(PetStore::_tc_OrderItemHomeImplicit, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::OrderItemHomeImplicit_ptr v)
{
    PetStore::OrderItemHomeImplicit_ptr val = PetStore::OrderItemHomeImplicit::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::OrderItemHomeImplicit_ptr& v)
{
    if(any.check_type(PetStore::_tc_OrderItemHomeImplicit))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::OrderItemHomeImplicit_ptr>(val)))
            {
                OBProxy_PetStore::OrderItemHomeImplicit* obj = new OBProxy_PetStore::OrderItemHomeImplicit;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::OrderItemHomeImplicit::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/OrderItemHome:1.0
//
const char* PetStore::OrderItemHome::ids_[] =
{
    "IDL:PetStore/OrderItemHome:1.0",
    "IDL:omg.org/Components/CCMHome:1.0",
    "IDL:PetStore/OrderItemHomeExplicit:1.0",
    "IDL:PetStore/OrderItemHomeImplicit:1.0",
    0
};

void
OBDuplicate(PetStore::OrderItemHome_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::OrderItemHome_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::OrderItemHome_ptr
PetStore::OrderItemHome::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderItemHome_ptr v = dynamic_cast<OrderItemHome_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::OrderItemHome* val = new OBProxy_PetStore::OrderItemHome;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::OrderItemHome_ptr
PetStore::OrderItemHome::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderItemHome_ptr v = dynamic_cast<OrderItemHome_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::OrderItemHome_ptr
PetStore::OrderItemHome::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderItemHome_ptr v = dynamic_cast<OrderItemHome_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::OrderItemHome* val = new OBProxy_PetStore::OrderItemHome;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::OrderItemHome_ptr
PetStore::OrderItemHome::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::OrderItemHome::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::OrderItemHome_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::OrderItemHome_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::OrderItemHome_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::OrderItemHome* _ob_obj = new OBProxy_PetStore::OrderItemHome;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::OrderItemHome::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::OrderItemHome_ptr* v)
{
    any.replace(PetStore::_tc_OrderItemHome, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::OrderItemHome_ptr v)
{
    PetStore::OrderItemHome_ptr val = PetStore::OrderItemHome::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::OrderItemHome_ptr& v)
{
    if(any.check_type(PetStore::_tc_OrderItemHome))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::OrderItemHome_ptr>(val)))
            {
                OBProxy_PetStore::OrderItemHome* obj = new OBProxy_PetStore::OrderItemHome;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::OrderItemHome::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/IDSeq:1.0
//
void
PetStore::OBInfo_IDSeq::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const ::PetStore::IDSeq& _ob_seq = *(const ::PetStore::IDSeq*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    ::PetStore::KeyID* const * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        OBMarshal(_ob_buf0[_ob_i0], _ob_out);
    }
}

void
PetStore::OBInfo_IDSeq::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    ::PetStore::IDSeq& _ob_seq = *(::PetStore::IDSeq*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    ::PetStore::KeyID* * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        CORBA::remove_ref(_ob_buf0[_ob_i0]);
        OBUnmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
}

void
operator<<=(CORBA::Any& any, PetStore::IDSeq* v)
{
    static const PetStore::OBInfo_IDSeq info;
    any.replace(PetStore::_tc_IDSeq, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PetStore::IDSeq& v)
{
    any <<= new PetStore::IDSeq(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PetStore::IDSeq*& v)
{
    if(any.check_type(PetStore::_tc_IDSeq))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PetStore::IDSeq* val = new PetStore::IDSeq;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            ::PetStore::KeyID* * _ob_buf0 = (*val).get_buffer();
            for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
            {
                CORBA::remove_ref(_ob_buf0[_ob_i0]);
                OBUnmarshal(_ob_buf0[_ob_i0], _ob_in);
            }
            (CORBA::Any&)any <<= val;
        }

        v = (PetStore::IDSeq*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/OrderOp:1.0
//
const char* PetStore::OrderOp::ids_[] =
{
    "IDL:PetStore/OrderOp:1.0",
    0
};

void
OBDuplicate(PetStore::OrderOp_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::OrderOp_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::OrderOp_ptr
PetStore::OrderOp::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderOp_ptr v = dynamic_cast<OrderOp_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::OrderOp* val = new OBProxy_PetStore::OrderOp;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::OrderOp_ptr
PetStore::OrderOp::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderOp_ptr v = dynamic_cast<OrderOp_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::OrderOp_ptr
PetStore::OrderOp::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderOp_ptr v = dynamic_cast<OrderOp_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::OrderOp* val = new OBProxy_PetStore::OrderOp;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::OrderOp_ptr
PetStore::OrderOp::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::OrderOp::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::OrderOp_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::OrderOp_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::OrderOp_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::OrderOp* _ob_obj = new OBProxy_PetStore::OrderOp;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::OrderOp::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::OrderOp_ptr* v)
{
    any.replace(PetStore::_tc_OrderOp, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::OrderOp_ptr v)
{
    PetStore::OrderOp_ptr val = PetStore::OrderOp::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::OrderOp_ptr& v)
{
    if(any.check_type(PetStore::_tc_OrderOp))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::OrderOp_ptr>(val)))
            {
                OBProxy_PetStore::OrderOp* obj = new OBProxy_PetStore::OrderOp;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::OrderOp::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/OrderItemInfo:1.0
//
#ifdef OB_CLEAR_MEM
PetStore::OrderItemInfo::OrderItemInfo()
{
    memset(&quantity, 0, sizeof(quantity));
    memset(&unit_price, 0, sizeof(unit_price));
    memset(&sub_total, 0, sizeof(sub_total));
}
#endif

PetStore::OrderItemInfo::OrderItemInfo(const OrderItemInfo& _ob_a)
    : orderItem_id(_ob_a.orderItem_id),
      product_id(_ob_a.product_id),
      product_name(_ob_a.product_name),
      quantity(_ob_a.quantity),
      unit_price(_ob_a.unit_price),
      sub_total(_ob_a.sub_total)
{
}

PetStore::OrderItemInfo&
PetStore::OrderItemInfo::operator=(const OrderItemInfo& _ob_a)
{
    if(this != &_ob_a)
    {
        orderItem_id = _ob_a.orderItem_id;
        product_id = _ob_a.product_id;
        product_name = _ob_a.product_name;
        quantity = _ob_a.quantity;
        unit_price = _ob_a.unit_price;
        sub_total = _ob_a.sub_total;
    }
    return *this;
}

void
PetStore::OrderItemInfo::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    _ob_out -> write_string(orderItem_id);
    _ob_out -> write_string(product_id);
    _ob_out -> write_string(product_name);
    _ob_out -> write_ulong(quantity);
    _ob_out -> write_ulong(unit_price);
    _ob_out -> write_ulong(sub_total);
}

void
PetStore::OrderItemInfo::_OB_unmarshal(OrderItemInfo& _ob_v, OB::InputStreamImpl* _ob_in)
{
    _ob_v.orderItem_id = _ob_in -> read_string();
    _ob_v.product_id = _ob_in -> read_string();
    _ob_v.product_name = _ob_in -> read_string();
    _ob_v.quantity = _ob_in -> read_ulong();
    _ob_v.unit_price = _ob_in -> read_ulong();
    _ob_v.sub_total = _ob_in -> read_ulong();
}

void
operator<<=(CORBA::Any& any, PetStore::OrderItemInfo* v)
{
    static const OB::Info< PetStore::OrderItemInfo > info;
    any.replace(PetStore::_tc_OrderItemInfo, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PetStore::OrderItemInfo& v)
{
    any <<= new PetStore::OrderItemInfo(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PetStore::OrderItemInfo*& v)
{
    if(any.check_type(PetStore::_tc_OrderItemInfo))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PetStore::OrderItemInfo* val = new PetStore::OrderItemInfo;
            PetStore::OrderItemInfo::_OB_unmarshal(*val, _ob_in);
            (CORBA::Any&)any <<= val;
        }

        v = (PetStore::OrderItemInfo*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/OrderItemInfoList:1.0
//
void
PetStore::OBInfo_OrderItemInfoList::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const ::PetStore::OrderItemInfoList& _ob_seq = *(const ::PetStore::OrderItemInfoList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    ::PetStore::OrderItemInfo const * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
    }
}

void
PetStore::OBInfo_OrderItemInfoList::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    ::PetStore::OrderItemInfoList& _ob_seq = *(::PetStore::OrderItemInfoList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    ::PetStore::OrderItemInfo * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        ::PetStore::OrderItemInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
}

void
operator<<=(CORBA::Any& any, PetStore::OrderItemInfoList* v)
{
    static const PetStore::OBInfo_OrderItemInfoList info;
    any.replace(PetStore::_tc_OrderItemInfoList, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PetStore::OrderItemInfoList& v)
{
    any <<= new PetStore::OrderItemInfoList(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PetStore::OrderItemInfoList*& v)
{
    if(any.check_type(PetStore::_tc_OrderItemInfoList))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PetStore::OrderItemInfoList* val = new PetStore::OrderItemInfoList;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            ::PetStore::OrderItemInfo * _ob_buf0 = (*val).get_buffer();
            for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
            {
                ::PetStore::OrderItemInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
            }
            (CORBA::Any&)any <<= val;
        }

        v = (PetStore::OrderItemInfoList*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/Order:1.0
//
const char* PetStore::Order::ids_[] =
{
    "IDL:PetStore/Order:1.0",
    "IDL:PetStore/OrderOp:1.0",
    "IDL:omg.org/Components/Navigation:1.0",
    "IDL:omg.org/Components/Receptacles:1.0",
    "IDL:omg.org/Components/Events:1.0",
    "IDL:omg.org/Components/CCMObject:1.0",
    0
};

void
OBDuplicate(PetStore::Order_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::Order_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::Order_ptr
PetStore::Order::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Order_ptr v = dynamic_cast<Order_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::Order* val = new OBProxy_PetStore::Order;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::Order_ptr
PetStore::Order::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Order_ptr v = dynamic_cast<Order_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::Order_ptr
PetStore::Order::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Order_ptr v = dynamic_cast<Order_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::Order* val = new OBProxy_PetStore::Order;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::Order_ptr
PetStore::Order::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::Order::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::Order_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::Order_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::Order_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::Order* _ob_obj = new OBProxy_PetStore::Order;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::Order::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::Order_ptr* v)
{
    any.replace(PetStore::_tc_Order, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::Order_ptr v)
{
    PetStore::Order_ptr val = PetStore::Order::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::Order_ptr& v)
{
    if(any.check_type(PetStore::_tc_Order))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::Order_ptr>(val)))
            {
                OBProxy_PetStore::Order* obj = new OBProxy_PetStore::Order;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::Order::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/OrderList:1.0
//
void
PetStore::OBInfo_OrderList::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const ::PetStore::OrderList& _ob_seq = *(const ::PetStore::OrderList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    ::PetStore::Order_ptr const * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        OBMarshal(_ob_buf0[_ob_i0], _ob_out);
    }
}

void
PetStore::OBInfo_OrderList::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    ::PetStore::OrderList& _ob_seq = *(::PetStore::OrderList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    ::PetStore::Order_ptr * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        OBUnmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
}

void
operator<<=(CORBA::Any& any, PetStore::OrderList* v)
{
    static const PetStore::OBInfo_OrderList info;
    any.replace(PetStore::_tc_OrderList, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PetStore::OrderList& v)
{
    any <<= new PetStore::OrderList(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PetStore::OrderList*& v)
{
    if(any.check_type(PetStore::_tc_OrderList))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PetStore::OrderList* val = new PetStore::OrderList;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            ::PetStore::Order_ptr * _ob_buf0 = (*val).get_buffer();
            for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
            {
                OBUnmarshal(_ob_buf0[_ob_i0], _ob_in);
            }
            (CORBA::Any&)any <<= val;
        }

        v = (PetStore::OrderList*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/OrderHomeExplicit:1.0
//
const char* PetStore::OrderHomeExplicit::ids_[] =
{
    "IDL:PetStore/OrderHomeExplicit:1.0",
    "IDL:omg.org/Components/CCMHome:1.0",
    0
};

void
OBDuplicate(PetStore::OrderHomeExplicit_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::OrderHomeExplicit_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::OrderHomeExplicit_ptr
PetStore::OrderHomeExplicit::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderHomeExplicit_ptr v = dynamic_cast<OrderHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::OrderHomeExplicit* val = new OBProxy_PetStore::OrderHomeExplicit;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::OrderHomeExplicit_ptr
PetStore::OrderHomeExplicit::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderHomeExplicit_ptr v = dynamic_cast<OrderHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::OrderHomeExplicit_ptr
PetStore::OrderHomeExplicit::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderHomeExplicit_ptr v = dynamic_cast<OrderHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::OrderHomeExplicit* val = new OBProxy_PetStore::OrderHomeExplicit;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::OrderHomeExplicit_ptr
PetStore::OrderHomeExplicit::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::OrderHomeExplicit::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::OrderHomeExplicit_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::OrderHomeExplicit_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::OrderHomeExplicit_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::OrderHomeExplicit* _ob_obj = new OBProxy_PetStore::OrderHomeExplicit;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::OrderHomeExplicit::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::OrderHomeExplicit_ptr* v)
{
    any.replace(PetStore::_tc_OrderHomeExplicit, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::OrderHomeExplicit_ptr v)
{
    PetStore::OrderHomeExplicit_ptr val = PetStore::OrderHomeExplicit::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::OrderHomeExplicit_ptr& v)
{
    if(any.check_type(PetStore::_tc_OrderHomeExplicit))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::OrderHomeExplicit_ptr>(val)))
            {
                OBProxy_PetStore::OrderHomeExplicit* obj = new OBProxy_PetStore::OrderHomeExplicit;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::OrderHomeExplicit::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/OrderHomeImplicit:1.0
//
const char* PetStore::OrderHomeImplicit::ids_[] =
{
    "IDL:PetStore/OrderHomeImplicit:1.0",
    0
};

void
OBDuplicate(PetStore::OrderHomeImplicit_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::OrderHomeImplicit_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::OrderHomeImplicit_ptr
PetStore::OrderHomeImplicit::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderHomeImplicit_ptr v = dynamic_cast<OrderHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::OrderHomeImplicit* val = new OBProxy_PetStore::OrderHomeImplicit;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::OrderHomeImplicit_ptr
PetStore::OrderHomeImplicit::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderHomeImplicit_ptr v = dynamic_cast<OrderHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::OrderHomeImplicit_ptr
PetStore::OrderHomeImplicit::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderHomeImplicit_ptr v = dynamic_cast<OrderHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::OrderHomeImplicit* val = new OBProxy_PetStore::OrderHomeImplicit;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::OrderHomeImplicit_ptr
PetStore::OrderHomeImplicit::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::OrderHomeImplicit::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::OrderHomeImplicit_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::OrderHomeImplicit_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::OrderHomeImplicit_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::OrderHomeImplicit* _ob_obj = new OBProxy_PetStore::OrderHomeImplicit;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::OrderHomeImplicit::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::OrderHomeImplicit_ptr* v)
{
    any.replace(PetStore::_tc_OrderHomeImplicit, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::OrderHomeImplicit_ptr v)
{
    PetStore::OrderHomeImplicit_ptr val = PetStore::OrderHomeImplicit::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::OrderHomeImplicit_ptr& v)
{
    if(any.check_type(PetStore::_tc_OrderHomeImplicit))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::OrderHomeImplicit_ptr>(val)))
            {
                OBProxy_PetStore::OrderHomeImplicit* obj = new OBProxy_PetStore::OrderHomeImplicit;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::OrderHomeImplicit::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/OrderHome:1.0
//
const char* PetStore::OrderHome::ids_[] =
{
    "IDL:PetStore/OrderHome:1.0",
    "IDL:omg.org/Components/CCMHome:1.0",
    "IDL:PetStore/OrderHomeExplicit:1.0",
    "IDL:PetStore/OrderHomeImplicit:1.0",
    0
};

void
OBDuplicate(PetStore::OrderHome_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::OrderHome_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::OrderHome_ptr
PetStore::OrderHome::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderHome_ptr v = dynamic_cast<OrderHome_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::OrderHome* val = new OBProxy_PetStore::OrderHome;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::OrderHome_ptr
PetStore::OrderHome::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderHome_ptr v = dynamic_cast<OrderHome_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::OrderHome_ptr
PetStore::OrderHome::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OrderHome_ptr v = dynamic_cast<OrderHome_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::OrderHome* val = new OBProxy_PetStore::OrderHome;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::OrderHome_ptr
PetStore::OrderHome::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::OrderHome::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::OrderHome_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::OrderHome_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::OrderHome_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::OrderHome* _ob_obj = new OBProxy_PetStore::OrderHome;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::OrderHome::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::OrderHome_ptr* v)
{
    any.replace(PetStore::_tc_OrderHome, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::OrderHome_ptr v)
{
    PetStore::OrderHome_ptr val = PetStore::OrderHome::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::OrderHome_ptr& v)
{
    if(any.check_type(PetStore::_tc_OrderHome))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::OrderHome_ptr>(val)))
            {
                OBProxy_PetStore::OrderHome* obj = new OBProxy_PetStore::OrderHome;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::OrderHome::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/SalesRecordInfo:1.0
//
#ifdef OB_CLEAR_MEM
PetStore::SalesRecordInfo::SalesRecordInfo()
{
    memset(&quantity, 0, sizeof(quantity));
    memset(&unit_price, 0, sizeof(unit_price));
    memset(&sub_total, 0, sizeof(sub_total));
}
#endif

PetStore::SalesRecordInfo::SalesRecordInfo(const SalesRecordInfo& _ob_a)
    : product_id(_ob_a.product_id),
      product_name(_ob_a.product_name),
      quantity(_ob_a.quantity),
      unit_price(_ob_a.unit_price),
      sub_total(_ob_a.sub_total)
{
}

PetStore::SalesRecordInfo&
PetStore::SalesRecordInfo::operator=(const SalesRecordInfo& _ob_a)
{
    if(this != &_ob_a)
    {
        product_id = _ob_a.product_id;
        product_name = _ob_a.product_name;
        quantity = _ob_a.quantity;
        unit_price = _ob_a.unit_price;
        sub_total = _ob_a.sub_total;
    }
    return *this;
}

void
PetStore::SalesRecordInfo::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    _ob_out -> write_string(product_id);
    _ob_out -> write_string(product_name);
    _ob_out -> write_ulong(quantity);
    _ob_out -> write_ulong(unit_price);
    _ob_out -> write_ulong(sub_total);
}

void
PetStore::SalesRecordInfo::_OB_unmarshal(SalesRecordInfo& _ob_v, OB::InputStreamImpl* _ob_in)
{
    _ob_v.product_id = _ob_in -> read_string();
    _ob_v.product_name = _ob_in -> read_string();
    _ob_v.quantity = _ob_in -> read_ulong();
    _ob_v.unit_price = _ob_in -> read_ulong();
    _ob_v.sub_total = _ob_in -> read_ulong();
}

void
operator<<=(CORBA::Any& any, PetStore::SalesRecordInfo* v)
{
    static const OB::Info< PetStore::SalesRecordInfo > info;
    any.replace(PetStore::_tc_SalesRecordInfo, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PetStore::SalesRecordInfo& v)
{
    any <<= new PetStore::SalesRecordInfo(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PetStore::SalesRecordInfo*& v)
{
    if(any.check_type(PetStore::_tc_SalesRecordInfo))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PetStore::SalesRecordInfo* val = new PetStore::SalesRecordInfo;
            PetStore::SalesRecordInfo::_OB_unmarshal(*val, _ob_in);
            (CORBA::Any&)any <<= val;
        }

        v = (PetStore::SalesRecordInfo*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/SalesRecordInfoList:1.0
//
void
PetStore::OBInfo_SalesRecordInfoList::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const ::PetStore::SalesRecordInfoList& _ob_seq = *(const ::PetStore::SalesRecordInfoList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    ::PetStore::SalesRecordInfo const * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
    }
}

void
PetStore::OBInfo_SalesRecordInfoList::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    ::PetStore::SalesRecordInfoList& _ob_seq = *(::PetStore::SalesRecordInfoList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    ::PetStore::SalesRecordInfo * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        ::PetStore::SalesRecordInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
}

void
operator<<=(CORBA::Any& any, PetStore::SalesRecordInfoList* v)
{
    static const PetStore::OBInfo_SalesRecordInfoList info;
    any.replace(PetStore::_tc_SalesRecordInfoList, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PetStore::SalesRecordInfoList& v)
{
    any <<= new PetStore::SalesRecordInfoList(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PetStore::SalesRecordInfoList*& v)
{
    if(any.check_type(PetStore::_tc_SalesRecordInfoList))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PetStore::SalesRecordInfoList* val = new PetStore::SalesRecordInfoList;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            ::PetStore::SalesRecordInfo * _ob_buf0 = (*val).get_buffer();
            for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
            {
                ::PetStore::SalesRecordInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
            }
            (CORBA::Any&)any <<= val;
        }

        v = (PetStore::SalesRecordInfoList*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/SalesRecord:1.0
//
#ifdef OB_CLEAR_MEM
PetStore::SalesRecord::SalesRecord()
{
    memset(&sub_total, 0, sizeof(sub_total));
}
#endif

PetStore::SalesRecord::SalesRecord(const SalesRecord& _ob_a)
    : sales_record_list(_ob_a.sales_record_list),
      sub_total(_ob_a.sub_total)
{
}

PetStore::SalesRecord&
PetStore::SalesRecord::operator=(const SalesRecord& _ob_a)
{
    if(this != &_ob_a)
    {
        sales_record_list = _ob_a.sales_record_list;
        sub_total = _ob_a.sub_total;
    }
    return *this;
}

void
PetStore::SalesRecord::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    CORBA::ULong _ob_len0 = sales_record_list.length();
    _ob_out -> write_ulong(_ob_len0);
    SalesRecordInfo const * _ob_buf0 = sales_record_list.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
    }
    _ob_out -> write_ulong(sub_total);
}

void
PetStore::SalesRecord::_OB_unmarshal(SalesRecord& _ob_v, OB::InputStreamImpl* _ob_in)
{
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_v.sales_record_list.length(_ob_len0);
    SalesRecordInfo * _ob_buf0 = _ob_v.sales_record_list.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        SalesRecordInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
    _ob_v.sub_total = _ob_in -> read_ulong();
}

void
operator<<=(CORBA::Any& any, PetStore::SalesRecord* v)
{
    static const OB::Info< PetStore::SalesRecord > info;
    any.replace(PetStore::_tc_SalesRecord, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PetStore::SalesRecord& v)
{
    any <<= new PetStore::SalesRecord(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PetStore::SalesRecord*& v)
{
    if(any.check_type(PetStore::_tc_SalesRecord))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PetStore::SalesRecord* val = new PetStore::SalesRecord;
            PetStore::SalesRecord::_OB_unmarshal(*val, _ob_in);
            (CORBA::Any&)any <<= val;
        }

        v = (PetStore::SalesRecord*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/ShoppingCart:1.0
//
const char* PetStore::ShoppingCart::ids_[] =
{
    "IDL:PetStore/ShoppingCart:1.0",
    0
};

void
OBDuplicate(PetStore::ShoppingCart_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::ShoppingCart_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::ShoppingCart_ptr
PetStore::ShoppingCart::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ShoppingCart_ptr v = dynamic_cast<ShoppingCart_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::ShoppingCart* val = new OBProxy_PetStore::ShoppingCart;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::ShoppingCart_ptr
PetStore::ShoppingCart::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ShoppingCart_ptr v = dynamic_cast<ShoppingCart_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::ShoppingCart_ptr
PetStore::ShoppingCart::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ShoppingCart_ptr v = dynamic_cast<ShoppingCart_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::ShoppingCart* val = new OBProxy_PetStore::ShoppingCart;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::ShoppingCart_ptr
PetStore::ShoppingCart::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::ShoppingCart::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::ShoppingCart_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::ShoppingCart_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::ShoppingCart_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::ShoppingCart* _ob_obj = new OBProxy_PetStore::ShoppingCart;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::ShoppingCart::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::ShoppingCart_ptr* v)
{
    any.replace(PetStore::_tc_ShoppingCart, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::ShoppingCart_ptr v)
{
    PetStore::ShoppingCart_ptr val = PetStore::ShoppingCart::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::ShoppingCart_ptr& v)
{
    if(any.check_type(PetStore::_tc_ShoppingCart))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::ShoppingCart_ptr>(val)))
            {
                OBProxy_PetStore::ShoppingCart* obj = new OBProxy_PetStore::ShoppingCart;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::ShoppingCart::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/Cart:1.0
//
const char* PetStore::Cart::ids_[] =
{
    "IDL:PetStore/Cart:1.0",
    "IDL:PetStore/ShoppingCart:1.0",
    "IDL:omg.org/Components/Navigation:1.0",
    "IDL:omg.org/Components/Receptacles:1.0",
    "IDL:omg.org/Components/Events:1.0",
    "IDL:omg.org/Components/CCMObject:1.0",
    0
};

void
OBDuplicate(PetStore::Cart_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::Cart_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::Cart_ptr
PetStore::Cart::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Cart_ptr v = dynamic_cast<Cart_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::Cart* val = new OBProxy_PetStore::Cart;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::Cart_ptr
PetStore::Cart::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Cart_ptr v = dynamic_cast<Cart_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::Cart_ptr
PetStore::Cart::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Cart_ptr v = dynamic_cast<Cart_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::Cart* val = new OBProxy_PetStore::Cart;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::Cart_ptr
PetStore::Cart::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::Cart::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::Cart_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::Cart_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::Cart_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::Cart* _ob_obj = new OBProxy_PetStore::Cart;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::Cart::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::Cart_ptr* v)
{
    any.replace(PetStore::_tc_Cart, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::Cart_ptr v)
{
    PetStore::Cart_ptr val = PetStore::Cart::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::Cart_ptr& v)
{
    if(any.check_type(PetStore::_tc_Cart))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::Cart_ptr>(val)))
            {
                OBProxy_PetStore::Cart* obj = new OBProxy_PetStore::Cart;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::Cart::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/CartHomeExplicit:1.0
//
const char* PetStore::CartHomeExplicit::ids_[] =
{
    "IDL:PetStore/CartHomeExplicit:1.0",
    "IDL:omg.org/Components/CCMHome:1.0",
    0
};

void
OBDuplicate(PetStore::CartHomeExplicit_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::CartHomeExplicit_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::CartHomeExplicit_ptr
PetStore::CartHomeExplicit::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CartHomeExplicit_ptr v = dynamic_cast<CartHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::CartHomeExplicit* val = new OBProxy_PetStore::CartHomeExplicit;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::CartHomeExplicit_ptr
PetStore::CartHomeExplicit::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CartHomeExplicit_ptr v = dynamic_cast<CartHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::CartHomeExplicit_ptr
PetStore::CartHomeExplicit::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CartHomeExplicit_ptr v = dynamic_cast<CartHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::CartHomeExplicit* val = new OBProxy_PetStore::CartHomeExplicit;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::CartHomeExplicit_ptr
PetStore::CartHomeExplicit::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::CartHomeExplicit::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::CartHomeExplicit_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::CartHomeExplicit_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::CartHomeExplicit_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::CartHomeExplicit* _ob_obj = new OBProxy_PetStore::CartHomeExplicit;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::CartHomeExplicit::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::CartHomeExplicit_ptr* v)
{
    any.replace(PetStore::_tc_CartHomeExplicit, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::CartHomeExplicit_ptr v)
{
    PetStore::CartHomeExplicit_ptr val = PetStore::CartHomeExplicit::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::CartHomeExplicit_ptr& v)
{
    if(any.check_type(PetStore::_tc_CartHomeExplicit))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::CartHomeExplicit_ptr>(val)))
            {
                OBProxy_PetStore::CartHomeExplicit* obj = new OBProxy_PetStore::CartHomeExplicit;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::CartHomeExplicit::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/CartHomeImplicit:1.0
//
const char* PetStore::CartHomeImplicit::ids_[] =
{
    "IDL:PetStore/CartHomeImplicit:1.0",
    "IDL:omg.org/Components/KeylessCCMHome:1.0",
    0
};

void
OBDuplicate(PetStore::CartHomeImplicit_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::CartHomeImplicit_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::CartHomeImplicit_ptr
PetStore::CartHomeImplicit::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CartHomeImplicit_ptr v = dynamic_cast<CartHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::CartHomeImplicit* val = new OBProxy_PetStore::CartHomeImplicit;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::CartHomeImplicit_ptr
PetStore::CartHomeImplicit::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CartHomeImplicit_ptr v = dynamic_cast<CartHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::CartHomeImplicit_ptr
PetStore::CartHomeImplicit::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CartHomeImplicit_ptr v = dynamic_cast<CartHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::CartHomeImplicit* val = new OBProxy_PetStore::CartHomeImplicit;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::CartHomeImplicit_ptr
PetStore::CartHomeImplicit::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::CartHomeImplicit::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::CartHomeImplicit_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::CartHomeImplicit_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::CartHomeImplicit_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::CartHomeImplicit* _ob_obj = new OBProxy_PetStore::CartHomeImplicit;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::CartHomeImplicit::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::CartHomeImplicit_ptr* v)
{
    any.replace(PetStore::_tc_CartHomeImplicit, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::CartHomeImplicit_ptr v)
{
    PetStore::CartHomeImplicit_ptr val = PetStore::CartHomeImplicit::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::CartHomeImplicit_ptr& v)
{
    if(any.check_type(PetStore::_tc_CartHomeImplicit))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::CartHomeImplicit_ptr>(val)))
            {
                OBProxy_PetStore::CartHomeImplicit* obj = new OBProxy_PetStore::CartHomeImplicit;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::CartHomeImplicit::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/CartHome:1.0
//
const char* PetStore::CartHome::ids_[] =
{
    "IDL:PetStore/CartHome:1.0",
    "IDL:omg.org/Components/CCMHome:1.0",
    "IDL:PetStore/CartHomeExplicit:1.0",
    "IDL:omg.org/Components/KeylessCCMHome:1.0",
    "IDL:PetStore/CartHomeImplicit:1.0",
    0
};

void
OBDuplicate(PetStore::CartHome_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::CartHome_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::CartHome_ptr
PetStore::CartHome::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CartHome_ptr v = dynamic_cast<CartHome_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::CartHome* val = new OBProxy_PetStore::CartHome;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::CartHome_ptr
PetStore::CartHome::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CartHome_ptr v = dynamic_cast<CartHome_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::CartHome_ptr
PetStore::CartHome::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CartHome_ptr v = dynamic_cast<CartHome_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::CartHome* val = new OBProxy_PetStore::CartHome;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::CartHome_ptr
PetStore::CartHome::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::CartHome::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::CartHome_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::CartHome_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::CartHome_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::CartHome* _ob_obj = new OBProxy_PetStore::CartHome;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::CartHome::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::CartHome_ptr* v)
{
    any.replace(PetStore::_tc_CartHome, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::CartHome_ptr v)
{
    PetStore::CartHome_ptr val = PetStore::CartHome::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::CartHome_ptr& v)
{
    if(any.check_type(PetStore::_tc_CartHome))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::CartHome_ptr>(val)))
            {
                OBProxy_PetStore::CartHome* obj = new OBProxy_PetStore::CartHome;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::CartHome::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/ProductInfo:1.0
//
#ifdef OB_CLEAR_MEM
PetStore::ProductInfo::ProductInfo()
{
    memset(&product_price, 0, sizeof(product_price));
    memset(&product_qty, 0, sizeof(product_qty));
}
#endif

PetStore::ProductInfo::ProductInfo(const ProductInfo& _ob_a)
    : product_id(_ob_a.product_id),
      product_name(_ob_a.product_name),
      product_picture(_ob_a.product_picture),
      product_category(_ob_a.product_category),
      product_price(_ob_a.product_price),
      product_qty(_ob_a.product_qty),
      product_description(_ob_a.product_description)
{
}

PetStore::ProductInfo&
PetStore::ProductInfo::operator=(const ProductInfo& _ob_a)
{
    if(this != &_ob_a)
    {
        product_id = _ob_a.product_id;
        product_name = _ob_a.product_name;
        product_picture = _ob_a.product_picture;
        product_category = _ob_a.product_category;
        product_price = _ob_a.product_price;
        product_qty = _ob_a.product_qty;
        product_description = _ob_a.product_description;
    }
    return *this;
}

void
PetStore::ProductInfo::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    _ob_out -> write_string(product_id);
    _ob_out -> write_string(product_name);
    _ob_out -> write_string(product_picture);
    _ob_out -> write_string(product_category);
    _ob_out -> write_ulong(product_price);
    _ob_out -> write_ulong(product_qty);
    _ob_out -> write_string(product_description);
}

void
PetStore::ProductInfo::_OB_unmarshal(ProductInfo& _ob_v, OB::InputStreamImpl* _ob_in)
{
    _ob_v.product_id = _ob_in -> read_string();
    _ob_v.product_name = _ob_in -> read_string();
    _ob_v.product_picture = _ob_in -> read_string();
    _ob_v.product_category = _ob_in -> read_string();
    _ob_v.product_price = _ob_in -> read_ulong();
    _ob_v.product_qty = _ob_in -> read_ulong();
    _ob_v.product_description = _ob_in -> read_string();
}

void
operator<<=(CORBA::Any& any, PetStore::ProductInfo* v)
{
    static const OB::Info< PetStore::ProductInfo > info;
    any.replace(PetStore::_tc_ProductInfo, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PetStore::ProductInfo& v)
{
    any <<= new PetStore::ProductInfo(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PetStore::ProductInfo*& v)
{
    if(any.check_type(PetStore::_tc_ProductInfo))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PetStore::ProductInfo* val = new PetStore::ProductInfo;
            PetStore::ProductInfo::_OB_unmarshal(*val, _ob_in);
            (CORBA::Any&)any <<= val;
        }

        v = (PetStore::ProductInfo*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/ProductInfoList:1.0
//
void
PetStore::OBInfo_ProductInfoList::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const ::PetStore::ProductInfoList& _ob_seq = *(const ::PetStore::ProductInfoList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    ::PetStore::ProductInfo const * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
    }
}

void
PetStore::OBInfo_ProductInfoList::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    ::PetStore::ProductInfoList& _ob_seq = *(::PetStore::ProductInfoList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    ::PetStore::ProductInfo * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        ::PetStore::ProductInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
}

void
operator<<=(CORBA::Any& any, PetStore::ProductInfoList* v)
{
    static const PetStore::OBInfo_ProductInfoList info;
    any.replace(PetStore::_tc_ProductInfoList, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PetStore::ProductInfoList& v)
{
    any <<= new PetStore::ProductInfoList(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PetStore::ProductInfoList*& v)
{
    if(any.check_type(PetStore::_tc_ProductInfoList))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PetStore::ProductInfoList* val = new PetStore::ProductInfoList;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            ::PetStore::ProductInfo * _ob_buf0 = (*val).get_buffer();
            for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
            {
                ::PetStore::ProductInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
            }
            (CORBA::Any&)any <<= val;
        }

        v = (PetStore::ProductInfoList*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/ProductIndexInfo:1.0
//
PetStore::ProductIndexInfo::ProductIndexInfo(const ProductIndexInfo& _ob_a)
    : product_id(_ob_a.product_id),
      product_name(_ob_a.product_name),
      product_category(_ob_a.product_category)
{
}

PetStore::ProductIndexInfo&
PetStore::ProductIndexInfo::operator=(const ProductIndexInfo& _ob_a)
{
    if(this != &_ob_a)
    {
        product_id = _ob_a.product_id;
        product_name = _ob_a.product_name;
        product_category = _ob_a.product_category;
    }
    return *this;
}

void
PetStore::ProductIndexInfo::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    _ob_out -> write_string(product_id);
    _ob_out -> write_string(product_name);
    _ob_out -> write_string(product_category);
}

void
PetStore::ProductIndexInfo::_OB_unmarshal(ProductIndexInfo& _ob_v, OB::InputStreamImpl* _ob_in)
{
    _ob_v.product_id = _ob_in -> read_string();
    _ob_v.product_name = _ob_in -> read_string();
    _ob_v.product_category = _ob_in -> read_string();
}

void
operator<<=(CORBA::Any& any, PetStore::ProductIndexInfo* v)
{
    static const OB::Info< PetStore::ProductIndexInfo > info;
    any.replace(PetStore::_tc_ProductIndexInfo, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PetStore::ProductIndexInfo& v)
{
    any <<= new PetStore::ProductIndexInfo(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PetStore::ProductIndexInfo*& v)
{
    if(any.check_type(PetStore::_tc_ProductIndexInfo))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PetStore::ProductIndexInfo* val = new PetStore::ProductIndexInfo;
            PetStore::ProductIndexInfo::_OB_unmarshal(*val, _ob_in);
            (CORBA::Any&)any <<= val;
        }

        v = (PetStore::ProductIndexInfo*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/ProductIndexInfoList:1.0
//
void
PetStore::OBInfo_ProductIndexInfoList::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const ::PetStore::ProductIndexInfoList& _ob_seq = *(const ::PetStore::ProductIndexInfoList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    ::PetStore::ProductIndexInfo const * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
    }
}

void
PetStore::OBInfo_ProductIndexInfoList::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    ::PetStore::ProductIndexInfoList& _ob_seq = *(::PetStore::ProductIndexInfoList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    ::PetStore::ProductIndexInfo * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        ::PetStore::ProductIndexInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
}

void
operator<<=(CORBA::Any& any, PetStore::ProductIndexInfoList* v)
{
    static const PetStore::OBInfo_ProductIndexInfoList info;
    any.replace(PetStore::_tc_ProductIndexInfoList, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PetStore::ProductIndexInfoList& v)
{
    any <<= new PetStore::ProductIndexInfoList(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PetStore::ProductIndexInfoList*& v)
{
    if(any.check_type(PetStore::_tc_ProductIndexInfoList))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PetStore::ProductIndexInfoList* val = new PetStore::ProductIndexInfoList;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            ::PetStore::ProductIndexInfo * _ob_buf0 = (*val).get_buffer();
            for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
            {
                ::PetStore::ProductIndexInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
            }
            (CORBA::Any&)any <<= val;
        }

        v = (PetStore::ProductIndexInfoList*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/OrderInfo:1.0
//
#ifdef OB_CLEAR_MEM
PetStore::OrderInfo::OrderInfo()
{
    memset(&sub_total, 0, sizeof(sub_total));
}
#endif

PetStore::OrderInfo::OrderInfo(const OrderInfo& _ob_a)
    : order_id(_ob_a.order_id),
      user_name(_ob_a.user_name),
      user_address(_ob_a.user_address),
      order_time(_ob_a.order_time),
      order_items(_ob_a.order_items),
      sub_total(_ob_a.sub_total)
{
}

PetStore::OrderInfo&
PetStore::OrderInfo::operator=(const OrderInfo& _ob_a)
{
    if(this != &_ob_a)
    {
        order_id = _ob_a.order_id;
        user_name = _ob_a.user_name;
        user_address = _ob_a.user_address;
        order_time = _ob_a.order_time;
        order_items = _ob_a.order_items;
        sub_total = _ob_a.sub_total;
    }
    return *this;
}

void
PetStore::OrderInfo::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    _ob_out -> write_string(order_id);
    _ob_out -> write_string(user_name);
    _ob_out -> write_string(user_address);
    _ob_out -> write_string(order_time);
    CORBA::ULong _ob_len0 = order_items.length();
    _ob_out -> write_ulong(_ob_len0);
    OrderItemInfo const * _ob_buf0 = order_items.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
    }
    _ob_out -> write_ulong(sub_total);
}

void
PetStore::OrderInfo::_OB_unmarshal(OrderInfo& _ob_v, OB::InputStreamImpl* _ob_in)
{
    _ob_v.order_id = _ob_in -> read_string();
    _ob_v.user_name = _ob_in -> read_string();
    _ob_v.user_address = _ob_in -> read_string();
    _ob_v.order_time = _ob_in -> read_string();
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_v.order_items.length(_ob_len0);
    OrderItemInfo * _ob_buf0 = _ob_v.order_items.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        OrderItemInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
    _ob_v.sub_total = _ob_in -> read_ulong();
}

void
operator<<=(CORBA::Any& any, PetStore::OrderInfo* v)
{
    static const OB::Info< PetStore::OrderInfo > info;
    any.replace(PetStore::_tc_OrderInfo, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PetStore::OrderInfo& v)
{
    any <<= new PetStore::OrderInfo(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PetStore::OrderInfo*& v)
{
    if(any.check_type(PetStore::_tc_OrderInfo))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PetStore::OrderInfo* val = new PetStore::OrderInfo;
            PetStore::OrderInfo::_OB_unmarshal(*val, _ob_in);
            (CORBA::Any&)any <<= val;
        }

        v = (PetStore::OrderInfo*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/OrderInfoList:1.0
//
void
PetStore::OBInfo_OrderInfoList::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const ::PetStore::OrderInfoList& _ob_seq = *(const ::PetStore::OrderInfoList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    ::PetStore::OrderInfo const * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
    }
}

void
PetStore::OBInfo_OrderInfoList::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    ::PetStore::OrderInfoList& _ob_seq = *(::PetStore::OrderInfoList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    ::PetStore::OrderInfo * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        ::PetStore::OrderInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
}

void
operator<<=(CORBA::Any& any, PetStore::OrderInfoList* v)
{
    static const PetStore::OBInfo_OrderInfoList info;
    any.replace(PetStore::_tc_OrderInfoList, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PetStore::OrderInfoList& v)
{
    any <<= new PetStore::OrderInfoList(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PetStore::OrderInfoList*& v)
{
    if(any.check_type(PetStore::_tc_OrderInfoList))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PetStore::OrderInfoList* val = new PetStore::OrderInfoList;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            ::PetStore::OrderInfo * _ob_buf0 = (*val).get_buffer();
            for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
            {
                ::PetStore::OrderInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
            }
            (CORBA::Any&)any <<= val;
        }

        v = (PetStore::OrderInfoList*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/SalesReport:1.0
//
const char* PetStore::SalesReport::_ob_id_ = "IDL:PetStore/SalesReport:1.0";

void
OBDuplicate(PetStore::SalesReport* p)
{
    CORBA::add_ref(p);
}

void
OBRelease(PetStore::SalesReport* p)
{
    CORBA::remove_ref(p);
}

PetStore::SalesReport*
PetStore::SalesReport::_downcast(CORBA::ValueBase* p)
{
    return dynamic_cast<SalesReport*>(p);
}

PetStore::SalesReport*
PetStore::SalesReport::_downcast(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::ValueBase_var v = p -> _to_value();
        return _downcast(v);
    }
    return 0;
}

const char*
PetStore::SalesReport::_OB_typeId() const
{
    return _ob_id_;
}

const char*
PetStore::SalesReport::_OB_id()
{
    return _ob_id_;
}

void
PetStore::SalesReport::_OB_marshal(OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_ulong(sub_total());
}

void
PetStore::SalesReport::_OB_unmarshal(OB::InputStreamImpl* _ob_in)
{
    CORBA::ULong _ob_m0;
    _ob_m0 = _ob_in -> read_ulong();
    sub_total(_ob_m0);
}

void
OBMarshal(PetStore::SalesReport* v, OB::OutputStreamImpl* out)
{
    out -> write_value(v, PetStore::SalesReport::_OB_id());
}

void
OBUnmarshal(PetStore::SalesReport*& v, OB::InputStreamImpl* in)
{
    CORBA::ValueBase* vb = in -> read_value(PetStore::SalesReport::_OB_id());
    v = PetStore::SalesReport::_downcast(vb);
}

void
operator<<=(CORBA::Any& any, PetStore::SalesReport** v)
{
    static OB::ValueBaseInfo info;
    any.replace(PetStore::_tc_SalesReport, (CORBA::ValueBase*)*v, true, &info);
}

void
operator<<=(CORBA::Any& any, PetStore::SalesReport* v)
{
    CORBA::add_ref(v);
    any <<= &v;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::SalesReport*& v)
{
    if(any.check_type(PetStore::_tc_SalesReport))
    {
        CORBA::ValueBase_var vb;
        if(any >>= CORBA::Any::to_value(vb.out()))
        {
            PetStore::SalesReport* val = 0;

            if(vb.in() != 0)
            {
                val = PetStore::SalesReport::_downcast(vb);
                if(val == 0)
                    return false;
                if(!any.info())
                    (CORBA::Any&)any <<= val;
            }

            v = val;
            return true;
        }
    }

    return false;
}

CORBA::ValueBase*
PetStore::SalesReport_init::create_for_unmarshal()
{
    return new ::OBV_PetStore::SalesReport;
}

PetStore::SalesReport_init*
PetStore::SalesReport_init::_downcast(CORBA::ValueFactory f)
{
    return dynamic_cast<SalesReport_init*>(f);
}

//
// IDL:PetStore/SalesReportConsumer:1.0
//
const char* PetStore::SalesReportConsumer::ids_[] =
{
    "IDL:PetStore/SalesReportConsumer:1.0",
    "IDL:omg.org/Components/EventConsumerBase:1.0",
    0
};

void
OBDuplicate(PetStore::SalesReportConsumer_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::SalesReportConsumer_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::SalesReportConsumer_ptr
PetStore::SalesReportConsumer::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        SalesReportConsumer_ptr v = dynamic_cast<SalesReportConsumer_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::SalesReportConsumer* val = new OBProxy_PetStore::SalesReportConsumer;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::SalesReportConsumer_ptr
PetStore::SalesReportConsumer::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        SalesReportConsumer_ptr v = dynamic_cast<SalesReportConsumer_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::SalesReportConsumer_ptr
PetStore::SalesReportConsumer::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        SalesReportConsumer_ptr v = dynamic_cast<SalesReportConsumer_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::SalesReportConsumer* val = new OBProxy_PetStore::SalesReportConsumer;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::SalesReportConsumer_ptr
PetStore::SalesReportConsumer::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::SalesReportConsumer::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::SalesReportConsumer_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::SalesReportConsumer_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::SalesReportConsumer_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::SalesReportConsumer* _ob_obj = new OBProxy_PetStore::SalesReportConsumer;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::SalesReportConsumer::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::SalesReportConsumer_ptr* v)
{
    any.replace(PetStore::_tc_SalesReportConsumer, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::SalesReportConsumer_ptr v)
{
    PetStore::SalesReportConsumer_ptr val = PetStore::SalesReportConsumer::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::SalesReportConsumer_ptr& v)
{
    if(any.check_type(PetStore::_tc_SalesReportConsumer))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::SalesReportConsumer_ptr>(val)))
            {
                OBProxy_PetStore::SalesReportConsumer* obj = new OBProxy_PetStore::SalesReportConsumer;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::SalesReportConsumer::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/BusinessOp:1.0
//
const char* PetStore::BusinessOp::ids_[] =
{
    "IDL:PetStore/BusinessOp:1.0",
    0
};

void
OBDuplicate(PetStore::BusinessOp_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::BusinessOp_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::BusinessOp_ptr
PetStore::BusinessOp::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        BusinessOp_ptr v = dynamic_cast<BusinessOp_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::BusinessOp* val = new OBProxy_PetStore::BusinessOp;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::BusinessOp_ptr
PetStore::BusinessOp::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        BusinessOp_ptr v = dynamic_cast<BusinessOp_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::BusinessOp_ptr
PetStore::BusinessOp::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        BusinessOp_ptr v = dynamic_cast<BusinessOp_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::BusinessOp* val = new OBProxy_PetStore::BusinessOp;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::BusinessOp_ptr
PetStore::BusinessOp::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::BusinessOp::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::BusinessOp_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::BusinessOp_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::BusinessOp_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::BusinessOp* _ob_obj = new OBProxy_PetStore::BusinessOp;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::BusinessOp::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::BusinessOp_ptr* v)
{
    any.replace(PetStore::_tc_BusinessOp, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::BusinessOp_ptr v)
{
    PetStore::BusinessOp_ptr val = PetStore::BusinessOp::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::BusinessOp_ptr& v)
{
    if(any.check_type(PetStore::_tc_BusinessOp))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::BusinessOp_ptr>(val)))
            {
                OBProxy_PetStore::BusinessOp* obj = new OBProxy_PetStore::BusinessOp;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::BusinessOp::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/AdvancedOp:1.0
//
const char* PetStore::AdvancedOp::ids_[] =
{
    "IDL:PetStore/AdvancedOp:1.0",
    0
};

void
OBDuplicate(PetStore::AdvancedOp_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::AdvancedOp_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::AdvancedOp_ptr
PetStore::AdvancedOp::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        AdvancedOp_ptr v = dynamic_cast<AdvancedOp_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::AdvancedOp* val = new OBProxy_PetStore::AdvancedOp;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::AdvancedOp_ptr
PetStore::AdvancedOp::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        AdvancedOp_ptr v = dynamic_cast<AdvancedOp_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::AdvancedOp_ptr
PetStore::AdvancedOp::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        AdvancedOp_ptr v = dynamic_cast<AdvancedOp_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::AdvancedOp* val = new OBProxy_PetStore::AdvancedOp;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::AdvancedOp_ptr
PetStore::AdvancedOp::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::AdvancedOp::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::AdvancedOp_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::AdvancedOp_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::AdvancedOp_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::AdvancedOp* _ob_obj = new OBProxy_PetStore::AdvancedOp;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::AdvancedOp::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::AdvancedOp_ptr* v)
{
    any.replace(PetStore::_tc_AdvancedOp, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::AdvancedOp_ptr v)
{
    PetStore::AdvancedOp_ptr val = PetStore::AdvancedOp::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::AdvancedOp_ptr& v)
{
    if(any.check_type(PetStore::_tc_AdvancedOp))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::AdvancedOp_ptr>(val)))
            {
                OBProxy_PetStore::AdvancedOp* obj = new OBProxy_PetStore::AdvancedOp;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::AdvancedOp::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/Sales:1.0
//
const char* PetStore::Sales::ids_[] =
{
    "IDL:PetStore/Sales:1.0",
    "IDL:omg.org/Components/Navigation:1.0",
    "IDL:omg.org/Components/Receptacles:1.0",
    "IDL:omg.org/Components/Events:1.0",
    "IDL:omg.org/Components/CCMObject:1.0",
    0
};

void
OBDuplicate(PetStore::Sales_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::Sales_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::Sales_ptr
PetStore::Sales::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Sales_ptr v = dynamic_cast<Sales_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::Sales* val = new OBProxy_PetStore::Sales;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::Sales_ptr
PetStore::Sales::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Sales_ptr v = dynamic_cast<Sales_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::Sales_ptr
PetStore::Sales::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Sales_ptr v = dynamic_cast<Sales_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::Sales* val = new OBProxy_PetStore::Sales;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::Sales_ptr
PetStore::Sales::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::Sales::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::Sales_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::Sales_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::Sales_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::Sales* _ob_obj = new OBProxy_PetStore::Sales;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::Sales::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::Sales_ptr* v)
{
    any.replace(PetStore::_tc_Sales, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::Sales_ptr v)
{
    PetStore::Sales_ptr val = PetStore::Sales::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::Sales_ptr& v)
{
    if(any.check_type(PetStore::_tc_Sales))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::Sales_ptr>(val)))
            {
                OBProxy_PetStore::Sales* obj = new OBProxy_PetStore::Sales;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::Sales::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/SalesHomeExplicit:1.0
//
const char* PetStore::SalesHomeExplicit::ids_[] =
{
    "IDL:PetStore/SalesHomeExplicit:1.0",
    "IDL:omg.org/Components/CCMHome:1.0",
    0
};

void
OBDuplicate(PetStore::SalesHomeExplicit_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::SalesHomeExplicit_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::SalesHomeExplicit_ptr
PetStore::SalesHomeExplicit::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        SalesHomeExplicit_ptr v = dynamic_cast<SalesHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::SalesHomeExplicit* val = new OBProxy_PetStore::SalesHomeExplicit;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::SalesHomeExplicit_ptr
PetStore::SalesHomeExplicit::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        SalesHomeExplicit_ptr v = dynamic_cast<SalesHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::SalesHomeExplicit_ptr
PetStore::SalesHomeExplicit::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        SalesHomeExplicit_ptr v = dynamic_cast<SalesHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::SalesHomeExplicit* val = new OBProxy_PetStore::SalesHomeExplicit;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::SalesHomeExplicit_ptr
PetStore::SalesHomeExplicit::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::SalesHomeExplicit::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::SalesHomeExplicit_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::SalesHomeExplicit_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::SalesHomeExplicit_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::SalesHomeExplicit* _ob_obj = new OBProxy_PetStore::SalesHomeExplicit;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::SalesHomeExplicit::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::SalesHomeExplicit_ptr* v)
{
    any.replace(PetStore::_tc_SalesHomeExplicit, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::SalesHomeExplicit_ptr v)
{
    PetStore::SalesHomeExplicit_ptr val = PetStore::SalesHomeExplicit::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::SalesHomeExplicit_ptr& v)
{
    if(any.check_type(PetStore::_tc_SalesHomeExplicit))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::SalesHomeExplicit_ptr>(val)))
            {
                OBProxy_PetStore::SalesHomeExplicit* obj = new OBProxy_PetStore::SalesHomeExplicit;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::SalesHomeExplicit::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/SalesHomeImplicit:1.0
//
const char* PetStore::SalesHomeImplicit::ids_[] =
{
    "IDL:PetStore/SalesHomeImplicit:1.0",
    "IDL:omg.org/Components/KeylessCCMHome:1.0",
    0
};

void
OBDuplicate(PetStore::SalesHomeImplicit_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::SalesHomeImplicit_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::SalesHomeImplicit_ptr
PetStore::SalesHomeImplicit::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        SalesHomeImplicit_ptr v = dynamic_cast<SalesHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::SalesHomeImplicit* val = new OBProxy_PetStore::SalesHomeImplicit;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::SalesHomeImplicit_ptr
PetStore::SalesHomeImplicit::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        SalesHomeImplicit_ptr v = dynamic_cast<SalesHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::SalesHomeImplicit_ptr
PetStore::SalesHomeImplicit::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        SalesHomeImplicit_ptr v = dynamic_cast<SalesHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::SalesHomeImplicit* val = new OBProxy_PetStore::SalesHomeImplicit;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::SalesHomeImplicit_ptr
PetStore::SalesHomeImplicit::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::SalesHomeImplicit::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::SalesHomeImplicit_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::SalesHomeImplicit_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::SalesHomeImplicit_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::SalesHomeImplicit* _ob_obj = new OBProxy_PetStore::SalesHomeImplicit;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::SalesHomeImplicit::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::SalesHomeImplicit_ptr* v)
{
    any.replace(PetStore::_tc_SalesHomeImplicit, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::SalesHomeImplicit_ptr v)
{
    PetStore::SalesHomeImplicit_ptr val = PetStore::SalesHomeImplicit::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::SalesHomeImplicit_ptr& v)
{
    if(any.check_type(PetStore::_tc_SalesHomeImplicit))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::SalesHomeImplicit_ptr>(val)))
            {
                OBProxy_PetStore::SalesHomeImplicit* obj = new OBProxy_PetStore::SalesHomeImplicit;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::SalesHomeImplicit::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/SalesHome:1.0
//
const char* PetStore::SalesHome::ids_[] =
{
    "IDL:PetStore/SalesHome:1.0",
    "IDL:omg.org/Components/CCMHome:1.0",
    "IDL:PetStore/SalesHomeExplicit:1.0",
    "IDL:omg.org/Components/KeylessCCMHome:1.0",
    "IDL:PetStore/SalesHomeImplicit:1.0",
    0
};

void
OBDuplicate(PetStore::SalesHome_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::SalesHome_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::SalesHome_ptr
PetStore::SalesHome::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        SalesHome_ptr v = dynamic_cast<SalesHome_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::SalesHome* val = new OBProxy_PetStore::SalesHome;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::SalesHome_ptr
PetStore::SalesHome::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        SalesHome_ptr v = dynamic_cast<SalesHome_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::SalesHome_ptr
PetStore::SalesHome::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        SalesHome_ptr v = dynamic_cast<SalesHome_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::SalesHome* val = new OBProxy_PetStore::SalesHome;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::SalesHome_ptr
PetStore::SalesHome::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::SalesHome::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::SalesHome_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::SalesHome_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::SalesHome_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::SalesHome* _ob_obj = new OBProxy_PetStore::SalesHome;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::SalesHome::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::SalesHome_ptr* v)
{
    any.replace(PetStore::_tc_SalesHome, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::SalesHome_ptr v)
{
    PetStore::SalesHome_ptr val = PetStore::SalesHome::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::SalesHome_ptr& v)
{
    if(any.check_type(PetStore::_tc_SalesHome))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::SalesHome_ptr>(val)))
            {
                OBProxy_PetStore::SalesHome* obj = new OBProxy_PetStore::SalesHome;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::SalesHome::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/OrderIndexInfo:1.0
//
#ifdef OB_CLEAR_MEM
PetStore::OrderIndexInfo::OrderIndexInfo()
{
    memset(&sub_total, 0, sizeof(sub_total));
}
#endif

PetStore::OrderIndexInfo::OrderIndexInfo(const OrderIndexInfo& _ob_a)
    : order_id(_ob_a.order_id),
      sub_total(_ob_a.sub_total)
{
}

PetStore::OrderIndexInfo&
PetStore::OrderIndexInfo::operator=(const OrderIndexInfo& _ob_a)
{
    if(this != &_ob_a)
    {
        order_id = _ob_a.order_id;
        sub_total = _ob_a.sub_total;
    }
    return *this;
}

void
PetStore::OrderIndexInfo::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    _ob_out -> write_string(order_id);
    _ob_out -> write_ulong(sub_total);
}

void
PetStore::OrderIndexInfo::_OB_unmarshal(OrderIndexInfo& _ob_v, OB::InputStreamImpl* _ob_in)
{
    _ob_v.order_id = _ob_in -> read_string();
    _ob_v.sub_total = _ob_in -> read_ulong();
}

void
operator<<=(CORBA::Any& any, PetStore::OrderIndexInfo* v)
{
    static const OB::Info< PetStore::OrderIndexInfo > info;
    any.replace(PetStore::_tc_OrderIndexInfo, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PetStore::OrderIndexInfo& v)
{
    any <<= new PetStore::OrderIndexInfo(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PetStore::OrderIndexInfo*& v)
{
    if(any.check_type(PetStore::_tc_OrderIndexInfo))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PetStore::OrderIndexInfo* val = new PetStore::OrderIndexInfo;
            PetStore::OrderIndexInfo::_OB_unmarshal(*val, _ob_in);
            (CORBA::Any&)any <<= val;
        }

        v = (PetStore::OrderIndexInfo*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/OrderIndexInfoList:1.0
//
void
PetStore::OBInfo_OrderIndexInfoList::marshal(const void* _ob_v, OB::OutputStreamImpl* _ob_out) const
{
    const ::PetStore::OrderIndexInfoList& _ob_seq = *(const ::PetStore::OrderIndexInfoList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_seq.length();
    _ob_out -> write_ulong(_ob_len0);
    ::PetStore::OrderIndexInfo const * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
    }
}

void
PetStore::OBInfo_OrderIndexInfoList::unmarshal(void* _ob_v, OB::InputStreamImpl* _ob_in) const
{
    ::PetStore::OrderIndexInfoList& _ob_seq = *(::PetStore::OrderIndexInfoList*)_ob_v;
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_seq.length(_ob_len0);
    ::PetStore::OrderIndexInfo * _ob_buf0 = _ob_seq.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        ::PetStore::OrderIndexInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
}

void
operator<<=(CORBA::Any& any, PetStore::OrderIndexInfoList* v)
{
    static const PetStore::OBInfo_OrderIndexInfoList info;
    any.replace(PetStore::_tc_OrderIndexInfoList, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PetStore::OrderIndexInfoList& v)
{
    any <<= new PetStore::OrderIndexInfoList(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PetStore::OrderIndexInfoList*& v)
{
    if(any.check_type(PetStore::_tc_OrderIndexInfoList))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PetStore::OrderIndexInfoList* val = new PetStore::OrderIndexInfoList;
            CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
            (*val).length(_ob_len0);
            ::PetStore::OrderIndexInfo * _ob_buf0 = (*val).get_buffer();
            for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
            {
                ::PetStore::OrderIndexInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
            }
            (CORBA::Any&)any <<= val;
        }

        v = (PetStore::OrderIndexInfoList*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/OrderRecord:1.0
//
#ifdef OB_CLEAR_MEM
PetStore::OrderRecord::OrderRecord()
{
    memset(&sub_total, 0, sizeof(sub_total));
}
#endif

PetStore::OrderRecord::OrderRecord(const OrderRecord& _ob_a)
    : order_index_list(_ob_a.order_index_list),
      sub_total(_ob_a.sub_total)
{
}

PetStore::OrderRecord&
PetStore::OrderRecord::operator=(const OrderRecord& _ob_a)
{
    if(this != &_ob_a)
    {
        order_index_list = _ob_a.order_index_list;
        sub_total = _ob_a.sub_total;
    }
    return *this;
}

void
PetStore::OrderRecord::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    CORBA::ULong _ob_len0 = order_index_list.length();
    _ob_out -> write_ulong(_ob_len0);
    OrderIndexInfo const * _ob_buf0 = order_index_list.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
    }
    _ob_out -> write_ulong(sub_total);
}

void
PetStore::OrderRecord::_OB_unmarshal(OrderRecord& _ob_v, OB::InputStreamImpl* _ob_in)
{
    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
    _ob_v.order_index_list.length(_ob_len0);
    OrderIndexInfo * _ob_buf0 = _ob_v.order_index_list.get_buffer();
    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
    {
        OrderIndexInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
    }
    _ob_v.sub_total = _ob_in -> read_ulong();
}

void
operator<<=(CORBA::Any& any, PetStore::OrderRecord* v)
{
    static const OB::Info< PetStore::OrderRecord > info;
    any.replace(PetStore::_tc_OrderRecord, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PetStore::OrderRecord& v)
{
    any <<= new PetStore::OrderRecord(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PetStore::OrderRecord*& v)
{
    if(any.check_type(PetStore::_tc_OrderRecord))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PetStore::OrderRecord* val = new PetStore::OrderRecord;
            PetStore::OrderRecord::_OB_unmarshal(*val, _ob_in);
            (CORBA::Any&)any <<= val;
        }

        v = (PetStore::OrderRecord*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/Manage:1.0
//
const char* PetStore::Manage::ids_[] =
{
    "IDL:PetStore/Manage:1.0",
    0
};

void
OBDuplicate(PetStore::Manage_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::Manage_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::Manage_ptr
PetStore::Manage::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Manage_ptr v = dynamic_cast<Manage_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::Manage* val = new OBProxy_PetStore::Manage;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::Manage_ptr
PetStore::Manage::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Manage_ptr v = dynamic_cast<Manage_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::Manage_ptr
PetStore::Manage::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Manage_ptr v = dynamic_cast<Manage_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::Manage* val = new OBProxy_PetStore::Manage;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::Manage_ptr
PetStore::Manage::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::Manage::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::Manage_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::Manage_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::Manage_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::Manage* _ob_obj = new OBProxy_PetStore::Manage;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::Manage::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::Manage_ptr* v)
{
    any.replace(PetStore::_tc_Manage, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::Manage_ptr v)
{
    PetStore::Manage_ptr val = PetStore::Manage::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::Manage_ptr& v)
{
    if(any.check_type(PetStore::_tc_Manage))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::Manage_ptr>(val)))
            {
                OBProxy_PetStore::Manage* obj = new OBProxy_PetStore::Manage;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::Manage::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/Manager:1.0
//
const char* PetStore::Manager::ids_[] =
{
    "IDL:PetStore/Manager:1.0",
    "IDL:PetStore/Manage:1.0",
    "IDL:omg.org/Components/Navigation:1.0",
    "IDL:omg.org/Components/Receptacles:1.0",
    "IDL:omg.org/Components/Events:1.0",
    "IDL:omg.org/Components/CCMObject:1.0",
    0
};

void
OBDuplicate(PetStore::Manager_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::Manager_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::Manager_ptr
PetStore::Manager::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Manager_ptr v = dynamic_cast<Manager_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::Manager* val = new OBProxy_PetStore::Manager;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::Manager_ptr
PetStore::Manager::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Manager_ptr v = dynamic_cast<Manager_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::Manager_ptr
PetStore::Manager::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Manager_ptr v = dynamic_cast<Manager_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::Manager* val = new OBProxy_PetStore::Manager;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::Manager_ptr
PetStore::Manager::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::Manager::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::Manager_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::Manager_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::Manager_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::Manager* _ob_obj = new OBProxy_PetStore::Manager;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::Manager::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::Manager_ptr* v)
{
    any.replace(PetStore::_tc_Manager, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::Manager_ptr v)
{
    PetStore::Manager_ptr val = PetStore::Manager::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::Manager_ptr& v)
{
    if(any.check_type(PetStore::_tc_Manager))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::Manager_ptr>(val)))
            {
                OBProxy_PetStore::Manager* obj = new OBProxy_PetStore::Manager;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::Manager::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/ManagerHomeExplicit:1.0
//
const char* PetStore::ManagerHomeExplicit::ids_[] =
{
    "IDL:PetStore/ManagerHomeExplicit:1.0",
    "IDL:omg.org/Components/CCMHome:1.0",
    0
};

void
OBDuplicate(PetStore::ManagerHomeExplicit_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::ManagerHomeExplicit_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::ManagerHomeExplicit_ptr
PetStore::ManagerHomeExplicit::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ManagerHomeExplicit_ptr v = dynamic_cast<ManagerHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::ManagerHomeExplicit* val = new OBProxy_PetStore::ManagerHomeExplicit;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::ManagerHomeExplicit_ptr
PetStore::ManagerHomeExplicit::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ManagerHomeExplicit_ptr v = dynamic_cast<ManagerHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::ManagerHomeExplicit_ptr
PetStore::ManagerHomeExplicit::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ManagerHomeExplicit_ptr v = dynamic_cast<ManagerHomeExplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::ManagerHomeExplicit* val = new OBProxy_PetStore::ManagerHomeExplicit;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::ManagerHomeExplicit_ptr
PetStore::ManagerHomeExplicit::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::ManagerHomeExplicit::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::ManagerHomeExplicit_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::ManagerHomeExplicit_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::ManagerHomeExplicit_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::ManagerHomeExplicit* _ob_obj = new OBProxy_PetStore::ManagerHomeExplicit;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::ManagerHomeExplicit::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::ManagerHomeExplicit_ptr* v)
{
    any.replace(PetStore::_tc_ManagerHomeExplicit, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::ManagerHomeExplicit_ptr v)
{
    PetStore::ManagerHomeExplicit_ptr val = PetStore::ManagerHomeExplicit::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::ManagerHomeExplicit_ptr& v)
{
    if(any.check_type(PetStore::_tc_ManagerHomeExplicit))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::ManagerHomeExplicit_ptr>(val)))
            {
                OBProxy_PetStore::ManagerHomeExplicit* obj = new OBProxy_PetStore::ManagerHomeExplicit;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::ManagerHomeExplicit::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/ManagerHomeImplicit:1.0
//
const char* PetStore::ManagerHomeImplicit::ids_[] =
{
    "IDL:PetStore/ManagerHomeImplicit:1.0",
    "IDL:omg.org/Components/KeylessCCMHome:1.0",
    0
};

void
OBDuplicate(PetStore::ManagerHomeImplicit_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::ManagerHomeImplicit_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::ManagerHomeImplicit_ptr
PetStore::ManagerHomeImplicit::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ManagerHomeImplicit_ptr v = dynamic_cast<ManagerHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::ManagerHomeImplicit* val = new OBProxy_PetStore::ManagerHomeImplicit;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::ManagerHomeImplicit_ptr
PetStore::ManagerHomeImplicit::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ManagerHomeImplicit_ptr v = dynamic_cast<ManagerHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::ManagerHomeImplicit_ptr
PetStore::ManagerHomeImplicit::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ManagerHomeImplicit_ptr v = dynamic_cast<ManagerHomeImplicit_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::ManagerHomeImplicit* val = new OBProxy_PetStore::ManagerHomeImplicit;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::ManagerHomeImplicit_ptr
PetStore::ManagerHomeImplicit::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::ManagerHomeImplicit::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::ManagerHomeImplicit_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::ManagerHomeImplicit_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::ManagerHomeImplicit_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::ManagerHomeImplicit* _ob_obj = new OBProxy_PetStore::ManagerHomeImplicit;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::ManagerHomeImplicit::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::ManagerHomeImplicit_ptr* v)
{
    any.replace(PetStore::_tc_ManagerHomeImplicit, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::ManagerHomeImplicit_ptr v)
{
    PetStore::ManagerHomeImplicit_ptr val = PetStore::ManagerHomeImplicit::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::ManagerHomeImplicit_ptr& v)
{
    if(any.check_type(PetStore::_tc_ManagerHomeImplicit))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::ManagerHomeImplicit_ptr>(val)))
            {
                OBProxy_PetStore::ManagerHomeImplicit* obj = new OBProxy_PetStore::ManagerHomeImplicit;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::ManagerHomeImplicit::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/ManagerHome:1.0
//
const char* PetStore::ManagerHome::ids_[] =
{
    "IDL:PetStore/ManagerHome:1.0",
    "IDL:omg.org/Components/CCMHome:1.0",
    "IDL:PetStore/ManagerHomeExplicit:1.0",
    "IDL:omg.org/Components/KeylessCCMHome:1.0",
    "IDL:PetStore/ManagerHomeImplicit:1.0",
    0
};

void
OBDuplicate(PetStore::ManagerHome_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PetStore::ManagerHome_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PetStore::ManagerHome_ptr
PetStore::ManagerHome::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ManagerHome_ptr v = dynamic_cast<ManagerHome_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PetStore::ManagerHome* val = new OBProxy_PetStore::ManagerHome;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PetStore::ManagerHome_ptr
PetStore::ManagerHome::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ManagerHome_ptr v = dynamic_cast<ManagerHome_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PetStore::ManagerHome_ptr
PetStore::ManagerHome::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        ManagerHome_ptr v = dynamic_cast<ManagerHome_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PetStore::ManagerHome* val = new OBProxy_PetStore::ManagerHome;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PetStore::ManagerHome_ptr
PetStore::ManagerHome::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PetStore::ManagerHome::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PetStore::ManagerHome_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PetStore::ManagerHome_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PetStore::ManagerHome_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PetStore::ManagerHome* _ob_obj = new OBProxy_PetStore::ManagerHome;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PetStore::ManagerHome::_nil();
}

void
operator<<=(CORBA::Any& any, PetStore::ManagerHome_ptr* v)
{
    any.replace(PetStore::_tc_ManagerHome, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PetStore::ManagerHome_ptr v)
{
    PetStore::ManagerHome_ptr val = PetStore::ManagerHome::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PetStore::ManagerHome_ptr& v)
{
    if(any.check_type(PetStore::_tc_ManagerHome))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PetStore::ManagerHome_ptr>(val)))
            {
                OBProxy_PetStore::ManagerHome* obj = new OBProxy_PetStore::ManagerHome;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PetStore::ManagerHome::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PetStore/Calculate:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::Calculate::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::Calculate;
}

const char**
OBProxy_PetStore::Calculate::_OB_ids() const
{
    return ::PetStore::Calculate::ids_;
}

//
// IDL:PetStore/Calculate/multiply:1.0
//
CORBA::ULong
OBProxy_PetStore::Calculate::multiply(CORBA::ULong _ob_a0,
                                      CORBA::ULong _ob_a1)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Calculate_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Calculate_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> multiply(_ob_a0, _ob_a1);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Calculate/add:1.0
//
CORBA::ULong
OBProxy_PetStore::Calculate::add(const ::PetStore::ItemPriceList& _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Calculate_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Calculate_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> add(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Pricer:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::Pricer::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::Pricer;
}

const char**
OBProxy_PetStore::Pricer::_OB_ids() const
{
    return ::PetStore::Pricer::ids_;
}

//
// IDL:PetStore/PricerHomeExplicit:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::PricerHomeExplicit::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::PricerHomeExplicit;
}

const char**
OBProxy_PetStore::PricerHomeExplicit::_OB_ids() const
{
    return ::PetStore::PricerHomeExplicit::ids_;
}

//
// IDL:PetStore/PricerHomeImplicit:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::PricerHomeImplicit::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::PricerHomeImplicit;
}

const char**
OBProxy_PetStore::PricerHomeImplicit::_OB_ids() const
{
    return ::PetStore::PricerHomeImplicit::ids_;
}

//
// IDL:PetStore/PricerHomeImplicit/create:1.0
//
::PetStore::Pricer_ptr
OBProxy_PetStore::PricerHomeImplicit::create()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::PricerHomeImplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::PricerHomeImplicit_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> create();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/PricerHome:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::PricerHome::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::PricerHome;
}

const char**
OBProxy_PetStore::PricerHome::_OB_ids() const
{
    return ::PetStore::PricerHome::ids_;
}

//
// IDL:PetStore/Product:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::Product::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::Product;
}

const char**
OBProxy_PetStore::Product::_OB_ids() const
{
    return ::PetStore::Product::ids_;
}

//
// IDL:PetStore/Product/product_id:1.0
//
::PetStore::KeyID*
OBProxy_PetStore::Product::product_id()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Product_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Product_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> product_id();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Product/product_name:1.0
//
char*
OBProxy_PetStore::Product::product_name()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Product_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Product_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> product_name();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

void
OBProxy_PetStore::Product::product_name(const char* _ob_a)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Product_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Product_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> product_name(_ob_a);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Product/product_picture:1.0
//
char*
OBProxy_PetStore::Product::product_picture()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Product_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Product_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> product_picture();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

void
OBProxy_PetStore::Product::product_picture(const char* _ob_a)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Product_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Product_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> product_picture(_ob_a);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Product/product_category:1.0
//
char*
OBProxy_PetStore::Product::product_category()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Product_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Product_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> product_category();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

void
OBProxy_PetStore::Product::product_category(const char* _ob_a)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Product_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Product_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> product_category(_ob_a);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Product/product_price:1.0
//
CORBA::ULong
OBProxy_PetStore::Product::product_price()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Product_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Product_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> product_price();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

void
OBProxy_PetStore::Product::product_price(CORBA::ULong _ob_a)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Product_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Product_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> product_price(_ob_a);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Product/product_qty:1.0
//
CORBA::ULong
OBProxy_PetStore::Product::product_qty()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Product_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Product_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> product_qty();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

void
OBProxy_PetStore::Product::product_qty(CORBA::ULong _ob_a)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Product_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Product_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> product_qty(_ob_a);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Product/product_description:1.0
//
char*
OBProxy_PetStore::Product::product_description()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Product_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Product_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> product_description();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

void
OBProxy_PetStore::Product::product_description(const char* _ob_a)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Product_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Product_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> product_description(_ob_a);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/ProductHomeExplicit:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::ProductHomeExplicit::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::ProductHomeExplicit;
}

const char**
OBProxy_PetStore::ProductHomeExplicit::_OB_ids() const
{
    return ::PetStore::ProductHomeExplicit::ids_;
}

//
// IDL:PetStore/ProductHomeExplicit/findByProductCategory:1.0
//
::PetStore::ProductList*
OBProxy_PetStore::ProductHomeExplicit::findByProductCategory(::PetStore::ProductCategory _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::ProductHomeExplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::ProductHomeExplicit_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> findByProductCategory(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/ProductHomeExplicit/findAllProducts:1.0
//
::PetStore::ProductList*
OBProxy_PetStore::ProductHomeExplicit::findAllProducts()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::ProductHomeExplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::ProductHomeExplicit_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> findAllProducts();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/ProductHomeImplicit:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::ProductHomeImplicit::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::ProductHomeImplicit;
}

const char**
OBProxy_PetStore::ProductHomeImplicit::_OB_ids() const
{
    return ::PetStore::ProductHomeImplicit::ids_;
}

//
// IDL:PetStore/ProductHomeImplicit/create:1.0
//
::PetStore::Product_ptr
OBProxy_PetStore::ProductHomeImplicit::create(::PetStore::KeyID* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::ProductHomeImplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::ProductHomeImplicit_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> create(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/ProductHomeImplicit/find_by_primary_key:1.0
//
::PetStore::Product_ptr
OBProxy_PetStore::ProductHomeImplicit::find_by_primary_key(::PetStore::KeyID* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::ProductHomeImplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::ProductHomeImplicit_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> find_by_primary_key(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/ProductHomeImplicit/remove:1.0
//
void
OBProxy_PetStore::ProductHomeImplicit::remove(::PetStore::KeyID* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::ProductHomeImplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::ProductHomeImplicit_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> remove(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/ProductHomeImplicit/get_primary_key:1.0
//
::PetStore::KeyID*
OBProxy_PetStore::ProductHomeImplicit::get_primary_key(::PetStore::Product_ptr _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::ProductHomeImplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::ProductHomeImplicit_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> get_primary_key(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/ProductHome:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::ProductHome::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::ProductHome;
}

const char**
OBProxy_PetStore::ProductHome::_OB_ids() const
{
    return ::PetStore::ProductHome::ids_;
}

//
// IDL:PetStore/OrderItem:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::OrderItem::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::OrderItem;
}

const char**
OBProxy_PetStore::OrderItem::_OB_ids() const
{
    return ::PetStore::OrderItem::ids_;
}

//
// IDL:PetStore/OrderItem/orderItem_id:1.0
//
::PetStore::KeyID*
OBProxy_PetStore::OrderItem::orderItem_id()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderItem_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderItem_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> orderItem_id();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/OrderItem/product_id:1.0
//
char*
OBProxy_PetStore::OrderItem::product_id()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderItem_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderItem_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> product_id();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

void
OBProxy_PetStore::OrderItem::product_id(const char* _ob_a)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderItem_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderItem_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> product_id(_ob_a);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/OrderItem/product_name:1.0
//
char*
OBProxy_PetStore::OrderItem::product_name()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderItem_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderItem_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> product_name();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

void
OBProxy_PetStore::OrderItem::product_name(const char* _ob_a)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderItem_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderItem_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> product_name(_ob_a);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/OrderItem/quantity:1.0
//
CORBA::ULong
OBProxy_PetStore::OrderItem::quantity()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderItem_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderItem_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> quantity();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

void
OBProxy_PetStore::OrderItem::quantity(CORBA::ULong _ob_a)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderItem_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderItem_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> quantity(_ob_a);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/OrderItem/unit_price:1.0
//
CORBA::ULong
OBProxy_PetStore::OrderItem::unit_price()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderItem_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderItem_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> unit_price();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

void
OBProxy_PetStore::OrderItem::unit_price(CORBA::ULong _ob_a)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderItem_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderItem_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> unit_price(_ob_a);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/OrderItem/sub_total:1.0
//
CORBA::ULong
OBProxy_PetStore::OrderItem::sub_total()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderItem_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderItem_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> sub_total();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

void
OBProxy_PetStore::OrderItem::sub_total(CORBA::ULong _ob_a)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderItem_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderItem_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> sub_total(_ob_a);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/OrderItemHomeExplicit:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::OrderItemHomeExplicit::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::OrderItemHomeExplicit;
}

const char**
OBProxy_PetStore::OrderItemHomeExplicit::_OB_ids() const
{
    return ::PetStore::OrderItemHomeExplicit::ids_;
}

//
// IDL:PetStore/OrderItemHomeImplicit:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::OrderItemHomeImplicit::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::OrderItemHomeImplicit;
}

const char**
OBProxy_PetStore::OrderItemHomeImplicit::_OB_ids() const
{
    return ::PetStore::OrderItemHomeImplicit::ids_;
}

//
// IDL:PetStore/OrderItemHomeImplicit/create:1.0
//
::PetStore::OrderItem_ptr
OBProxy_PetStore::OrderItemHomeImplicit::create(::PetStore::KeyID* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderItemHomeImplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderItemHomeImplicit_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> create(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/OrderItemHomeImplicit/find_by_primary_key:1.0
//
::PetStore::OrderItem_ptr
OBProxy_PetStore::OrderItemHomeImplicit::find_by_primary_key(::PetStore::KeyID* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderItemHomeImplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderItemHomeImplicit_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> find_by_primary_key(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/OrderItemHomeImplicit/remove:1.0
//
void
OBProxy_PetStore::OrderItemHomeImplicit::remove(::PetStore::KeyID* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderItemHomeImplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderItemHomeImplicit_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> remove(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/OrderItemHomeImplicit/get_primary_key:1.0
//
::PetStore::KeyID*
OBProxy_PetStore::OrderItemHomeImplicit::get_primary_key(::PetStore::OrderItem_ptr _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderItemHomeImplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderItemHomeImplicit_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> get_primary_key(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/OrderItemHome:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::OrderItemHome::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::OrderItemHome;
}

const char**
OBProxy_PetStore::OrderItemHome::_OB_ids() const
{
    return ::PetStore::OrderItemHome::ids_;
}

//
// IDL:PetStore/OrderOp:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::OrderOp::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::OrderOp;
}

const char**
OBProxy_PetStore::OrderOp::_OB_ids() const
{
    return ::PetStore::OrderOp::ids_;
}

//
// IDL:PetStore/OrderOp/addItem:1.0
//
::PetStore::KeyID*
OBProxy_PetStore::OrderOp::addItem(const char* _ob_a0,
                                   const char* _ob_a1,
                                   CORBA::ULong _ob_a2,
                                   CORBA::ULong _ob_a3,
                                   CORBA::ULong _ob_a4)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderOp_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderOp_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> addItem(_ob_a0, _ob_a1, _ob_a2, _ob_a3, _ob_a4);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/OrderOp/delItem:1.0
//
void
OBProxy_PetStore::OrderOp::delItem(::PetStore::KeyID* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderOp_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderOp_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> delItem(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Order:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::Order::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::Order;
}

const char**
OBProxy_PetStore::Order::_OB_ids() const
{
    return ::PetStore::Order::ids_;
}

//
// IDL:PetStore/Order/order_id:1.0
//
::PetStore::KeyID*
OBProxy_PetStore::Order::order_id()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Order_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Order_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> order_id();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Order/user_name:1.0
//
char*
OBProxy_PetStore::Order::user_name()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Order_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Order_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> user_name();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

void
OBProxy_PetStore::Order::user_name(const char* _ob_a)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Order_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Order_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> user_name(_ob_a);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Order/user_address:1.0
//
char*
OBProxy_PetStore::Order::user_address()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Order_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Order_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> user_address();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

void
OBProxy_PetStore::Order::user_address(const char* _ob_a)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Order_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Order_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> user_address(_ob_a);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Order/order_items:1.0
//
::PetStore::OrderItemInfoList*
OBProxy_PetStore::Order::order_items()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Order_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Order_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> order_items();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

void
OBProxy_PetStore::Order::order_items(const ::PetStore::OrderItemInfoList& _ob_a)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Order_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Order_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> order_items(_ob_a);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Order/order_time:1.0
//
char*
OBProxy_PetStore::Order::order_time()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Order_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Order_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> order_time();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

void
OBProxy_PetStore::Order::order_time(const char* _ob_a)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Order_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Order_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> order_time(_ob_a);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Order/sub_total:1.0
//
CORBA::ULong
OBProxy_PetStore::Order::sub_total()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Order_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Order_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> sub_total();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

void
OBProxy_PetStore::Order::sub_total(CORBA::ULong _ob_a)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Order_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Order_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> sub_total(_ob_a);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Order/connect_the_OrderItemHome:1.0
//
void
OBProxy_PetStore::Order::connect_the_OrderItemHome(::PetStore::OrderItemHome_ptr _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Order_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Order_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> connect_the_OrderItemHome(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Order/disconnect_the_OrderItemHome:1.0
//
::PetStore::OrderItemHome_ptr
OBProxy_PetStore::Order::disconnect_the_OrderItemHome()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Order_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Order_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> disconnect_the_OrderItemHome();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Order/get_connection_the_OrderItemHome:1.0
//
::PetStore::OrderItemHome_ptr
OBProxy_PetStore::Order::get_connection_the_OrderItemHome()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Order_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Order_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> get_connection_the_OrderItemHome();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/OrderHomeExplicit:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::OrderHomeExplicit::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::OrderHomeExplicit;
}

const char**
OBProxy_PetStore::OrderHomeExplicit::_OB_ids() const
{
    return ::PetStore::OrderHomeExplicit::ids_;
}

//
// IDL:PetStore/OrderHomeExplicit/findAllOrders:1.0
//
::PetStore::OrderList*
OBProxy_PetStore::OrderHomeExplicit::findAllOrders()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderHomeExplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderHomeExplicit_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> findAllOrders();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/OrderHomeImplicit:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::OrderHomeImplicit::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::OrderHomeImplicit;
}

const char**
OBProxy_PetStore::OrderHomeImplicit::_OB_ids() const
{
    return ::PetStore::OrderHomeImplicit::ids_;
}

//
// IDL:PetStore/OrderHomeImplicit/create:1.0
//
::PetStore::Order_ptr
OBProxy_PetStore::OrderHomeImplicit::create(::PetStore::KeyID* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderHomeImplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderHomeImplicit_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> create(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/OrderHomeImplicit/find_by_primary_key:1.0
//
::PetStore::Order_ptr
OBProxy_PetStore::OrderHomeImplicit::find_by_primary_key(::PetStore::KeyID* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderHomeImplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderHomeImplicit_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> find_by_primary_key(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/OrderHomeImplicit/remove:1.0
//
void
OBProxy_PetStore::OrderHomeImplicit::remove(::PetStore::KeyID* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderHomeImplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderHomeImplicit_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> remove(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/OrderHomeImplicit/get_primary_key:1.0
//
::PetStore::KeyID*
OBProxy_PetStore::OrderHomeImplicit::get_primary_key(::PetStore::Order_ptr _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::OrderHomeImplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::OrderHomeImplicit_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> get_primary_key(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/OrderHome:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::OrderHome::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::OrderHome;
}

const char**
OBProxy_PetStore::OrderHome::_OB_ids() const
{
    return ::PetStore::OrderHome::ids_;
}

//
// IDL:PetStore/ShoppingCart:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::ShoppingCart::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::ShoppingCart;
}

const char**
OBProxy_PetStore::ShoppingCart::_OB_ids() const
{
    return ::PetStore::ShoppingCart::ids_;
}

//
// IDL:PetStore/ShoppingCart/list:1.0
//
::PetStore::SalesRecord*
OBProxy_PetStore::ShoppingCart::list()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::ShoppingCart_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::ShoppingCart_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> list();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/ShoppingCart/addProduct:1.0
//
void
OBProxy_PetStore::ShoppingCart::addProduct(const ::PetStore::SalesRecordInfo& _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::ShoppingCart_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::ShoppingCart_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> addProduct(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/ShoppingCart/updateProductQty:1.0
//
void
OBProxy_PetStore::ShoppingCart::updateProductQty(const char* _ob_a0,
                                                 CORBA::ULong _ob_a1)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::ShoppingCart_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::ShoppingCart_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> updateProductQty(_ob_a0, _ob_a1);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/ShoppingCart/deleteProduct:1.0
//
void
OBProxy_PetStore::ShoppingCart::deleteProduct(const char* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::ShoppingCart_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::ShoppingCart_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> deleteProduct(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/ShoppingCart/clear:1.0
//
void
OBProxy_PetStore::ShoppingCart::clear()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::ShoppingCart_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::ShoppingCart_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> clear();
#if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
            volatile int i = 1;
            i++;
#endif
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Cart:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::Cart::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::Cart;
}

const char**
OBProxy_PetStore::Cart::_OB_ids() const
{
    return ::PetStore::Cart::ids_;
}

//
// IDL:PetStore/CartHomeExplicit:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::CartHomeExplicit::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::CartHomeExplicit;
}

const char**
OBProxy_PetStore::CartHomeExplicit::_OB_ids() const
{
    return ::PetStore::CartHomeExplicit::ids_;
}

//
// IDL:PetStore/CartHomeImplicit:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::CartHomeImplicit::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::CartHomeImplicit;
}

const char**
OBProxy_PetStore::CartHomeImplicit::_OB_ids() const
{
    return ::PetStore::CartHomeImplicit::ids_;
}

//
// IDL:PetStore/CartHomeImplicit/create:1.0
//
::PetStore::Cart_ptr
OBProxy_PetStore::CartHomeImplicit::create()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::CartHomeImplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::CartHomeImplicit_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> create();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/CartHome:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::CartHome::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::CartHome;
}

const char**
OBProxy_PetStore::CartHome::_OB_ids() const
{
    return ::PetStore::CartHome::ids_;
}

//
// IDL:PetStore/SalesReportConsumer:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::SalesReportConsumer::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::SalesReportConsumer;
}

const char**
OBProxy_PetStore::SalesReportConsumer::_OB_ids() const
{
    return ::PetStore::SalesReportConsumer::ids_;
}

//
// IDL:PetStore/SalesReportConsumer/push_SalesReportConsumer:1.0
//
void
OBProxy_PetStore::SalesReportConsumer::push_SalesReportConsumer(::PetStore::SalesReport* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::SalesReportConsumer_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::SalesReportConsumer_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> push_SalesReportConsumer(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/BusinessOp:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::BusinessOp::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::BusinessOp;
}

const char**
OBProxy_PetStore::BusinessOp::_OB_ids() const
{
    return ::PetStore::BusinessOp::ids_;
}

//
// IDL:PetStore/BusinessOp/listAllProducts:1.0
//
::PetStore::ProductIndexInfoList*
OBProxy_PetStore::BusinessOp::listAllProducts()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::BusinessOp_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::BusinessOp_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> listAllProducts();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/BusinessOp/listProductByCategory:1.0
//
::PetStore::ProductIndexInfoList*
OBProxy_PetStore::BusinessOp::listProductByCategory(::PetStore::ProductCategory _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::BusinessOp_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::BusinessOp_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> listProductByCategory(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/BusinessOp/listProduct:1.0
//
::PetStore::ProductInfo*
OBProxy_PetStore::BusinessOp::listProduct(const char* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::BusinessOp_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::BusinessOp_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> listProduct(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/BusinessOp/placeOrder:1.0
//
char*
OBProxy_PetStore::BusinessOp::placeOrder(const char* _ob_a0,
                                         const char* _ob_a1,
                                         ::PetStore::Cart_ptr _ob_a2)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::BusinessOp_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::BusinessOp_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> placeOrder(_ob_a0, _ob_a1, _ob_a2);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/BusinessOp/cancelOrder:1.0
//
void
OBProxy_PetStore::BusinessOp::cancelOrder(const char* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::BusinessOp_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::BusinessOp_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> cancelOrder(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/BusinessOp/listOrder:1.0
//
::PetStore::OrderInfo*
OBProxy_PetStore::BusinessOp::listOrder(const char* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::BusinessOp_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::BusinessOp_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> listOrder(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/AdvancedOp:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::AdvancedOp::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::AdvancedOp;
}

const char**
OBProxy_PetStore::AdvancedOp::_OB_ids() const
{
    return ::PetStore::AdvancedOp::ids_;
}

//
// IDL:PetStore/AdvancedOp/listAllOrders:1.0
//
::PetStore::OrderInfoList*
OBProxy_PetStore::AdvancedOp::listAllOrders()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::AdvancedOp_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::AdvancedOp_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> listAllOrders();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/AdvancedOp/addProduct:1.0
//
void
OBProxy_PetStore::AdvancedOp::addProduct(const ::PetStore::ProductInfo& _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::AdvancedOp_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::AdvancedOp_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> addProduct(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Sales:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::Sales::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::Sales;
}

const char**
OBProxy_PetStore::Sales::_OB_ids() const
{
    return ::PetStore::Sales::ids_;
}

//
// IDL:PetStore/Sales/provide_for_client:1.0
//
::PetStore::BusinessOp_ptr
OBProxy_PetStore::Sales::provide_for_client()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Sales_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Sales_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> provide_for_client();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Sales/provide_for_mgr:1.0
//
::PetStore::AdvancedOp_ptr
OBProxy_PetStore::Sales::provide_for_mgr()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Sales_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Sales_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> provide_for_mgr();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Sales/connect_the_pricer:1.0
//
void
OBProxy_PetStore::Sales::connect_the_pricer(::PetStore::Pricer_ptr _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Sales_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Sales_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> connect_the_pricer(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Sales/disconnect_the_pricer:1.0
//
::PetStore::Pricer_ptr
OBProxy_PetStore::Sales::disconnect_the_pricer()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Sales_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Sales_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> disconnect_the_pricer();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Sales/get_connection_the_pricer:1.0
//
::PetStore::Pricer_ptr
OBProxy_PetStore::Sales::get_connection_the_pricer()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Sales_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Sales_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> get_connection_the_pricer();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Sales/connect_product_home:1.0
//
void
OBProxy_PetStore::Sales::connect_product_home(::PetStore::ProductHome_ptr _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Sales_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Sales_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> connect_product_home(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Sales/disconnect_product_home:1.0
//
::PetStore::ProductHome_ptr
OBProxy_PetStore::Sales::disconnect_product_home()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Sales_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Sales_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> disconnect_product_home();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Sales/get_connection_product_home:1.0
//
::PetStore::ProductHome_ptr
OBProxy_PetStore::Sales::get_connection_product_home()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Sales_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Sales_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> get_connection_product_home();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Sales/connect_order_home:1.0
//
void
OBProxy_PetStore::Sales::connect_order_home(::PetStore::OrderHome_ptr _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Sales_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Sales_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> connect_order_home(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Sales/disconnect_order_home:1.0
//
::PetStore::OrderHome_ptr
OBProxy_PetStore::Sales::disconnect_order_home()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Sales_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Sales_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> disconnect_order_home();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Sales/get_connection_order_home:1.0
//
::PetStore::OrderHome_ptr
OBProxy_PetStore::Sales::get_connection_order_home()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Sales_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Sales_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> get_connection_order_home();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Sales/connect_report:1.0
//
void
OBProxy_PetStore::Sales::connect_report(::PetStore::SalesReportConsumer_ptr _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Sales_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Sales_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> connect_report(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Sales/disconnect_report:1.0
//
::PetStore::SalesReportConsumer_ptr
OBProxy_PetStore::Sales::disconnect_report()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Sales_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Sales_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> disconnect_report();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/SalesHomeExplicit:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::SalesHomeExplicit::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::SalesHomeExplicit;
}

const char**
OBProxy_PetStore::SalesHomeExplicit::_OB_ids() const
{
    return ::PetStore::SalesHomeExplicit::ids_;
}

//
// IDL:PetStore/SalesHomeImplicit:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::SalesHomeImplicit::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::SalesHomeImplicit;
}

const char**
OBProxy_PetStore::SalesHomeImplicit::_OB_ids() const
{
    return ::PetStore::SalesHomeImplicit::ids_;
}

//
// IDL:PetStore/SalesHomeImplicit/create:1.0
//
::PetStore::Sales_ptr
OBProxy_PetStore::SalesHomeImplicit::create()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::SalesHomeImplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::SalesHomeImplicit_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> create();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/SalesHome:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::SalesHome::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::SalesHome;
}

const char**
OBProxy_PetStore::SalesHome::_OB_ids() const
{
    return ::PetStore::SalesHome::ids_;
}

//
// IDL:PetStore/Manage:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::Manage::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::Manage;
}

const char**
OBProxy_PetStore::Manage::_OB_ids() const
{
    return ::PetStore::Manage::ids_;
}

//
// IDL:PetStore/Manage/addProduct:1.0
//
void
OBProxy_PetStore::Manage::addProduct(const ::PetStore::ProductInfo& _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Manage_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Manage_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> addProduct(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Manage/listAllOrders:1.0
//
::PetStore::OrderInfoList*
OBProxy_PetStore::Manage::listAllOrders()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Manage_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Manage_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> listAllOrders();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Manage/account:1.0
//
::PetStore::OrderRecord*
OBProxy_PetStore::Manage::account()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Manage_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Manage_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> account();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Manager:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::Manager::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::Manager;
}

const char**
OBProxy_PetStore::Manager::_OB_ids() const
{
    return ::PetStore::Manager::ids_;
}

//
// IDL:PetStore/Manager/connect_manage_op:1.0
//
void
OBProxy_PetStore::Manager::connect_manage_op(::PetStore::AdvancedOp_ptr _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Manager_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Manager_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> connect_manage_op(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Manager/disconnect_manage_op:1.0
//
::PetStore::AdvancedOp_ptr
OBProxy_PetStore::Manager::disconnect_manage_op()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Manager_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Manager_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> disconnect_manage_op();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Manager/get_connection_manage_op:1.0
//
::PetStore::AdvancedOp_ptr
OBProxy_PetStore::Manager::get_connection_manage_op()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Manager_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Manager_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> get_connection_manage_op();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Manager/connect_price_calculater:1.0
//
void
OBProxy_PetStore::Manager::connect_price_calculater(::PetStore::Calculate_ptr _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Manager_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Manager_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> connect_price_calculater(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Manager/disconnect_price_calculater:1.0
//
::PetStore::Calculate_ptr
OBProxy_PetStore::Manager::disconnect_price_calculater()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Manager_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Manager_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> disconnect_price_calculater();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Manager/get_connection_price_calculater:1.0
//
::PetStore::Calculate_ptr
OBProxy_PetStore::Manager::get_connection_price_calculater()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Manager_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Manager_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> get_connection_price_calculater();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/Manager/get_consumer_analyse:1.0
//
::PetStore::SalesReportConsumer_ptr
OBProxy_PetStore::Manager::get_consumer_analyse()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::Manager_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::Manager_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> get_consumer_analyse();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/ManagerHomeExplicit:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::ManagerHomeExplicit::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::ManagerHomeExplicit;
}

const char**
OBProxy_PetStore::ManagerHomeExplicit::_OB_ids() const
{
    return ::PetStore::ManagerHomeExplicit::ids_;
}

//
// IDL:PetStore/ManagerHomeImplicit:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::ManagerHomeImplicit::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::ManagerHomeImplicit;
}

const char**
OBProxy_PetStore::ManagerHomeImplicit::_OB_ids() const
{
    return ::PetStore::ManagerHomeImplicit::ids_;
}

//
// IDL:PetStore/ManagerHomeImplicit/create:1.0
//
::PetStore::Manager_ptr
OBProxy_PetStore::ManagerHomeImplicit::create()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PetStore::ManagerHomeImplicit_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PetStore::ManagerHomeImplicit_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> create();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PetStore/ManagerHome:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PetStore::ManagerHome::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PetStore::ManagerHome;
}

const char**
OBProxy_PetStore::ManagerHome::_OB_ids() const
{
    return ::PetStore::ManagerHome::ids_;
}

//
// IDL:PetStore/Calculate:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::Calculate_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::Calculate_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/Pricer:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::Pricer_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::Pricer_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/PricerHomeExplicit:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::PricerHomeExplicit_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::PricerHomeExplicit_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/PricerHomeImplicit:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::PricerHomeImplicit_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::PricerHomeImplicit_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/PricerHome:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::PricerHome_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::PricerHome_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/Product:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::Product_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::Product_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/ProductHomeExplicit:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::ProductHomeExplicit_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::ProductHomeExplicit_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/ProductHomeImplicit:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::ProductHomeImplicit_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::ProductHomeImplicit_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/ProductHome:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::ProductHome_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::ProductHome_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/OrderItem:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::OrderItem_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::OrderItem_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/OrderItemHomeExplicit:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::OrderItemHomeExplicit_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::OrderItemHomeExplicit_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/OrderItemHomeImplicit:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::OrderItemHomeImplicit_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::OrderItemHomeImplicit_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/OrderItemHome:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::OrderItemHome_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::OrderItemHome_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/OrderOp:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::OrderOp_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::OrderOp_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/Order:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::Order_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::Order_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/OrderHomeExplicit:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::OrderHomeExplicit_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::OrderHomeExplicit_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/OrderHomeImplicit:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::OrderHomeImplicit_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::OrderHomeImplicit_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/OrderHome:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::OrderHome_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::OrderHome_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/ShoppingCart:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::ShoppingCart_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::ShoppingCart_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/Cart:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::Cart_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::Cart_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/CartHomeExplicit:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::CartHomeExplicit_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::CartHomeExplicit_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/CartHomeImplicit:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::CartHomeImplicit_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::CartHomeImplicit_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/CartHome:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::CartHome_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::CartHome_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/SalesReportConsumer:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::SalesReportConsumer_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::SalesReportConsumer_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/BusinessOp:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::BusinessOp_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::BusinessOp_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/AdvancedOp:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::AdvancedOp_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::AdvancedOp_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/Sales:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::Sales_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::Sales_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/SalesHomeExplicit:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::SalesHomeExplicit_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::SalesHomeExplicit_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/SalesHomeImplicit:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::SalesHomeImplicit_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::SalesHomeImplicit_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/SalesHome:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::SalesHome_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::SalesHome_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/Manage:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::Manage_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::Manage_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/Manager:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::Manager_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::Manager_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/ManagerHomeExplicit:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::ManagerHomeExplicit_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::ManagerHomeExplicit_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/ManagerHomeImplicit:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::ManagerHomeImplicit_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::ManagerHomeImplicit_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/ManagerHome:1.0
//
void
OBDuplicate(OBStubImpl_PetStore::ManagerHome_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PetStore::ManagerHome_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PetStore/Calculate/multiply:1.0
//
CORBA::ULong
OBMarshalStubImpl_PetStore::Calculate::multiply(CORBA::ULong _ob_a0,
                                                CORBA::ULong _ob_a1)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("multiply", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_ulong(_ob_a0);
                _ob_out -> write_ulong(_ob_a1);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::ULong _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_ulong();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Calculate/add:1.0
//
CORBA::ULong
OBMarshalStubImpl_PetStore::Calculate::add(const ::PetStore::ItemPriceList& _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("add", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                CORBA::ULong _ob_len0 = _ob_a0.length();
                _ob_out -> write_ulong(_ob_len0);
                _ob_out -> write_ulong_array(_ob_a0.get_buffer(), _ob_len0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::ULong _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_ulong();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/PricerHomeImplicit/create:1.0
//
::PetStore::Pricer_ptr
OBMarshalStubImpl_PetStore::PricerHomeImplicit::create()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("create", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/CreateFailure:1.0") == 0)
                    {
                        ::Components::CreateFailure _ob_except;
                        ::Components::CreateFailure::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::Pricer_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Product/product_id:1.0
//
::PetStore::KeyID*
OBMarshalStubImpl_PetStore::Product::product_id()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_product_id", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            ::PetStore::KeyID_var _ob_r;
            try
            {
                OBUnmarshal(_ob_r.out(), _ob_in);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r._retn();
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Product/product_name:1.0
//
char*
OBMarshalStubImpl_PetStore::Product::product_name()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_product_name", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            CORBA::String_var _ob_r;
            try
            {
                _ob_r = _ob_in -> read_string();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r._retn();
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

void
OBMarshalStubImpl_PetStore::Product::product_name(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_set_product_name", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Product/product_picture:1.0
//
char*
OBMarshalStubImpl_PetStore::Product::product_picture()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_product_picture", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            CORBA::String_var _ob_r;
            try
            {
                _ob_r = _ob_in -> read_string();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r._retn();
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

void
OBMarshalStubImpl_PetStore::Product::product_picture(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_set_product_picture", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Product/product_category:1.0
//
char*
OBMarshalStubImpl_PetStore::Product::product_category()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_product_category", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            CORBA::String_var _ob_r;
            try
            {
                _ob_r = _ob_in -> read_string();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r._retn();
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

void
OBMarshalStubImpl_PetStore::Product::product_category(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_set_product_category", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Product/product_price:1.0
//
CORBA::ULong
OBMarshalStubImpl_PetStore::Product::product_price()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_product_price", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            CORBA::ULong _ob_r;
            try
            {
                _ob_r = _ob_in -> read_ulong();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

void
OBMarshalStubImpl_PetStore::Product::product_price(CORBA::ULong _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_set_product_price", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_ulong(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Product/product_qty:1.0
//
CORBA::ULong
OBMarshalStubImpl_PetStore::Product::product_qty()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_product_qty", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            CORBA::ULong _ob_r;
            try
            {
                _ob_r = _ob_in -> read_ulong();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

void
OBMarshalStubImpl_PetStore::Product::product_qty(CORBA::ULong _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_set_product_qty", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_ulong(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Product/product_description:1.0
//
char*
OBMarshalStubImpl_PetStore::Product::product_description()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_product_description", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            CORBA::String_var _ob_r;
            try
            {
                _ob_r = _ob_in -> read_string();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r._retn();
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

void
OBMarshalStubImpl_PetStore::Product::product_description(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_set_product_description", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/ProductHomeExplicit/findByProductCategory:1.0
//
::PetStore::ProductList*
OBMarshalStubImpl_PetStore::ProductHomeExplicit::findByProductCategory(::PetStore::ProductCategory _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("findByProductCategory", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_ulong((CORBA::ULong)_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::ProductList_var _ob_r;
                try
                {
                    _ob_r = new ::PetStore::ProductList;
                    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
                    _ob_r -> length(_ob_len0);
                    ::PetStore::Product_ptr * _ob_buf0 = _ob_r -> get_buffer();
                    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                    {
                        OBUnmarshal(_ob_buf0[_ob_i0], _ob_in);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/ProductHomeExplicit/findAllProducts:1.0
//
::PetStore::ProductList*
OBMarshalStubImpl_PetStore::ProductHomeExplicit::findAllProducts()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("findAllProducts", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::ProductList_var _ob_r;
                try
                {
                    _ob_r = new ::PetStore::ProductList;
                    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
                    _ob_r -> length(_ob_len0);
                    ::PetStore::Product_ptr * _ob_buf0 = _ob_r -> get_buffer();
                    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                    {
                        OBUnmarshal(_ob_buf0[_ob_i0], _ob_in);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/ProductHomeImplicit/create:1.0
//
::PetStore::Product_ptr
OBMarshalStubImpl_PetStore::ProductHomeImplicit::create(::PetStore::KeyID* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("create", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/CreateFailure:1.0") == 0)
                    {
                        ::Components::CreateFailure _ob_except;
                        ::Components::CreateFailure::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/DuplicateKeyValue:1.0") == 0)
                    {
                        ::Components::DuplicateKeyValue _ob_except;
                        ::Components::DuplicateKeyValue::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/InvalidKey:1.0") == 0)
                    {
                        ::Components::InvalidKey _ob_except;
                        ::Components::InvalidKey::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::Product_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/ProductHomeImplicit/find_by_primary_key:1.0
//
::PetStore::Product_ptr
OBMarshalStubImpl_PetStore::ProductHomeImplicit::find_by_primary_key(::PetStore::KeyID* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("find_by_primary_key", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/FinderFailure:1.0") == 0)
                    {
                        ::Components::FinderFailure _ob_except;
                        ::Components::FinderFailure::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/UnknownKeyValue:1.0") == 0)
                    {
                        ::Components::UnknownKeyValue _ob_except;
                        ::Components::UnknownKeyValue::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/InvalidKey:1.0") == 0)
                    {
                        ::Components::InvalidKey _ob_except;
                        ::Components::InvalidKey::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::Product_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/ProductHomeImplicit/remove:1.0
//
void
OBMarshalStubImpl_PetStore::ProductHomeImplicit::remove(::PetStore::KeyID* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("remove", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/RemoveFailure:1.0") == 0)
                    {
                        ::Components::RemoveFailure _ob_except;
                        ::Components::RemoveFailure::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/UnknownKeyValue:1.0") == 0)
                    {
                        ::Components::UnknownKeyValue _ob_except;
                        ::Components::UnknownKeyValue::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/InvalidKey:1.0") == 0)
                    {
                        ::Components::InvalidKey _ob_except;
                        ::Components::InvalidKey::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/ProductHomeImplicit/get_primary_key:1.0
//
::PetStore::KeyID*
OBMarshalStubImpl_PetStore::ProductHomeImplicit::get_primary_key(::PetStore::Product_ptr _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("get_primary_key", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::KeyID_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.out(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/OrderItem/orderItem_id:1.0
//
::PetStore::KeyID*
OBMarshalStubImpl_PetStore::OrderItem::orderItem_id()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_orderItem_id", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            ::PetStore::KeyID_var _ob_r;
            try
            {
                OBUnmarshal(_ob_r.out(), _ob_in);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r._retn();
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/OrderItem/product_id:1.0
//
char*
OBMarshalStubImpl_PetStore::OrderItem::product_id()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_product_id", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            CORBA::String_var _ob_r;
            try
            {
                _ob_r = _ob_in -> read_string();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r._retn();
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

void
OBMarshalStubImpl_PetStore::OrderItem::product_id(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_set_product_id", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/OrderItem/product_name:1.0
//
char*
OBMarshalStubImpl_PetStore::OrderItem::product_name()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_product_name", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            CORBA::String_var _ob_r;
            try
            {
                _ob_r = _ob_in -> read_string();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r._retn();
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

void
OBMarshalStubImpl_PetStore::OrderItem::product_name(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_set_product_name", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/OrderItem/quantity:1.0
//
CORBA::ULong
OBMarshalStubImpl_PetStore::OrderItem::quantity()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_quantity", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            CORBA::ULong _ob_r;
            try
            {
                _ob_r = _ob_in -> read_ulong();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

void
OBMarshalStubImpl_PetStore::OrderItem::quantity(CORBA::ULong _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_set_quantity", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_ulong(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/OrderItem/unit_price:1.0
//
CORBA::ULong
OBMarshalStubImpl_PetStore::OrderItem::unit_price()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_unit_price", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            CORBA::ULong _ob_r;
            try
            {
                _ob_r = _ob_in -> read_ulong();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

void
OBMarshalStubImpl_PetStore::OrderItem::unit_price(CORBA::ULong _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_set_unit_price", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_ulong(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/OrderItem/sub_total:1.0
//
CORBA::ULong
OBMarshalStubImpl_PetStore::OrderItem::sub_total()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_sub_total", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            CORBA::ULong _ob_r;
            try
            {
                _ob_r = _ob_in -> read_ulong();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

void
OBMarshalStubImpl_PetStore::OrderItem::sub_total(CORBA::ULong _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_set_sub_total", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_ulong(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/OrderItemHomeImplicit/create:1.0
//
::PetStore::OrderItem_ptr
OBMarshalStubImpl_PetStore::OrderItemHomeImplicit::create(::PetStore::KeyID* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("create", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/CreateFailure:1.0") == 0)
                    {
                        ::Components::CreateFailure _ob_except;
                        ::Components::CreateFailure::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/DuplicateKeyValue:1.0") == 0)
                    {
                        ::Components::DuplicateKeyValue _ob_except;
                        ::Components::DuplicateKeyValue::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/InvalidKey:1.0") == 0)
                    {
                        ::Components::InvalidKey _ob_except;
                        ::Components::InvalidKey::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::OrderItem_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/OrderItemHomeImplicit/find_by_primary_key:1.0
//
::PetStore::OrderItem_ptr
OBMarshalStubImpl_PetStore::OrderItemHomeImplicit::find_by_primary_key(::PetStore::KeyID* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("find_by_primary_key", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/FinderFailure:1.0") == 0)
                    {
                        ::Components::FinderFailure _ob_except;
                        ::Components::FinderFailure::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/UnknownKeyValue:1.0") == 0)
                    {
                        ::Components::UnknownKeyValue _ob_except;
                        ::Components::UnknownKeyValue::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/InvalidKey:1.0") == 0)
                    {
                        ::Components::InvalidKey _ob_except;
                        ::Components::InvalidKey::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::OrderItem_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/OrderItemHomeImplicit/remove:1.0
//
void
OBMarshalStubImpl_PetStore::OrderItemHomeImplicit::remove(::PetStore::KeyID* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("remove", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/RemoveFailure:1.0") == 0)
                    {
                        ::Components::RemoveFailure _ob_except;
                        ::Components::RemoveFailure::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/UnknownKeyValue:1.0") == 0)
                    {
                        ::Components::UnknownKeyValue _ob_except;
                        ::Components::UnknownKeyValue::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/InvalidKey:1.0") == 0)
                    {
                        ::Components::InvalidKey _ob_except;
                        ::Components::InvalidKey::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/OrderItemHomeImplicit/get_primary_key:1.0
//
::PetStore::KeyID*
OBMarshalStubImpl_PetStore::OrderItemHomeImplicit::get_primary_key(::PetStore::OrderItem_ptr _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("get_primary_key", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::KeyID_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.out(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/OrderOp/addItem:1.0
//
::PetStore::KeyID*
OBMarshalStubImpl_PetStore::OrderOp::addItem(const char* _ob_a0,
                                             const char* _ob_a1,
                                             CORBA::ULong _ob_a2,
                                             CORBA::ULong _ob_a3,
                                             CORBA::ULong _ob_a4)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("addItem", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
                _ob_out -> write_string(_ob_a1);
                _ob_out -> write_ulong(_ob_a2);
                _ob_out -> write_ulong(_ob_a3);
                _ob_out -> write_ulong(_ob_a4);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::KeyID_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.out(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/OrderOp/delItem:1.0
//
void
OBMarshalStubImpl_PetStore::OrderOp::delItem(::PetStore::KeyID* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("delItem", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Order/order_id:1.0
//
::PetStore::KeyID*
OBMarshalStubImpl_PetStore::Order::order_id()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_order_id", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            ::PetStore::KeyID_var _ob_r;
            try
            {
                OBUnmarshal(_ob_r.out(), _ob_in);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r._retn();
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Order/user_name:1.0
//
char*
OBMarshalStubImpl_PetStore::Order::user_name()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_user_name", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            CORBA::String_var _ob_r;
            try
            {
                _ob_r = _ob_in -> read_string();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r._retn();
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

void
OBMarshalStubImpl_PetStore::Order::user_name(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_set_user_name", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Order/user_address:1.0
//
char*
OBMarshalStubImpl_PetStore::Order::user_address()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_user_address", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            CORBA::String_var _ob_r;
            try
            {
                _ob_r = _ob_in -> read_string();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r._retn();
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

void
OBMarshalStubImpl_PetStore::Order::user_address(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_set_user_address", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Order/order_items:1.0
//
::PetStore::OrderItemInfoList*
OBMarshalStubImpl_PetStore::Order::order_items()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_order_items", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            ::PetStore::OrderItemInfoList_var _ob_r;
            try
            {
                _ob_r = new ::PetStore::OrderItemInfoList;
                CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
                _ob_r -> length(_ob_len0);
                ::PetStore::OrderItemInfo * _ob_buf0 = _ob_r -> get_buffer();
                for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                {
                    ::PetStore::OrderItemInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
                }
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r._retn();
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

void
OBMarshalStubImpl_PetStore::Order::order_items(const ::PetStore::OrderItemInfoList& _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_set_order_items", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                CORBA::ULong _ob_len0 = _ob_a0.length();
                _ob_out -> write_ulong(_ob_len0);
                ::PetStore::OrderItemInfo const * _ob_buf0 = _ob_a0.get_buffer();
                for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                {
                    _ob_buf0[_ob_i0]._OB_marshal(_ob_out);
                }
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Order/order_time:1.0
//
char*
OBMarshalStubImpl_PetStore::Order::order_time()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_order_time", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            CORBA::String_var _ob_r;
            try
            {
                _ob_r = _ob_in -> read_string();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r._retn();
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

void
OBMarshalStubImpl_PetStore::Order::order_time(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_set_order_time", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Order/sub_total:1.0
//
CORBA::ULong
OBMarshalStubImpl_PetStore::Order::sub_total()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_get_sub_total", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down);
            CORBA::ULong _ob_r;
            try
            {
                _ob_r = _ob_in -> read_ulong();
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_unmarshalEx(_ob_down, _ob_ex);
            }
            _OB_postUnmarshal(_ob_down);
            return _ob_r;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

void
OBMarshalStubImpl_PetStore::Order::sub_total(CORBA::ULong _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("_set_sub_total", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_ulong(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Order/connect_the_OrderItemHome:1.0
//
void
OBMarshalStubImpl_PetStore::Order::connect_the_OrderItemHome(::PetStore::OrderItemHome_ptr _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("connect_the_OrderItemHome", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/AlreadyConnected:1.0") == 0)
                    {
                        ::Components::AlreadyConnected _ob_except;
                        ::Components::AlreadyConnected::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/InvalidConnection:1.0") == 0)
                    {
                        ::Components::InvalidConnection _ob_except;
                        ::Components::InvalidConnection::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Order/disconnect_the_OrderItemHome:1.0
//
::PetStore::OrderItemHome_ptr
OBMarshalStubImpl_PetStore::Order::disconnect_the_OrderItemHome()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("disconnect_the_OrderItemHome", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/NoConnection:1.0") == 0)
                    {
                        ::Components::NoConnection _ob_except;
                        ::Components::NoConnection::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::OrderItemHome_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Order/get_connection_the_OrderItemHome:1.0
//
::PetStore::OrderItemHome_ptr
OBMarshalStubImpl_PetStore::Order::get_connection_the_OrderItemHome()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("get_connection_the_OrderItemHome", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::OrderItemHome_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/OrderHomeExplicit/findAllOrders:1.0
//
::PetStore::OrderList*
OBMarshalStubImpl_PetStore::OrderHomeExplicit::findAllOrders()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("findAllOrders", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::OrderList_var _ob_r;
                try
                {
                    _ob_r = new ::PetStore::OrderList;
                    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
                    _ob_r -> length(_ob_len0);
                    ::PetStore::Order_ptr * _ob_buf0 = _ob_r -> get_buffer();
                    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                    {
                        OBUnmarshal(_ob_buf0[_ob_i0], _ob_in);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/OrderHomeImplicit/create:1.0
//
::PetStore::Order_ptr
OBMarshalStubImpl_PetStore::OrderHomeImplicit::create(::PetStore::KeyID* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("create", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/CreateFailure:1.0") == 0)
                    {
                        ::Components::CreateFailure _ob_except;
                        ::Components::CreateFailure::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/DuplicateKeyValue:1.0") == 0)
                    {
                        ::Components::DuplicateKeyValue _ob_except;
                        ::Components::DuplicateKeyValue::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/InvalidKey:1.0") == 0)
                    {
                        ::Components::InvalidKey _ob_except;
                        ::Components::InvalidKey::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::Order_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/OrderHomeImplicit/find_by_primary_key:1.0
//
::PetStore::Order_ptr
OBMarshalStubImpl_PetStore::OrderHomeImplicit::find_by_primary_key(::PetStore::KeyID* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("find_by_primary_key", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/FinderFailure:1.0") == 0)
                    {
                        ::Components::FinderFailure _ob_except;
                        ::Components::FinderFailure::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/UnknownKeyValue:1.0") == 0)
                    {
                        ::Components::UnknownKeyValue _ob_except;
                        ::Components::UnknownKeyValue::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/InvalidKey:1.0") == 0)
                    {
                        ::Components::InvalidKey _ob_except;
                        ::Components::InvalidKey::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::Order_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/OrderHomeImplicit/remove:1.0
//
void
OBMarshalStubImpl_PetStore::OrderHomeImplicit::remove(::PetStore::KeyID* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("remove", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/RemoveFailure:1.0") == 0)
                    {
                        ::Components::RemoveFailure _ob_except;
                        ::Components::RemoveFailure::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/UnknownKeyValue:1.0") == 0)
                    {
                        ::Components::UnknownKeyValue _ob_except;
                        ::Components::UnknownKeyValue::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/InvalidKey:1.0") == 0)
                    {
                        ::Components::InvalidKey _ob_except;
                        ::Components::InvalidKey::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/OrderHomeImplicit/get_primary_key:1.0
//
::PetStore::KeyID*
OBMarshalStubImpl_PetStore::OrderHomeImplicit::get_primary_key(::PetStore::Order_ptr _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("get_primary_key", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::KeyID_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.out(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/ShoppingCart/list:1.0
//
::PetStore::SalesRecord*
OBMarshalStubImpl_PetStore::ShoppingCart::list()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("list", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::SalesRecord_var _ob_r;
                try
                {
                    _ob_r = new ::PetStore::SalesRecord;
                    ::PetStore::SalesRecord::_OB_unmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/ShoppingCart/addProduct:1.0
//
void
OBMarshalStubImpl_PetStore::ShoppingCart::addProduct(const ::PetStore::SalesRecordInfo& _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("addProduct", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_a0._OB_marshal(_ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/ShoppingCart/updateProductQty:1.0
//
void
OBMarshalStubImpl_PetStore::ShoppingCart::updateProductQty(const char* _ob_a0,
                                                           CORBA::ULong _ob_a1)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("updateProductQty", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
                _ob_out -> write_ulong(_ob_a1);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/ShoppingCart/deleteProduct:1.0
//
void
OBMarshalStubImpl_PetStore::ShoppingCart::deleteProduct(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("deleteProduct", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/ShoppingCart/clear:1.0
//
void
OBMarshalStubImpl_PetStore::ShoppingCart::clear()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("clear", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/CartHomeImplicit/create:1.0
//
::PetStore::Cart_ptr
OBMarshalStubImpl_PetStore::CartHomeImplicit::create()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("create", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/CreateFailure:1.0") == 0)
                    {
                        ::Components::CreateFailure _ob_except;
                        ::Components::CreateFailure::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::Cart_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/SalesReportConsumer/push_SalesReportConsumer:1.0
//
void
OBMarshalStubImpl_PetStore::SalesReportConsumer::push_SalesReportConsumer(::PetStore::SalesReport* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("push_SalesReportConsumer", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/BusinessOp/listAllProducts:1.0
//
::PetStore::ProductIndexInfoList*
OBMarshalStubImpl_PetStore::BusinessOp::listAllProducts()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("listAllProducts", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::ProductIndexInfoList_var _ob_r;
                try
                {
                    _ob_r = new ::PetStore::ProductIndexInfoList;
                    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
                    _ob_r -> length(_ob_len0);
                    ::PetStore::ProductIndexInfo * _ob_buf0 = _ob_r -> get_buffer();
                    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                    {
                        ::PetStore::ProductIndexInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/BusinessOp/listProductByCategory:1.0
//
::PetStore::ProductIndexInfoList*
OBMarshalStubImpl_PetStore::BusinessOp::listProductByCategory(::PetStore::ProductCategory _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("listProductByCategory", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_ulong((CORBA::ULong)_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::ProductIndexInfoList_var _ob_r;
                try
                {
                    _ob_r = new ::PetStore::ProductIndexInfoList;
                    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
                    _ob_r -> length(_ob_len0);
                    ::PetStore::ProductIndexInfo * _ob_buf0 = _ob_r -> get_buffer();
                    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                    {
                        ::PetStore::ProductIndexInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/BusinessOp/listProduct:1.0
//
::PetStore::ProductInfo*
OBMarshalStubImpl_PetStore::BusinessOp::listProduct(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("listProduct", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::ProductInfo_var _ob_r;
                try
                {
                    _ob_r = new ::PetStore::ProductInfo;
                    ::PetStore::ProductInfo::_OB_unmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/BusinessOp/placeOrder:1.0
//
char*
OBMarshalStubImpl_PetStore::BusinessOp::placeOrder(const char* _ob_a0,
                                                   const char* _ob_a1,
                                                   ::PetStore::Cart_ptr _ob_a2)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("placeOrder", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
                _ob_out -> write_string(_ob_a1);
                OBMarshal(_ob_a2, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::String_var _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_string();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/BusinessOp/cancelOrder:1.0
//
void
OBMarshalStubImpl_PetStore::BusinessOp::cancelOrder(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("cancelOrder", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/BusinessOp/listOrder:1.0
//
::PetStore::OrderInfo*
OBMarshalStubImpl_PetStore::BusinessOp::listOrder(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("listOrder", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::OrderInfo_var _ob_r;
                try
                {
                    _ob_r = new ::PetStore::OrderInfo;
                    ::PetStore::OrderInfo::_OB_unmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/AdvancedOp/listAllOrders:1.0
//
::PetStore::OrderInfoList*
OBMarshalStubImpl_PetStore::AdvancedOp::listAllOrders()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("listAllOrders", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::OrderInfoList_var _ob_r;
                try
                {
                    _ob_r = new ::PetStore::OrderInfoList;
                    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
                    _ob_r -> length(_ob_len0);
                    ::PetStore::OrderInfo * _ob_buf0 = _ob_r -> get_buffer();
                    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                    {
                        ::PetStore::OrderInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/AdvancedOp/addProduct:1.0
//
void
OBMarshalStubImpl_PetStore::AdvancedOp::addProduct(const ::PetStore::ProductInfo& _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("addProduct", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_a0._OB_marshal(_ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Sales/provide_for_client:1.0
//
::PetStore::BusinessOp_ptr
OBMarshalStubImpl_PetStore::Sales::provide_for_client()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("provide_for_client", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::BusinessOp_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Sales/provide_for_mgr:1.0
//
::PetStore::AdvancedOp_ptr
OBMarshalStubImpl_PetStore::Sales::provide_for_mgr()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("provide_for_mgr", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::AdvancedOp_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Sales/connect_the_pricer:1.0
//
void
OBMarshalStubImpl_PetStore::Sales::connect_the_pricer(::PetStore::Pricer_ptr _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("connect_the_pricer", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/AlreadyConnected:1.0") == 0)
                    {
                        ::Components::AlreadyConnected _ob_except;
                        ::Components::AlreadyConnected::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/InvalidConnection:1.0") == 0)
                    {
                        ::Components::InvalidConnection _ob_except;
                        ::Components::InvalidConnection::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Sales/disconnect_the_pricer:1.0
//
::PetStore::Pricer_ptr
OBMarshalStubImpl_PetStore::Sales::disconnect_the_pricer()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("disconnect_the_pricer", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/NoConnection:1.0") == 0)
                    {
                        ::Components::NoConnection _ob_except;
                        ::Components::NoConnection::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::Pricer_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Sales/get_connection_the_pricer:1.0
//
::PetStore::Pricer_ptr
OBMarshalStubImpl_PetStore::Sales::get_connection_the_pricer()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("get_connection_the_pricer", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::Pricer_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Sales/connect_product_home:1.0
//
void
OBMarshalStubImpl_PetStore::Sales::connect_product_home(::PetStore::ProductHome_ptr _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("connect_product_home", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/AlreadyConnected:1.0") == 0)
                    {
                        ::Components::AlreadyConnected _ob_except;
                        ::Components::AlreadyConnected::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/InvalidConnection:1.0") == 0)
                    {
                        ::Components::InvalidConnection _ob_except;
                        ::Components::InvalidConnection::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Sales/disconnect_product_home:1.0
//
::PetStore::ProductHome_ptr
OBMarshalStubImpl_PetStore::Sales::disconnect_product_home()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("disconnect_product_home", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/NoConnection:1.0") == 0)
                    {
                        ::Components::NoConnection _ob_except;
                        ::Components::NoConnection::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::ProductHome_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Sales/get_connection_product_home:1.0
//
::PetStore::ProductHome_ptr
OBMarshalStubImpl_PetStore::Sales::get_connection_product_home()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("get_connection_product_home", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::ProductHome_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Sales/connect_order_home:1.0
//
void
OBMarshalStubImpl_PetStore::Sales::connect_order_home(::PetStore::OrderHome_ptr _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("connect_order_home", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/AlreadyConnected:1.0") == 0)
                    {
                        ::Components::AlreadyConnected _ob_except;
                        ::Components::AlreadyConnected::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/InvalidConnection:1.0") == 0)
                    {
                        ::Components::InvalidConnection _ob_except;
                        ::Components::InvalidConnection::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Sales/disconnect_order_home:1.0
//
::PetStore::OrderHome_ptr
OBMarshalStubImpl_PetStore::Sales::disconnect_order_home()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("disconnect_order_home", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/NoConnection:1.0") == 0)
                    {
                        ::Components::NoConnection _ob_except;
                        ::Components::NoConnection::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::OrderHome_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Sales/get_connection_order_home:1.0
//
::PetStore::OrderHome_ptr
OBMarshalStubImpl_PetStore::Sales::get_connection_order_home()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("get_connection_order_home", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::OrderHome_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Sales/connect_report:1.0
//
void
OBMarshalStubImpl_PetStore::Sales::connect_report(::PetStore::SalesReportConsumer_ptr _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("connect_report", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/AlreadyConnected:1.0") == 0)
                    {
                        ::Components::AlreadyConnected _ob_except;
                        ::Components::AlreadyConnected::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Sales/disconnect_report:1.0
//
::PetStore::SalesReportConsumer_ptr
OBMarshalStubImpl_PetStore::Sales::disconnect_report()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("disconnect_report", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/NoConnection:1.0") == 0)
                    {
                        ::Components::NoConnection _ob_except;
                        ::Components::NoConnection::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::SalesReportConsumer_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/SalesHomeImplicit/create:1.0
//
::PetStore::Sales_ptr
OBMarshalStubImpl_PetStore::SalesHomeImplicit::create()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("create", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/CreateFailure:1.0") == 0)
                    {
                        ::Components::CreateFailure _ob_except;
                        ::Components::CreateFailure::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::Sales_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Manage/addProduct:1.0
//
void
OBMarshalStubImpl_PetStore::Manage::addProduct(const ::PetStore::ProductInfo& _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("addProduct", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_a0._OB_marshal(_ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Manage/listAllOrders:1.0
//
::PetStore::OrderInfoList*
OBMarshalStubImpl_PetStore::Manage::listAllOrders()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("listAllOrders", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::OrderInfoList_var _ob_r;
                try
                {
                    _ob_r = new ::PetStore::OrderInfoList;
                    CORBA::ULong _ob_len0 = _ob_in -> read_ulong();
                    _ob_r -> length(_ob_len0);
                    ::PetStore::OrderInfo * _ob_buf0 = _ob_r -> get_buffer();
                    for(CORBA::ULong _ob_i0 = 0 ; _ob_i0 < _ob_len0 ; _ob_i0++)
                    {
                        ::PetStore::OrderInfo::_OB_unmarshal(_ob_buf0[_ob_i0], _ob_in);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Manage/account:1.0
//
::PetStore::OrderRecord*
OBMarshalStubImpl_PetStore::Manage::account()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("account", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::OrderRecord_var _ob_r;
                try
                {
                    _ob_r = new ::PetStore::OrderRecord;
                    ::PetStore::OrderRecord::_OB_unmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Manager/connect_manage_op:1.0
//
void
OBMarshalStubImpl_PetStore::Manager::connect_manage_op(::PetStore::AdvancedOp_ptr _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("connect_manage_op", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/AlreadyConnected:1.0") == 0)
                    {
                        ::Components::AlreadyConnected _ob_except;
                        ::Components::AlreadyConnected::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/InvalidConnection:1.0") == 0)
                    {
                        ::Components::InvalidConnection _ob_except;
                        ::Components::InvalidConnection::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Manager/disconnect_manage_op:1.0
//
::PetStore::AdvancedOp_ptr
OBMarshalStubImpl_PetStore::Manager::disconnect_manage_op()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("disconnect_manage_op", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/NoConnection:1.0") == 0)
                    {
                        ::Components::NoConnection _ob_except;
                        ::Components::NoConnection::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::AdvancedOp_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Manager/get_connection_manage_op:1.0
//
::PetStore::AdvancedOp_ptr
OBMarshalStubImpl_PetStore::Manager::get_connection_manage_op()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("get_connection_manage_op", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::AdvancedOp_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Manager/connect_price_calculater:1.0
//
void
OBMarshalStubImpl_PetStore::Manager::connect_price_calculater(::PetStore::Calculate_ptr _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("connect_price_calculater", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/AlreadyConnected:1.0") == 0)
                    {
                        ::Components::AlreadyConnected _ob_except;
                        ::Components::AlreadyConnected::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:omg.org/Components/InvalidConnection:1.0") == 0)
                    {
                        ::Components::InvalidConnection _ob_except;
                        ::Components::InvalidConnection::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Manager/disconnect_price_calculater:1.0
//
::PetStore::Calculate_ptr
OBMarshalStubImpl_PetStore::Manager::disconnect_price_calculater()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("disconnect_price_calculater", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/NoConnection:1.0") == 0)
                    {
                        ::Components::NoConnection _ob_except;
                        ::Components::NoConnection::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::Calculate_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Manager/get_connection_price_calculater:1.0
//
::PetStore::Calculate_ptr
OBMarshalStubImpl_PetStore::Manager::get_connection_price_calculater()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("get_connection_price_calculater", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::Calculate_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/Manager/get_consumer_analyse:1.0
//
::PetStore::SalesReportConsumer_ptr
OBMarshalStubImpl_PetStore::Manager::get_consumer_analyse()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("get_consumer_analyse", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::SalesReportConsumer_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/ManagerHomeImplicit/create:1.0
//
::PetStore::Manager_ptr
OBMarshalStubImpl_PetStore::ManagerHomeImplicit::create()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("create", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:omg.org/Components/CreateFailure:1.0") == 0)
                    {
                        ::Components::CreateFailure _ob_except;
                        ::Components::CreateFailure::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::PetStore::Manager_var _ob_r;
                try
                {
                    OBUnmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PetStore/KeyID:1.0
//
OBV_PetStore::KeyID::KeyID()
{
}

OBV_PetStore::KeyID::KeyID(const char* _ob_id)
    : _obv_id_(_ob_id)
{
}

OBV_PetStore::KeyID::~KeyID()
{
}

CORBA::ValueBase*
OBV_PetStore::KeyID::_copy_value()
{
    return new KeyID(id());
}

//
// IDL:PetStore/KeyID/id:1.0
//
void
OBV_PetStore::KeyID::id(char* _ob_a)
{
    _obv_id_ = _ob_a;
}

void
OBV_PetStore::KeyID::id(const char* _ob_a)
{
    _obv_id_ = _ob_a;
}

void
OBV_PetStore::KeyID::id(const CORBA::String_var& _ob_a)
{
    _obv_id_ = _ob_a;
}

const char*
OBV_PetStore::KeyID::id() const
{
    return _obv_id_.in();
}

//
// IDL:PetStore/SalesReport:1.0
//
OBV_PetStore::SalesReport::SalesReport()
{
#ifdef OB_CLEAR_MEM
    memset(&_obv_sub_total_, 0, sizeof(_obv_sub_total_));
#endif
}

OBV_PetStore::SalesReport::SalesReport(CORBA::ULong _ob_sub_total)
    : _obv_sub_total_(_ob_sub_total)
{
}

OBV_PetStore::SalesReport::~SalesReport()
{
}

CORBA::ValueBase*
OBV_PetStore::SalesReport::_copy_value()
{
    return new SalesReport(sub_total());
}

//
// IDL:PetStore/SalesReport/sub_total:1.0
//
void
OBV_PetStore::SalesReport::sub_total(CORBA::ULong _ob_a)
{
    _obv_sub_total_ = _ob_a;
}

CORBA::ULong
OBV_PetStore::SalesReport::sub_total() const
{
    return _obv_sub_total_;
}
