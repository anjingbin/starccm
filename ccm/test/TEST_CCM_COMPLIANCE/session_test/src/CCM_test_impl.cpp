// **********************************************************************
//
// Generated by the CIDL Translator
//
// Copyright (c) 2001-2004
// StarMiddleware Group
// www.StarMiddleware.net
//
// All Rights Reserved
//
// Author: Huang Jie        huangjie@email.com
// Author: Chang Junsheng   cjs7908@163.com
// Author: Zhen Xianrong
//
// **********************************************************************

#include <CORBA.h>
#include <CCM_test_impl.h>
#include <fstream>

#ifdef HAVE_STD_IOSTREAM
using namespace std;
#endif

void 
slog(const char* slog)
{
	ofstream f("session_test.out",ios_base::out | ios_base::app );
	if(!f) 
	{
	      cerr<<"can't open log file!\n";
              return; 
	}
	f<<slog<<"\n";	
	f.close();
}

Test::PersonImpl::CCM_Person_impl::CCM_Person_impl()
{
}

Test::PersonImpl::CCM_Person_impl::~CCM_Person_impl()
{
}

void
Test::PersonImpl::CCM_Person_impl::configuration_complete()
{
}

void
Test::PersonImpl::CCM_Person_impl::set_session_context(Components::SessionContext* ctx)
    throw(Components::CCMException,
          CORBA::SystemException)
{
    #ifdef TAO
    ctx_ = Test::CCM_Person_Context::_duplicate(dynamic_cast<Test::CCM_Person_Context*>(ctx));
    #else
    ctx_ = Test::CCM_Person_Context::_narrow(ctx);
    #endif
}

void
Test::PersonImpl::CCM_Person_impl::ccm_activate()
    throw(Components::CCMException,
          CORBA::SystemException)
{
}

void
Test::PersonImpl::CCM_Person_impl::ccm_passivate()
    throw(Components::CCMException,
          CORBA::SystemException)
{
}

void
Test::PersonImpl::CCM_Person_impl::ccm_remove()
    throw(Components::CCMException,
          CORBA::SystemException)
{
}


char*
Test::PersonImpl::CCM_Person_impl::sayHello()
    throw(CORBA::SystemException)
{
    ofstream f("session_test.out");
    f.close();
    bool b=FALSE;
    
    slog("\n*********   test session  begin! ********************");
    cout<<"\n*********   test session  begin! ********************\n";
    
    
    /************  test interface CCMContext   *********************/ 
    
    slog("\ntest get_CCM_home");
    cout<<"\ntest get_CCM_home\n";
    
    b=TRUE; 
    Components::CCMHome_var home;  
     
    try
    {    	   
    	   home = ctx_ -> get_CCM_home();
    	   if(CORBA::is_nil(home))
    	   {
    	      slog("home is nill");
    	      b=FALSE;
    	  }
    	  
    	   home = Test::PersonHome::_narrow(home);
    	   if(CORBA::is_nil(home))
    	   {
    	      slog("get_CCM_home is not completed!");
    	       b=FALSE;
    	   }
    }
    catch(CORBA::Exception& ex)
    {
    	slog("get_CCM_home is not completed!");
    	 b=FALSE;
    	cerr<< ex <<endl;   	
    };
    
    if(b)
    {
       slog("get_CCM_home is OK!");
       cout<<"get_CCM_home is OK!\n";
    }
       
       
   /********************    tst methord wothout tranction ***************/  
    slog("\nnext test method about transaction under the state without transaction");
    cout<<"\nnext test method about transaction under the state without transaction\n";
 
 
    /*********************  test get_user_transaction **********************/
 
    slog("\ntest get_user_transaction");
    cout<<"\ntest get_user_transaction\n";
    
    b = TRUE;
    try
    {
	Components::Transaction::UserTransaction_var tras = ctx_ -> get_user_transaction();
    }
    catch(Components::IllegalState& ex)
    {
    	slog("get_user_transaction is not well!");
    	b=FALSE;
    	cerr<< ex <<endl;   	
    }    
    catch(CORBA::Exception& ex)
    {
    	slog("get_user_transaction is not completed!");
    	b=FALSE;
    	cerr<< ex <<endl;   	
    };
    
    if(b)
    {
       slog("get_user_transaction is OK!");
       cout<<"get_user_transaction is OK!\n";
    }
       
       
   /******************   test is_caller_in_role **************************/  
       
    slog("\ntest is_caller_in_role");
    cout<<"\ntest is_caller_in_role\n";
    
    b=TRUE;
    try
    {
    	   if(ctx_ -> is_caller_in_role(""))
    	   {
    	      slog("is_caller_in_role is not completed well!"); 
    	      cout<<"is_caller_in_role is not completed well!\n";	         	     
    	      b=FALSE;
    	   }
    }   
    catch(CORBA::Exception& ex)
    {
    	slog("Exception is not right!");
    	b=FALSE;
    	cerr<< ex <<endl;   	
    };
    
    if(b)
    {
       slog("is_caller_in_role is OK!");
       cout<<"is_caller_in_role is OK!\n";
    }
       
       
    
    /*********************   test set_rollback_only ******************/
    
    slog("\ntest set_rollback_only"); 
    cout<< "\ntest set_rollback_only\n";
    
    b = false;  
    //because therer is not transaction,next should be exception
    try
    {
    	   ctx_ -> set_rollback_only();         	     
    }
    catch(Components::IllegalState& ex)
    {
        b = true;
    	slog("get_rollback_only is good!");    	
    	cerr<< ex <<endl;   	
    }
    catch(CORBA::Exception& ex)
    {
    	slog("Exception is not right!");    	
    	cerr<< ex <<endl;   	
    };
     
    if(!b)
    {  
       slog("there is no IllegalState excpeption");
       cout<<"there is no IllegalState excpeption\n";
    }
    
         
     /**********   test interface Sessioncontext   ******************/
 /*    
    slog("\ntest interface Sessioncontext");
    cout<<"\ntest interface Sessioncontext\n";
    
    slog("\ntest get_CCM_object");
    cout<<"\ntest get_CCM_object"\n;
    
    try
    {
	    CORBA::Object_var obj;	
	     
	    obj = ctx_ -> get_CCM_object();   
          
	    Test::Person_var person;
	    person = Test::Person::_narrow(obj);  
	    if(CORBA::is_nil(person))
    	       slog("get_CCM_object is not completed!"); 	    
	    else if (person -> same_component (this))
	       slog("get_CCM_object is good!");
	    else
	       slog("get_CCM_object is not good!");
    }
    catch(CORBA::Exception& ex)
    {
    	slog("get_CCM_object is not completed!");
    	cerr<< ex <<endl;   	
    };
 */   
    
    
    slog("\ntest interface Sessioncontext2");
    cout<<"\ntest interface Sessioncontext2\n";
     
    slog("\ntest create_ref");
    cout<<"\ntest create_ref\n";
  
    CORBA::Object_var obj;	
    obj = ctx_ -> create_ref("IDL:Test/Hello:1.0"); 
    Test::Hello_var hello;
    hello = Test::Hello::_narrow(obj);
    if(CORBA::is_nil(hello))
    	       slog("create_ref is not completed!");
    else           
    {
       slog("create_ref is OK!"); 
       cout<<"create_ref is OK!\n";
    }   
 
  /*  
    slog("\ntest create_ref_from_oid");
    CORBA::OctetSeq_var oid=new CORBA::OctetSeq;
    oid -> length(1);
    oid[0] = 'A'; 
    b=TRUE;
    try
    {
    	    obj = ctx_ -> create_ref_from_oid(*oid,"IDL:Test/Hello:1.0"); 
    }
    catch(CORBA::Exception& ex)
    {
    	slog("create_ref_from_oid is wrong!");
    	b=FALSE;    	
    	cerr<< ex <<endl;   	
    };   
    if(b) 
     slog("create_ref_from_oid is OK!");
       
     
     slog("\ntest get_oid_from_ref");
     b=TRUE;
     CORBA::OctetSeq_var seqoid=new CORBA::OctetSeq;
     try
     {
        seqoid = ctx_ -> get_oid_from_ref(obj);
     }
      catch(CORBA::Exception& ex)
     {
    	slog("get_oid_from_ref is wrong!");
    	b=FALSE;    	
    	cerr<< ex <<endl;   	
     };   
    if(b) 
     slog("get_oid_from_ref is OK!"); 
     */ 
 
    slog("\n****************  test session end ! **************");
    cout<<"\n****************  test session end ! **************\n";
 
    //printf("\nAAAAAAAAAA test SessionContext the person name \n");
    char* _r = CORBA::string_dup("Hello!");
    return _r;
}

char*
Test::PersonImpl::CCM_Person_impl::name()
    throw(CORBA::SystemException)
{
    // TODO: Implementation
    char* _r = CORBA::string_dup("Einstein!");
    return _r;
}

void
Test::PersonImpl::CCM_Person_impl::name(const char* a)
    throw(CORBA::SystemException)
{
    // TODO: Implementation
}

Test::PersonImpl::CCM_PersonHome_impl::CCM_PersonHome_impl()
{
}

Test::PersonImpl::CCM_PersonHome_impl::~CCM_PersonHome_impl()
{
}

Components::EnterpriseComponent_ptr
Test::PersonImpl::CCM_PersonHome_impl::create()
    throw(Components::CCMException,
          CORBA::SystemException)
{
    return new Test::PersonImpl::CCM_Person_impl();
}

char*
Test::PersonImpl::CCM_PersonHome_impl::get_storage_home_id()
{
    return 0;
}

