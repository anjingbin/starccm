// **********************************************************************
//
// Generated by the CIDL Translator
//
// Copyright (c) 2001-2004
// StarMiddleware Group
// www.StarMiddleware.net
//
// All Rights Reserved
//
// Author: Huang Jie        huangjie@email.com
// Author: Chang Junsheng   cjs7908@163.com
// Author: Zhen Xianrong
//
// **********************************************************************


#ifndef __CCM_test_impl_h__
#define __CCM_test_impl_h__

#include <CCM.h>

#include <CCM_test_skel.h>
#include <test_ValueType_impl.h>


namespace Test
{
    namespace ProductComposition
    {
        class CCM_Product_Impl : virtual public Test::ProductComposition::CCM_Product_skel,
                                 public Components::EntityComponent
        {
            CCM_Product_Impl(const CCM_Product_Impl&);
            void operator=(const CCM_Product_Impl&);

        protected:
            Test::CCM_Product_Context_var ctx_;
        public:

            CCM_Product_Impl(::Test::KeyID* pkey);
            ~CCM_Product_Impl();

            virtual void configuration_complete()
                throw(CORBA::SystemException,Components::InvalidConfiguration);
            virtual void set_entity_context(Components::EntityContext*)
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void unset_entity_context()
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_activate()
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_load()
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_store()
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_passivate()
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_remove()
                throw(Components::CCMException,
                      CORBA::SystemException);
            #ifdef TAO
            virtual const char* _interface_repository_id() const { return 0; }
            virtual void* _tao_QueryInterface(ptr_arith_t type) { return 0; }
            #endif

            virtual Test::KeyID* product_id()
                throw(CORBA::SystemException);

            virtual char* product_name()
                throw(CORBA::SystemException);
            virtual void product_name(const char*)
                throw(CORBA::SystemException);
        };

        class CCM_ProductHome_Impl : virtual public Test::ProductComposition::CCM_ProductHome_skel
        {
            CCM_ProductHome_Impl(const CCM_ProductHome_Impl&);
            void operator=(const CCM_ProductHome_Impl&);

        public:

            CCM_ProductHome_Impl();
            ~CCM_ProductHome_Impl();

            virtual ::Components::EnterpriseComponent_ptr create(::Test::KeyID* pkey)
                      throw(::Components::CCMException);

            virtual ::Components::EnterpriseComponent_ptr find_by_primary_key(::Test::KeyID* pkey)
                     throw(::Components::CCMException);
            virtual ::CORBA::OctetSeq* find_by_primary_key2(::Test::KeyID* pkey)
                     throw(::Components::CCMException);

            virtual void remove(::Test::KeyID* pkey)
                     throw(::Components::CCMException);

            virtual char* get_storage_home_id();
        };


    }//End of namespace ProductComposition


}//End of namespace Test


#endif
