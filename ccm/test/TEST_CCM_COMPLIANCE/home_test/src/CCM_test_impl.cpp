// **********************************************************************
//
// Generated by the CIDL Translator
//
// Copyright (c) 2001-2004
// StarMiddleware Group
// www.StarMiddleware.net
//
// All Rights Reserved
//
// Author: Huang Jie        huangjie@email.com
// Author: Chang Junsheng   cjs7908@163.com
// Author: Zhen Xianrong
//
// **********************************************************************

#include <CORBA.h>
#include <CCM_test_impl.h>

#ifdef HAVE_STD_IOSTREAM
using namespace std;
#endif

Test::ProductComposition::CCM_Product_Impl::CCM_Product_Impl(::Test::KeyID* pkey)
{
}

Test::ProductComposition::CCM_Product_Impl::~CCM_Product_Impl()
{
}

void
Test::ProductComposition::CCM_Product_Impl::configuration_complete()
    throw(CORBA::SystemException,Components::InvalidConfiguration)
{
}

void
Test::ProductComposition::CCM_Product_Impl::set_entity_context(Components::EntityContext* ctx)
    throw(Components::CCMException,
          CORBA::SystemException)
{
    #ifdef TAO
    ctx_ = Test::CCM_Product_Context::_duplicate(dynamic_cast<Test::CCM_Product_Context*>(ctx));
    #else
    ctx_ = Test::CCM_Product_Context::_narrow(ctx);
    #endif
}

void
Test::ProductComposition::CCM_Product_Impl::unset_entity_context()
    throw(Components::CCMException,
          CORBA::SystemException)
{
}

void
Test::ProductComposition::CCM_Product_Impl::ccm_activate()
    throw(Components::CCMException,
          CORBA::SystemException)
{
}

void
Test::ProductComposition::CCM_Product_Impl::ccm_load()
    throw(Components::CCMException,
          CORBA::SystemException)
{
}

void
Test::ProductComposition::CCM_Product_Impl::ccm_store()
    throw(Components::CCMException,
          CORBA::SystemException)
{
}

void
Test::ProductComposition::CCM_Product_Impl::ccm_passivate()
    throw(Components::CCMException,
          CORBA::SystemException)
{
}

void
Test::ProductComposition::CCM_Product_Impl::ccm_remove()
    throw(Components::CCMException,
          CORBA::SystemException)
{
}


Test::KeyID*
Test::ProductComposition::CCM_Product_Impl::product_id()
    throw(CORBA::SystemException)
{
    // TODO: Implementation
    Test::KeyID_var id = new Test::KeyID_impl();
	id -> id(storage() -> product_id());
	return id._retn();
}

char*
Test::ProductComposition::CCM_Product_Impl::product_name()
    throw(CORBA::SystemException)
{
    // TODO: Implementation
   return storage() -> product_name();
}

void
Test::ProductComposition::CCM_Product_Impl::product_name(const char* a)
    throw(CORBA::SystemException)
{
    // TODO: Implementation
     storage() -> product_name(a);
}

Test::ProductComposition::CCM_ProductHome_Impl::CCM_ProductHome_Impl()
{
}

Test::ProductComposition::CCM_ProductHome_Impl::~CCM_ProductHome_Impl()
{
}

::Components::EnterpriseComponent_ptr
Test::ProductComposition::CCM_ProductHome_Impl::create(::Test::KeyID* pkey)
          throw(::Components::CCMException)
{
     if(pkey == NULL)
	{
		return new CCM_Product_Impl(pkey);
	}

	try
	{
		TestRecord::Product_var storage = storageHome() -> find_by_product_id(pkey -> id());
		throw ::Components::CCMException(Components::DUPLICATE_KEY);
	}
	catch(CosPersistentState::NotFound& ex)
	{
		ex;
	}

	TestRecord::Product_var storage = storageHome() -> create(pkey -> id());
	CCM_Product_Impl* impl = new CCM_Product_Impl(pkey);
	impl -> storage(storage.in());
	return impl;
}

::Components::EnterpriseComponent_ptr
Test::ProductComposition::CCM_ProductHome_Impl::find_by_primary_key(::Test::KeyID* pkey)
         throw(::Components::CCMException)
{
    TestRecord::Product_var storage = storageHome() -> find_by_product_id(pkey -> id());
	CCM_Product_Impl* impl = new CCM_Product_Impl(pkey);
	impl -> storage(storage.in());
	return impl;
}

::CORBA::OctetSeq*
Test::ProductComposition::CCM_ProductHome_Impl::find_by_primary_key2(::Test::KeyID* pkey)
         throw(::Components::CCMException)
{
    TestRecord::Product_var storage = storageHome() -> find_by_product_id(pkey -> id());
    return storage -> get_pid();
}

void
Test::ProductComposition::CCM_ProductHome_Impl::remove (::Test::KeyID* pkey)
         throw(::Components::CCMException)
{
	TestRecord::Product_var storage = storageHome() -> find_by_product_id(pkey -> id());
	storage -> _remove_ref();
}

char*
Test::ProductComposition::CCM_ProductHome_Impl::get_storage_home_id()
{
    return CORBA::string_dup(TestRecord::ProductHomeImpl::id());
}

