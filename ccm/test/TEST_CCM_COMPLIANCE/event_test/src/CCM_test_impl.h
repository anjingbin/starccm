// **********************************************************************
//
// Generated by the CIDL Translator
//
// Copyright (c) 2001-2004
// StarMiddleware Group
// www.StarMiddleware.net
//
// All Rights Reserved
//
// Author: Huang Jie        huangjie@email.com
// Author: Chang Junsheng   cjs7908@163.com
// Author: Zhen Xianrong
//
// **********************************************************************


#ifndef __CCM_test_impl_h__
#define __CCM_test_impl_h__

#include <CCM.h>

#include <CCM_test_skel.h>
#include <test_ValueType_impl.h>


namespace Test
{
    namespace PhilosopherImpl
    {
        class CCM_Philosopher_impl : virtual public Test::PhilosopherImpl::CCM_Philosopher_skel,
                                     public Components::SessionComponent
        {
            CCM_Philosopher_impl(const CCM_Philosopher_impl&);
            void operator=(const CCM_Philosopher_impl&);

        protected:
            Test::CCM_Philosopher_Context_var ctx_;
        public:

            CCM_Philosopher_impl();
            ~CCM_Philosopher_impl();

            virtual void configuration_complete();
            virtual void set_session_context(Components::SessionContext*)
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_activate()
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_passivate()
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_remove()
                throw(Components::CCMException,
                      CORBA::SystemException);
            #ifdef TAO
            virtual const char* _interface_repository_id() const { return 0; }
            virtual void* _tao_QueryInterface(ptr_arith_t type) { return 0; }
            #endif

            virtual void send_message(const char* s)
                throw(CORBA::SystemException);
        };

        class CCM_PhilosopherHome_impl : virtual public Test::PhilosopherImpl::CCM_PhilosopherHome_skel
        {
            CCM_PhilosopherHome_impl(const CCM_PhilosopherHome_impl&);
            void operator=(const CCM_PhilosopherHome_impl&);

        public:

            CCM_PhilosopherHome_impl();
            ~CCM_PhilosopherHome_impl();

            virtual Components::EnterpriseComponent_ptr create()
                throw(Components::CCMException,
                      CORBA::SystemException);

            virtual char* get_storage_home_id();
        };


    }//End of namespace PhilosopherImpl


    namespace ObserverImpl
    {
        class CCM_Observer_impl : virtual public Test::ObserverImpl::CCM_Observer_skel,
                                  public Components::SessionComponent
        {
            CCM_Observer_impl(const CCM_Observer_impl&);
            void operator=(const CCM_Observer_impl&);

        protected:
            Test::CCM_Observer_Context_var ctx_;
        public:

            CCM_Observer_impl();
            ~CCM_Observer_impl();

            virtual void configuration_complete();
           virtual void set_session_context(Components::SessionContext*)
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_activate()
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_passivate()
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_remove()
                throw(Components::CCMException,
                      CORBA::SystemException);
            #ifdef TAO
            virtual const char* _interface_repository_id() const { return 0; }
            virtual void* _tao_QueryInterface(ptr_arith_t type) { return 0; }
            #endif
            virtual void push_philosopher_state(::Test::PhilosopherState* event)
                throw(CORBA::SystemException);

        };

        class CCM_ObserverHome_impl : virtual public Test::ObserverImpl::CCM_ObserverHome_skel
        {
            CCM_ObserverHome_impl(const CCM_ObserverHome_impl&);
            void operator=(const CCM_ObserverHome_impl&);

        public:

            CCM_ObserverHome_impl();
            ~CCM_ObserverHome_impl();

            virtual Components::EnterpriseComponent_ptr create()
                throw(Components::CCMException,
                      CORBA::SystemException);

            virtual char* get_storage_home_id();
        };


    }//End of namespace ObserverImpl


}//End of namespace Test


#endif
