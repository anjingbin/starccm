// **********************************************************************
//
// Generated by the CIDL Translator
//
// Copyright (c) 2001-2004
// StarMiddleware Group
// www.StarMiddleware.net
//
// All Rights Reserved
//
// Author: Huang Jie        huangjie@email.com
// Author: Chang Junsheng   cjs7908@163.com
// Author: Zhen Xianrong
//
// **********************************************************************


#ifndef __CCM_Helloworld_impl_h__
#define __CCM_Helloworld_impl_h__

#include <CCM.h>

#include <CCM_Helloworld_skel.h>
#include <Helloworld_ValueType_impl.h>


namespace HelloWorld
{
    namespace PersonImpl
    {
        class CCM_Person_impl : virtual public HelloWorld::PersonImpl::CCM_Person_skel,
                                public Components::SessionComponent
        {
            CCM_Person_impl(const CCM_Person_impl&);
            void operator=(const CCM_Person_impl&);
            
            CORBA::String_var name_;

        protected:
            HelloWorld::CCM_Person_Context_var ctx_;
        public:

            CCM_Person_impl();
            ~CCM_Person_impl();

            virtual void configuration_complete();
           virtual void set_session_context(Components::SessionContext*)
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_activate()
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_passivate()
                throw(Components::CCMException,
                      CORBA::SystemException);
            virtual void ccm_remove()
                throw(Components::CCMException,
                      CORBA::SystemException);
            #ifdef TAO
            virtual const char* _interface_repository_id() const { return 0; }
            virtual void* _tao_QueryInterface(ptr_arith_t type) { return 0; }
            #endif

            virtual char* sayHello()
                throw(CORBA::SystemException);

            virtual char* name()
                throw(CORBA::SystemException);
            virtual void name(const char*)
                throw(CORBA::SystemException);
        };

        class CCM_PersonHome_impl : virtual public HelloWorld::PersonImpl::CCM_PersonHome_skel
        {
            CCM_PersonHome_impl(const CCM_PersonHome_impl&);
            void operator=(const CCM_PersonHome_impl&);

        public:

            CCM_PersonHome_impl();
            ~CCM_PersonHome_impl();

            virtual Components::EnterpriseComponent_ptr create()
                throw(Components::CCMException,
                      CORBA::SystemException);

            virtual char* get_storage_home_id();
        };


    }//End of namespace PersonImpl


}//End of namespace HelloWorld


#endif
