// **********************************************************************
//
// Copyright (c) 2001-2004
// StarMiddleware.net
// www.StarMiddleware.net
//
// All Rights Reserved
//
// Author: Huang Jie    huangjie@email.com
// Author: Wang Kebo    mep@263.net
// Author: Su Liang     centuryfree@yahoo.com.cn
//
// **********************************************************************

// Version: 1.0.0

#ifndef __CCMObject_idl__
#define __CCMObject_idl__

#include "CCMHome.idl"

#pragma prefix "omg.org"

module Components
{
	exception InvalidName { };

	exception InvalidConnection { };

	exception AlreadyConnected { };

	exception NoConnection { };

	exception ExceededConnectionLimit { };

	exception NoKeyAvailable { };

	exception CookieRequired { };

	valuetype PortDescription
 	{
		public FeatureName name;
  		public CORBA::RepositoryId type_id;
 	};

 	valuetype FacetDescription : PortDescription
 	{
  		public Object facet_ref;
 	};
	typedef sequence<FacetDescription> FacetDescriptions;

	interface Navigation
	{
		Object provide_facet (in FeatureName name)
			raises (InvalidName);

		FacetDescriptions get_all_facets();

		FacetDescriptions get_named_facets (in NameList names)
			raises (InvalidName);

		boolean same_component (in Object object_ref);
	};

	valuetype ConnectionDescription
	{
		public Cookie ck;
		public Object objref;
	};
	typedef sequence<ConnectionDescription> ConnectionDescriptions;

	valuetype ReceptacleDescription : PortDescription
	{
		public boolean is_multiple;
		public ConnectionDescriptions connections;
	};
	typedef sequence<ReceptacleDescription> ReceptacleDescriptions;

	//add by wsf 2004.6.30
	typedef	sequence<Cookie> Cookies;
	//end by wsf 2004.6.30
	
	interface Receptacles
	{
		Cookie connect (in FeatureName name, in Object connection )
			raises (InvalidName,
				InvalidConnection,
				AlreadyConnected,
				ExceededConnectionLimit);

		void disconnect (in FeatureName name,in Cookie ck) 
			raises (InvalidName,
				InvalidConnection,
				CookieRequired,
				NoConnection);

		ConnectionDescriptions get_connections (in FeatureName name) 
			raises (InvalidName);

		ReceptacleDescriptions get_all_receptacles ();

		ReceptacleDescriptions get_named_receptacles (in NameList names) 
			raises (InvalidName);
	};

	abstract valuetype EventBase { };

	exception BadEventType
	{
		CORBA::RepositoryId expected_event_type;
	};

	interface EventConsumerBase
	{
		void push_event(in EventBase evt) 
			raises (BadEventType);
	};

	valuetype ConsumerDescription : PortDescription
	{
		public EventConsumerBase consumer;
	};
	typedef sequence<ConsumerDescription> ConsumerDescriptions;

	valuetype EmitterDescription : PortDescription
	{
		public EventConsumerBase consumer;
	};
	typedef sequence<EmitterDescription> EmitterDescriptions;

	valuetype SubscriberDescription
	{
		public Cookie ck;
		public EventConsumerBase consumer;
	};
	typedef sequence<SubscriberDescription> SubscriberDescriptions;

	valuetype PublisherDescription : PortDescription
	{
		public SubscriberDescriptions consumers;
	};
	typedef sequence<PublisherDescription> PublisherDescriptions;

	interface Events
	{
		EventConsumerBase get_consumer (in FeatureName sink_name)
			raises (InvalidName);

		Cookie subscribe (in FeatureName publisher_name,
				in EventConsumerBase subscriber)
			raises (InvalidName, InvalidConnection,
				ExceededConnectionLimit);

		void unsubscribe (in FeatureName publisher_name,
				in Cookie ck)
			raises (InvalidName, InvalidConnection);

		void connect_consumer (in FeatureName emitter_name,
				in EventConsumerBase consumer)
			raises (InvalidName, AlreadyConnected,
				InvalidConnection);

		EventConsumerBase disconnect_consumer (
				in FeatureName source_name)
			raises (InvalidName, NoConnection);

		ConsumerDescriptions get_all_consumers ();

		ConsumerDescriptions get_named_consumers (
				in NameList names)
			raises (InvalidName);

		EmitterDescriptions get_all_emitters ();

		EmitterDescriptions get_named_emitters (in NameList names)
			raises (InvalidName);

		PublisherDescriptions get_all_publishers ();

		PublisherDescriptions get_named_publishers (in NameList names)
			raises (InvalidName);
	};

	valuetype ComponentPortDescription
	{
		public FacetDescriptions facets;
		public ReceptacleDescriptions receptacles;
		public ConsumerDescriptions consumers;
		public EmitterDescriptions emitters;
		public PublisherDescriptions publishers;
	};

	interface CCMObject : Navigation, Receptacles, Events
	{
		CORBA::IRObject get_component_def ( );

		CCMHome get_ccm_home( );

		PrimaryKeyBase get_primary_key( ) 
			raises (NoKeyAvailable);

		void configuration_complete( ) 
			raises (InvalidConfiguration);

		//add by wsf 2004.6.29
		void passivate_component();
		
		void activate_component();
		
		void run_complete();
		
		ConfigValues externalize ();
		
		void initialize (in ConfigValues states);
		//end by wsf 2004.6.29

		void remove() 
			raises (RemoveFailure);

		ComponentPortDescription get_all_ports ();
		
	};
};

#endif