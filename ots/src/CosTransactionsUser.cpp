// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.0

#include <OB/CORBAClient.h>
#include <CosTransactionsUser.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010000L)
#       error ORBacus version mismatch!
#   endif
#endif

namespace CosTransactions
{

::OB::TypeCodeConst _tc_Synchronization(
"01f812000e00000044000000010000002800000049444c3a436f735472616e73616374696f6e7"
"32f53796e6368726f6e697a6174696f6e3a312e30001000000053796e6368726f6e697a617469"
"6f6e00"
);

} // End of namespace CosTransactions

//
// IDL:CosTransactions/Synchronization:1.0
//
const char* CosTransactions::Synchronization::ids_[] =
{
    "IDL:CosTransactions/Synchronization:1.0",
    "IDL:CosTransactions/TransactionalObject:1.0",
    0
};

void
OBDuplicate(CosTransactions::Synchronization_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(CosTransactions::Synchronization_ptr p)
{
    if(p)
        p -> _remove_ref();
}

CosTransactions::Synchronization_ptr
CosTransactions::Synchronization::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Synchronization_ptr v = dynamic_cast<Synchronization_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_CosTransactions::Synchronization* val = new OBProxy_CosTransactions::Synchronization;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

CosTransactions::Synchronization_ptr
CosTransactions::Synchronization::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Synchronization_ptr v = dynamic_cast<Synchronization_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

CosTransactions::Synchronization_ptr
CosTransactions::Synchronization::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Synchronization_ptr v = dynamic_cast<Synchronization_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_CosTransactions::Synchronization* val = new OBProxy_CosTransactions::Synchronization;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

CosTransactions::Synchronization_ptr
CosTransactions::Synchronization::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
CosTransactions::Synchronization::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(CosTransactions::Synchronization_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(CosTransactions::Synchronization_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    CosTransactions::Synchronization_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_CosTransactions::Synchronization* _ob_obj = new OBProxy_CosTransactions::Synchronization;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = CosTransactions::Synchronization::_nil();
}

void
operator<<=(CORBA::Any& any, CosTransactions::Synchronization_ptr* v)
{
    any.replace(CosTransactions::_tc_Synchronization, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, CosTransactions::Synchronization_ptr v)
{
    CosTransactions::Synchronization_ptr val = CosTransactions::Synchronization::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, CosTransactions::Synchronization_ptr& v)
{
    if(any.check_type(CosTransactions::_tc_Synchronization))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<CosTransactions::Synchronization_ptr>(val)))
            {
                OBProxy_CosTransactions::Synchronization* obj = new OBProxy_CosTransactions::Synchronization;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = CosTransactions::Synchronization::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:CosTransactions/Synchronization:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_CosTransactions::Synchronization::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_CosTransactions::Synchronization;
}

const char**
OBProxy_CosTransactions::Synchronization::_OB_ids() const
{
    return ::CosTransactions::Synchronization::ids_;
}

//
// IDL:CosTransactions/Synchronization/before_completion:1.0
//
void
OBProxy_CosTransactions::Synchronization::before_completion()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_CosTransactions::Synchronization_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_CosTransactions::Synchronization_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> before_completion();
#if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
            volatile int i = 1;
            i++;
#endif
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:CosTransactions/Synchronization/after_completion:1.0
//
void
OBProxy_CosTransactions::Synchronization::after_completion(::CosTransactions::Status _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_CosTransactions::Synchronization_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_CosTransactions::Synchronization_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> after_completion(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:CosTransactions/Synchronization:1.0
//
void
OBDuplicate(OBStubImpl_CosTransactions::Synchronization_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_CosTransactions::Synchronization_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:CosTransactions/Synchronization/before_completion:1.0
//
void
OBMarshalStubImpl_CosTransactions::Synchronization::before_completion()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("before_completion", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:CosTransactions/Synchronization/after_completion:1.0
//
void
OBMarshalStubImpl_CosTransactions::Synchronization::after_completion(::CosTransactions::Status _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("after_completion", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_ulong((CORBA::ULong)_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}
