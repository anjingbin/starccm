// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.0

#include <OB/CORBAClient.h>
#include <PostgreSQLResource.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010000L)
#       error ORBacus version mismatch!
#   endif
#endif

::OB::TypeCodeConst _tc_pg_ConnStatusType(
"01eb12001500000040000000010000001a00000049444c3a70675f436f6e6e537461747573547"
"970653a312e30007f001200000070675f436f6e6e5374617475735479706500820002000000"
);

::OB::TypeCodeConst _tc_pg_ExecStatusType(
"01eb12001500000040000000010000001a00000049444c3a70675f45786563537461747573547"
"970653a312e30007f001200000070675f457865635374617475735479706500820002000000"
);

::OB::TypeCodeConst _tc_pg_PGnotify(
"01eb12000f00000054000000010000001400000049444c3a70675f50476e6f746966793a312e3"
"0000c00000070675f50476e6f7469667900020000000800000072656c6e616d65001200000000"
"0000000700000062655f706964007703000000"
);

::OB::TypeCodeConst _tc_PG_Resource(
"010000000e0000002c000000019f82001400000049444c3a50475f5265736f757263653a312e3"
"0000c00000050475f5265736f7572636500"
);

::OB::TypeCodeConst PG_Resource::_tc_PG_CONNECTTION_FAILED(
"01ea1200160000005400000001ea12002a00000049444c3a50475f5265736f757263652f50475"
"f434f4e4e45435454494f4e5f4641494c45443a312e300020101600000050475f434f4e4e4543"
"5454494f4e5f4641494c454400340000000000"
);

//
// IDL:pg_PGnotify:1.0
//
#ifdef OB_CLEAR_MEM
pg_PGnotify::pg_PGnotify()
{
    memset(&be_pid, 0, sizeof(be_pid));
}
#endif

pg_PGnotify::pg_PGnotify(const pg_PGnotify& _ob_a)
    : relname(_ob_a.relname),
      be_pid(_ob_a.be_pid)
{
}

pg_PGnotify&
pg_PGnotify::operator=(const pg_PGnotify& _ob_a)
{
    if(this != &_ob_a)
    {
        relname = _ob_a.relname;
        be_pid = _ob_a.be_pid;
    }
    return *this;
}

void
pg_PGnotify::_OB_marshal(OB::OutputStreamImpl* _ob_out) const
{
    _ob_out -> write_string(relname);
    _ob_out -> write_long(be_pid);
}

void
pg_PGnotify::_OB_unmarshal(pg_PGnotify& _ob_v, OB::InputStreamImpl* _ob_in)
{
    _ob_v.relname = _ob_in -> read_string();
    _ob_v.be_pid = _ob_in -> read_long();
}

void
operator<<=(CORBA::Any& any, pg_PGnotify* v)
{
    static const OB::Info< pg_PGnotify > info;
    any.replace(_tc_pg_PGnotify, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const pg_PGnotify& v)
{
    any <<= new pg_PGnotify(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const pg_PGnotify*& v)
{
    if(any.check_type(_tc_pg_PGnotify))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            pg_PGnotify* val = new pg_PGnotify;
            pg_PGnotify::_OB_unmarshal(*val, _ob_in);
            (CORBA::Any&)any <<= val;
        }

        v = (pg_PGnotify*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PG_Resource:1.0
//
const char* PG_Resource::ids_[] =
{
    "IDL:PG_Resource:1.0",
    0
};

void
OBDuplicate(PG_Resource_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(PG_Resource_ptr p)
{
    if(p)
        p -> _remove_ref();
}

PG_Resource_ptr
PG_Resource::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        PG_Resource_ptr v = dynamic_cast<PG_Resource_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            OBProxy_PG_Resource* val = new OBProxy_PG_Resource;
            val -> _OB_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PG_Resource_ptr
PG_Resource::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        PG_Resource_ptr v = dynamic_cast<PG_Resource_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PG_Resource_ptr
PG_Resource::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        PG_Resource_ptr v = dynamic_cast<PG_Resource_ptr>(p);
        if(v)
            return _duplicate(v);

        OBProxy_PG_Resource* val = new OBProxy_PG_Resource;
        val -> _OB_copyFrom(p);
        return val;
    }

    return _nil();
}

PG_Resource_ptr
PG_Resource::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PG_Resource::_OB_staticIds()
{
    return ids_;
}

void
OBMarshal(PG_Resource_ptr _ob_v, OB::OutputStreamImpl* _ob_out)
{
    _ob_out -> write_Object(_ob_v);
}

void
OBUnmarshal(PG_Resource_ptr& _ob_v, OB::InputStreamImpl* _ob_in)
{
    PG_Resource_var old = _ob_v;
    CORBA::Object_var p = _ob_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        OBProxy_PG_Resource* _ob_obj = new OBProxy_PG_Resource;
        _ob_obj -> _OB_copyFrom(p);
        _ob_v = _ob_obj;
    }
    else
        _ob_v = PG_Resource::_nil();
}

void
operator<<=(CORBA::Any& any, PG_Resource_ptr* v)
{
    any.replace(_tc_PG_Resource, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PG_Resource_ptr v)
{
    PG_Resource_ptr val = PG_Resource::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PG_Resource_ptr& v)
{
    if(any.check_type(_tc_PG_Resource))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PG_Resource_ptr>(val)))
            {
                OBProxy_PG_Resource* obj = new OBProxy_PG_Resource;
                obj -> _OB_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PG_Resource::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:PG_Resource/PG_CONNECTTION_FAILED:1.0
//
PG_Resource::PG_CONNECTTION_FAILED::PG_CONNECTTION_FAILED(const PG_CONNECTTION_FAILED& _ob_a)
    : CORBA::UserException(_ob_a)
{
}

PG_Resource::PG_CONNECTTION_FAILED&
PG_Resource::PG_CONNECTTION_FAILED::operator=(const PG_CONNECTTION_FAILED&)
{
    return *this;
}

PG_Resource::PG_CONNECTTION_FAILED*
PG_Resource::PG_CONNECTTION_FAILED::_downcast(CORBA::Exception* p)
{
    return dynamic_cast<PG_CONNECTTION_FAILED*>(p);
}

const PG_Resource::PG_CONNECTTION_FAILED*
PG_Resource::PG_CONNECTTION_FAILED::_downcast(const CORBA::Exception* p)
{
    return dynamic_cast<const PG_CONNECTTION_FAILED*>(p);
}

const char*
PG_Resource::PG_CONNECTTION_FAILED::_name() const
{
    return "PG_CONNECTTION_FAILED";
}

const char*
PG_Resource::PG_CONNECTTION_FAILED::_rep_id() const
{
    return "IDL:PG_Resource/PG_CONNECTTION_FAILED:1.0";
}

char*
PG_Resource::PG_CONNECTTION_FAILED::_to_string() const
{
    return _OB_defaultToString("PG_Resource::PG_CONNECTTION_FAILED");
}

CORBA::Exception*
PG_Resource::PG_CONNECTTION_FAILED::_OB_clone() const
{
    return new PG_CONNECTTION_FAILED(*this);
}

void
PG_Resource::PG_CONNECTTION_FAILED::_OB_insertInAny(CORBA::Any& any)
{
    any <<= this;
}

void
PG_Resource::PG_CONNECTTION_FAILED::_OB_unmarshal(PG_CONNECTTION_FAILED&, OB::InputStreamImpl* _ob_in)
{
    CORBA::String_var id = _ob_in -> read_string();
    assert(strcmp(id, "IDL:PG_Resource/PG_CONNECTTION_FAILED:1.0") == 0);
}

void
operator<<=(CORBA::Any& any, PG_Resource::PG_CONNECTTION_FAILED* v)
{
    static const OB::Info< PG_Resource::PG_CONNECTTION_FAILED > info;
    any.replace(PG_Resource::_tc_PG_CONNECTTION_FAILED, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PG_Resource::PG_CONNECTTION_FAILED& v)
{
    any <<= new PG_Resource::PG_CONNECTTION_FAILED(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PG_Resource::PG_CONNECTTION_FAILED*& v)
{
    if(any.check_type(PG_Resource::_tc_PG_CONNECTTION_FAILED))
    {
        if(!any.info())
        {
            OB::InputStream_var _ob_in = any.create_input_stream();
            PG_Resource::PG_CONNECTTION_FAILED* val = new PG_Resource::PG_CONNECTTION_FAILED;
            PG_Resource::PG_CONNECTTION_FAILED::_OB_unmarshal(*val, _ob_in);
            (CORBA::Any&)any <<= val;
        }

        v = (PG_Resource::PG_CONNECTTION_FAILED*)any.value();
        return true;
    }
    else
        return false;
}

//
// IDL:PG_Resource:1.0
//
OB::MarshalStubImpl_ptr
OBProxy_PG_Resource::_OB_createMarshalStubImpl()
{
    return new OBMarshalStubImpl_PG_Resource;
}

const char**
OBProxy_PG_Resource::_OB_ids() const
{
    return ::PG_Resource::ids_;
}

//
// IDL:PG_Resource/pg_prepare:1.0
//
::CosTransactions::Vote
OBProxy_PG_Resource::pg_prepare()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_prepare();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_rollback:1.0
//
void
OBProxy_PG_Resource::pg_rollback()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> pg_rollback();
#if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
            volatile int i = 1;
            i++;
#endif
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_commit:1.0
//
void
OBProxy_PG_Resource::pg_commit()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> pg_commit();
#if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
            volatile int i = 1;
            i++;
#endif
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_commit_one_phase:1.0
//
void
OBProxy_PG_Resource::pg_commit_one_phase()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> pg_commit_one_phase();
#if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
            volatile int i = 1;
            i++;
#endif
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_forget:1.0
//
void
OBProxy_PG_Resource::pg_forget()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> pg_forget();
#if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
            volatile int i = 1;
            i++;
#endif
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_release:1.0
//
void
OBProxy_PG_Resource::pg_release()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> pg_release();
#if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
            volatile int i = 1;
            i++;
#endif
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_BeginTrans:1.0
//
CORBA::Boolean
OBProxy_PG_Resource::pg_BeginTrans()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_BeginTrans();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_set_recoverycoordinator:1.0
//
void
OBProxy_PG_Resource::pg_set_recoverycoordinator(::CosTransactions::RecoveryCoordinator_ptr _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> pg_set_recoverycoordinator(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_heuristic_decision:1.0
//
void
OBProxy_PG_Resource::pg_heuristic_decision()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> pg_heuristic_decision();
#if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
            volatile int i = 1;
            i++;
#endif
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQsetdb:1.0
//
void
OBProxy_PG_Resource::pg_PQsetdb(const char* _ob_a0,
                                const char* _ob_a1,
                                const char* _ob_a2,
                                const char* _ob_a3,
                                const char* _ob_a4)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> pg_PQsetdb(_ob_a0, _ob_a1, _ob_a2, _ob_a3, _ob_a4);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQdb:1.0
//
char*
OBProxy_PG_Resource::pg_PQdb()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQdb();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQhost:1.0
//
char*
OBProxy_PG_Resource::pg_PQhost()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQhost();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQoptions:1.0
//
char*
OBProxy_PG_Resource::pg_PQoptions()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQoptions();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQport:1.0
//
char*
OBProxy_PG_Resource::pg_PQport()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQport();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQtty:1.0
//
char*
OBProxy_PG_Resource::pg_PQtty()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQtty();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQstatus:1.0
//
::pg_ConnStatusType
OBProxy_PG_Resource::pg_PQstatus()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQstatus();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQerrorMessage:1.0
//
char*
OBProxy_PG_Resource::pg_PQerrorMessage()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQerrorMessage();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQfinish:1.0
//
void
OBProxy_PG_Resource::pg_PQfinish()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> pg_PQfinish();
#if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
            volatile int i = 1;
            i++;
#endif
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQreset:1.0
//
void
OBProxy_PG_Resource::pg_PQreset()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> pg_PQreset();
#if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
            volatile int i = 1;
            i++;
#endif
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQuntrace:1.0
//
void
OBProxy_PG_Resource::pg_PQuntrace()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> pg_PQuntrace();
#if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
            volatile int i = 1;
            i++;
#endif
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQexec:1.0
//
void
OBProxy_PG_Resource::pg_PQexec(const char* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> pg_PQexec(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQresultStatus:1.0
//
::pg_ExecStatusType
OBProxy_PG_Resource::pg_PQresultStatus()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQresultStatus();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQntuples:1.0
//
CORBA::Long
OBProxy_PG_Resource::pg_PQntuples()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQntuples();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQnfields:1.0
//
CORBA::Long
OBProxy_PG_Resource::pg_PQnfields()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQnfields();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQfname:1.0
//
char*
OBProxy_PG_Resource::pg_PQfname(CORBA::Long _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQfname(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQfnumber:1.0
//
CORBA::Long
OBProxy_PG_Resource::pg_PQfnumber(const char* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQfnumber(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQftype:1.0
//
CORBA::Long
OBProxy_PG_Resource::pg_PQftype(CORBA::Long _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQftype(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQfsize:1.0
//
CORBA::Long
OBProxy_PG_Resource::pg_PQfsize(CORBA::Long _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQfsize(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQgetvalue:1.0
//
char*
OBProxy_PG_Resource::pg_PQgetvalue(CORBA::Long _ob_a0,
                                   CORBA::Long _ob_a1)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQgetvalue(_ob_a0, _ob_a1);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQgetlength:1.0
//
CORBA::Long
OBProxy_PG_Resource::pg_PQgetlength(CORBA::Long _ob_a0,
                                    CORBA::Long _ob_a1)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQgetlength(_ob_a0, _ob_a1);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQcmdStatus:1.0
//
char*
OBProxy_PG_Resource::pg_PQcmdStatus()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQcmdStatus();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQoidStatus:1.0
//
char*
OBProxy_PG_Resource::pg_PQoidStatus()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQoidStatus();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQclear:1.0
//
void
OBProxy_PG_Resource::pg_PQclear()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> pg_PQclear();
#if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
            volatile int i = 1;
            i++;
#endif
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQnotifies:1.0
//
::pg_PGnotify*
OBProxy_PG_Resource::pg_PQnotifies()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQnotifies();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQgetline:1.0
//
CORBA::Long
OBProxy_PG_Resource::pg_PQgetline(const char* _ob_a0,
                                  CORBA::Long _ob_a1)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQgetline(_ob_a0, _ob_a1);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQputline:1.0
//
void
OBProxy_PG_Resource::pg_PQputline(const char* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> pg_PQputline(_ob_a0);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_PQendcopy:1.0
//
CORBA::Long
OBProxy_PG_Resource::pg_PQendcopy()
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_PQendcopy();
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_fe_getauthname:1.0
//
char*
OBProxy_PG_Resource::pg_fe_getauthname(const char* _ob_a0)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            return _ob_stubImpl -> pg_fe_getauthname(_ob_a0);
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource/pg_fe_setauthsvc:1.0
//
void
OBProxy_PG_Resource::pg_fe_setauthsvc(const char* _ob_a0,
                                      const char* _ob_a1)
{
    CORBA::ULong _ob_retry = 0, _ob_hop = 0;
    while(true)
    {
        try
        {
            OB::StubImplBase_var _ob_stubImplBase = _OB_getStubImpl();
            OBStubImpl_PG_Resource_ptr _ob_stubImpl = dynamic_cast< OBStubImpl_PG_Resource_ptr>(_ob_stubImplBase.in());
            _ob_stubImpl -> pg_fe_setauthsvc(_ob_a0, _ob_a1);
            return;
        }
        catch(const OB::ExceptionBase& _ob_ex)
        {
            _OB_handleException(_ob_ex, _ob_retry, _ob_hop);
        }
    }
}

//
// IDL:PG_Resource:1.0
//
void
OBDuplicate(OBStubImpl_PG_Resource_ptr p)
{
    if(p)
        p -> _OB_incRef();
}

void
OBRelease(OBStubImpl_PG_Resource_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

//
// IDL:PG_Resource/pg_prepare:1.0
//
::CosTransactions::Vote
OBMarshalStubImpl_PG_Resource::pg_prepare()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_prepare", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:CosTransactions/HeuristicMixed:1.0") == 0)
                    {
                        ::CosTransactions::HeuristicMixed _ob_except;
                        ::CosTransactions::HeuristicMixed::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/HeuristicHazard:1.0") == 0)
                    {
                        ::CosTransactions::HeuristicHazard _ob_except;
                        ::CosTransactions::HeuristicHazard::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/TRANSACTION_REQUIRED:1.0") == 0)
                    {
                        ::CosTransactions::TRANSACTION_REQUIRED _ob_except;
                        ::CosTransactions::TRANSACTION_REQUIRED::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/TRANSACTION_ROLLEDBACK:1.0") == 0)
                    {
                        ::CosTransactions::TRANSACTION_ROLLEDBACK _ob_except;
                        ::CosTransactions::TRANSACTION_ROLLEDBACK::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/INVALID_TRANSACTION:1.0") == 0)
                    {
                        ::CosTransactions::INVALID_TRANSACTION _ob_except;
                        ::CosTransactions::INVALID_TRANSACTION::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/WRONG_TRANSACTION:1.0") == 0)
                    {
                        ::CosTransactions::WRONG_TRANSACTION _ob_except;
                        ::CosTransactions::WRONG_TRANSACTION::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::CosTransactions::Vote _ob_r;
                try
                {
                    _ob_r = (::CosTransactions::Vote)_ob_in -> read_ulong();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_rollback:1.0
//
void
OBMarshalStubImpl_PG_Resource::pg_rollback()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_rollback", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:CosTransactions/HeuristicCommit:1.0") == 0)
                    {
                        ::CosTransactions::HeuristicCommit _ob_except;
                        ::CosTransactions::HeuristicCommit::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/HeuristicMixed:1.0") == 0)
                    {
                        ::CosTransactions::HeuristicMixed _ob_except;
                        ::CosTransactions::HeuristicMixed::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/HeuristicHazard:1.0") == 0)
                    {
                        ::CosTransactions::HeuristicHazard _ob_except;
                        ::CosTransactions::HeuristicHazard::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/TRANSACTION_REQUIRED:1.0") == 0)
                    {
                        ::CosTransactions::TRANSACTION_REQUIRED _ob_except;
                        ::CosTransactions::TRANSACTION_REQUIRED::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/TRANSACTION_ROLLEDBACK:1.0") == 0)
                    {
                        ::CosTransactions::TRANSACTION_ROLLEDBACK _ob_except;
                        ::CosTransactions::TRANSACTION_ROLLEDBACK::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/INVALID_TRANSACTION:1.0") == 0)
                    {
                        ::CosTransactions::INVALID_TRANSACTION _ob_except;
                        ::CosTransactions::INVALID_TRANSACTION::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/WRONG_TRANSACTION:1.0") == 0)
                    {
                        ::CosTransactions::WRONG_TRANSACTION _ob_except;
                        ::CosTransactions::WRONG_TRANSACTION::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_commit:1.0
//
void
OBMarshalStubImpl_PG_Resource::pg_commit()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_commit", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:CosTransactions/NotPrepared:1.0") == 0)
                    {
                        ::CosTransactions::NotPrepared _ob_except;
                        ::CosTransactions::NotPrepared::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/HeuristicRollback:1.0") == 0)
                    {
                        ::CosTransactions::HeuristicRollback _ob_except;
                        ::CosTransactions::HeuristicRollback::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/HeuristicMixed:1.0") == 0)
                    {
                        ::CosTransactions::HeuristicMixed _ob_except;
                        ::CosTransactions::HeuristicMixed::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/HeuristicHazard:1.0") == 0)
                    {
                        ::CosTransactions::HeuristicHazard _ob_except;
                        ::CosTransactions::HeuristicHazard::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/TRANSACTION_REQUIRED:1.0") == 0)
                    {
                        ::CosTransactions::TRANSACTION_REQUIRED _ob_except;
                        ::CosTransactions::TRANSACTION_REQUIRED::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/TRANSACTION_ROLLEDBACK:1.0") == 0)
                    {
                        ::CosTransactions::TRANSACTION_ROLLEDBACK _ob_except;
                        ::CosTransactions::TRANSACTION_ROLLEDBACK::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/INVALID_TRANSACTION:1.0") == 0)
                    {
                        ::CosTransactions::INVALID_TRANSACTION _ob_except;
                        ::CosTransactions::INVALID_TRANSACTION::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/WRONG_TRANSACTION:1.0") == 0)
                    {
                        ::CosTransactions::WRONG_TRANSACTION _ob_except;
                        ::CosTransactions::WRONG_TRANSACTION::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_commit_one_phase:1.0
//
void
OBMarshalStubImpl_PG_Resource::pg_commit_one_phase()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_commit_one_phase", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:CosTransactions/HeuristicHazard:1.0") == 0)
                    {
                        ::CosTransactions::HeuristicHazard _ob_except;
                        ::CosTransactions::HeuristicHazard::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/TRANSACTION_REQUIRED:1.0") == 0)
                    {
                        ::CosTransactions::TRANSACTION_REQUIRED _ob_except;
                        ::CosTransactions::TRANSACTION_REQUIRED::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/TRANSACTION_ROLLEDBACK:1.0") == 0)
                    {
                        ::CosTransactions::TRANSACTION_ROLLEDBACK _ob_except;
                        ::CosTransactions::TRANSACTION_ROLLEDBACK::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/INVALID_TRANSACTION:1.0") == 0)
                    {
                        ::CosTransactions::INVALID_TRANSACTION _ob_except;
                        ::CosTransactions::INVALID_TRANSACTION::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/WRONG_TRANSACTION:1.0") == 0)
                    {
                        ::CosTransactions::WRONG_TRANSACTION _ob_except;
                        ::CosTransactions::WRONG_TRANSACTION::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_forget:1.0
//
void
OBMarshalStubImpl_PG_Resource::pg_forget()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_forget", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:CosTransactions/TRANSACTION_REQUIRED:1.0") == 0)
                    {
                        ::CosTransactions::TRANSACTION_REQUIRED _ob_except;
                        ::CosTransactions::TRANSACTION_REQUIRED::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/TRANSACTION_ROLLEDBACK:1.0") == 0)
                    {
                        ::CosTransactions::TRANSACTION_ROLLEDBACK _ob_except;
                        ::CosTransactions::TRANSACTION_ROLLEDBACK::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/INVALID_TRANSACTION:1.0") == 0)
                    {
                        ::CosTransactions::INVALID_TRANSACTION _ob_except;
                        ::CosTransactions::INVALID_TRANSACTION::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/WRONG_TRANSACTION:1.0") == 0)
                    {
                        ::CosTransactions::WRONG_TRANSACTION _ob_except;
                        ::CosTransactions::WRONG_TRANSACTION::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_release:1.0
//
void
OBMarshalStubImpl_PG_Resource::pg_release()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_release", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_BeginTrans:1.0
//
CORBA::Boolean
OBMarshalStubImpl_PG_Resource::pg_BeginTrans()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_BeginTrans", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::Boolean _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_boolean();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_set_recoverycoordinator:1.0
//
void
OBMarshalStubImpl_PG_Resource::pg_set_recoverycoordinator(::CosTransactions::RecoveryCoordinator_ptr _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_set_recoverycoordinator", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                OBMarshal(_ob_a0, _ob_out);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:CosTransactions/TRANSACTION_REQUIRED:1.0") == 0)
                    {
                        ::CosTransactions::TRANSACTION_REQUIRED _ob_except;
                        ::CosTransactions::TRANSACTION_REQUIRED::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/TRANSACTION_ROLLEDBACK:1.0") == 0)
                    {
                        ::CosTransactions::TRANSACTION_ROLLEDBACK _ob_except;
                        ::CosTransactions::TRANSACTION_ROLLEDBACK::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/INVALID_TRANSACTION:1.0") == 0)
                    {
                        ::CosTransactions::INVALID_TRANSACTION _ob_except;
                        ::CosTransactions::INVALID_TRANSACTION::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/WRONG_TRANSACTION:1.0") == 0)
                    {
                        ::CosTransactions::WRONG_TRANSACTION _ob_except;
                        ::CosTransactions::WRONG_TRANSACTION::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_heuristic_decision:1.0
//
void
OBMarshalStubImpl_PG_Resource::pg_heuristic_decision()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_heuristic_decision", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:CosTransactions/TRANSACTION_REQUIRED:1.0") == 0)
                    {
                        ::CosTransactions::TRANSACTION_REQUIRED _ob_except;
                        ::CosTransactions::TRANSACTION_REQUIRED::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/TRANSACTION_ROLLEDBACK:1.0") == 0)
                    {
                        ::CosTransactions::TRANSACTION_ROLLEDBACK _ob_except;
                        ::CosTransactions::TRANSACTION_ROLLEDBACK::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/INVALID_TRANSACTION:1.0") == 0)
                    {
                        ::CosTransactions::INVALID_TRANSACTION _ob_except;
                        ::CosTransactions::INVALID_TRANSACTION::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                    else if(strcmp(_ob_id, "IDL:CosTransactions/WRONG_TRANSACTION:1.0") == 0)
                    {
                        ::CosTransactions::WRONG_TRANSACTION _ob_except;
                        ::CosTransactions::WRONG_TRANSACTION::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQsetdb:1.0
//
void
OBMarshalStubImpl_PG_Resource::pg_PQsetdb(const char* _ob_a0,
                                          const char* _ob_a1,
                                          const char* _ob_a2,
                                          const char* _ob_a3,
                                          const char* _ob_a4)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQsetdb", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
                _ob_out -> write_string(_ob_a1);
                _ob_out -> write_string(_ob_a2);
                _ob_out -> write_string(_ob_a3);
                _ob_out -> write_string(_ob_a4);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                try
                {
                    CORBA::String_var _ob_id = _OB_unmarshalExceptionId(_ob_down);
                    if(strcmp(_ob_id, "IDL:PG_Resource/PG_CONNECTTION_FAILED:1.0") == 0)
                    {
                        ::PG_Resource::PG_CONNECTTION_FAILED _ob_except;
                        ::PG_Resource::PG_CONNECTTION_FAILED::_OB_unmarshal(_ob_except, _ob_in);
                        _OB_setUserException(_ob_down, _ob_except);
                    }
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                _OB_postUnmarshal(_ob_down);
                return;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQdb:1.0
//
char*
OBMarshalStubImpl_PG_Resource::pg_PQdb()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQdb", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::String_var _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_string();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQhost:1.0
//
char*
OBMarshalStubImpl_PG_Resource::pg_PQhost()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQhost", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::String_var _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_string();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQoptions:1.0
//
char*
OBMarshalStubImpl_PG_Resource::pg_PQoptions()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQoptions", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::String_var _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_string();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQport:1.0
//
char*
OBMarshalStubImpl_PG_Resource::pg_PQport()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQport", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::String_var _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_string();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQtty:1.0
//
char*
OBMarshalStubImpl_PG_Resource::pg_PQtty()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQtty", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::String_var _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_string();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQstatus:1.0
//
::pg_ConnStatusType
OBMarshalStubImpl_PG_Resource::pg_PQstatus()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQstatus", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::pg_ConnStatusType _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_short();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQerrorMessage:1.0
//
char*
OBMarshalStubImpl_PG_Resource::pg_PQerrorMessage()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQerrorMessage", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::String_var _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_string();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQfinish:1.0
//
void
OBMarshalStubImpl_PG_Resource::pg_PQfinish()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQfinish", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQreset:1.0
//
void
OBMarshalStubImpl_PG_Resource::pg_PQreset()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQreset", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQuntrace:1.0
//
void
OBMarshalStubImpl_PG_Resource::pg_PQuntrace()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQuntrace", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQexec:1.0
//
void
OBMarshalStubImpl_PG_Resource::pg_PQexec(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQexec", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQresultStatus:1.0
//
::pg_ExecStatusType
OBMarshalStubImpl_PG_Resource::pg_PQresultStatus()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQresultStatus", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::pg_ExecStatusType _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_short();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQntuples:1.0
//
CORBA::Long
OBMarshalStubImpl_PG_Resource::pg_PQntuples()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQntuples", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::Long _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_long();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQnfields:1.0
//
CORBA::Long
OBMarshalStubImpl_PG_Resource::pg_PQnfields()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQnfields", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::Long _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_long();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQfname:1.0
//
char*
OBMarshalStubImpl_PG_Resource::pg_PQfname(CORBA::Long _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQfname", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_long(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::String_var _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_string();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQfnumber:1.0
//
CORBA::Long
OBMarshalStubImpl_PG_Resource::pg_PQfnumber(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQfnumber", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::Long _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_long();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQftype:1.0
//
CORBA::Long
OBMarshalStubImpl_PG_Resource::pg_PQftype(CORBA::Long _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQftype", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_long(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::Long _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_long();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQfsize:1.0
//
CORBA::Long
OBMarshalStubImpl_PG_Resource::pg_PQfsize(CORBA::Long _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQfsize", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_long(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::Long _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_long();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQgetvalue:1.0
//
char*
OBMarshalStubImpl_PG_Resource::pg_PQgetvalue(CORBA::Long _ob_a0,
                                             CORBA::Long _ob_a1)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQgetvalue", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_long(_ob_a0);
                _ob_out -> write_long(_ob_a1);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::String_var _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_string();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQgetlength:1.0
//
CORBA::Long
OBMarshalStubImpl_PG_Resource::pg_PQgetlength(CORBA::Long _ob_a0,
                                              CORBA::Long _ob_a1)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQgetlength", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_long(_ob_a0);
                _ob_out -> write_long(_ob_a1);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::Long _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_long();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQcmdStatus:1.0
//
char*
OBMarshalStubImpl_PG_Resource::pg_PQcmdStatus()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQcmdStatus", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::String_var _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_string();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQoidStatus:1.0
//
char*
OBMarshalStubImpl_PG_Resource::pg_PQoidStatus()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQoidStatus", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::String_var _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_string();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQclear:1.0
//
void
OBMarshalStubImpl_PG_Resource::pg_PQclear()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQclear", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQnotifies:1.0
//
::pg_PGnotify*
OBMarshalStubImpl_PG_Resource::pg_PQnotifies()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQnotifies", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                ::pg_PGnotify_var _ob_r;
                try
                {
                    _ob_r = new ::pg_PGnotify;
                    ::pg_PGnotify::_OB_unmarshal(_ob_r.inout(), _ob_in);
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQgetline:1.0
//
CORBA::Long
OBMarshalStubImpl_PG_Resource::pg_PQgetline(const char* _ob_a0,
                                            CORBA::Long _ob_a1)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQgetline", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
                _ob_out -> write_long(_ob_a1);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::Long _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_long();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQputline:1.0
//
void
OBMarshalStubImpl_PG_Resource::pg_PQputline(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQputline", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_PQendcopy:1.0
//
CORBA::Long
OBMarshalStubImpl_PG_Resource::pg_PQendcopy()
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_PQendcopy", true);
        try
        {
            _OB_preMarshal(_ob_down);
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::Long _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_long();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r;
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_fe_getauthname:1.0
//
char*
OBMarshalStubImpl_PG_Resource::pg_fe_getauthname(const char* _ob_a0)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_fe_getauthname", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            bool _ob_uex;
            OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_down, _ob_uex);
            if(_ob_uex)
            {
                _OB_postUnmarshal(_ob_down);
            }
            else
            {
                CORBA::String_var _ob_r;
                try
                {
                    _ob_r = _ob_in -> read_string();
                }
                catch(const CORBA::SystemException& _ob_ex)
                {
                    _OB_unmarshalEx(_ob_down, _ob_ex);
                }
                _OB_postUnmarshal(_ob_down);
                return _ob_r._retn();
            }
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}

//
// IDL:PG_Resource/pg_fe_setauthsvc:1.0
//
void
OBMarshalStubImpl_PG_Resource::pg_fe_setauthsvc(const char* _ob_a0,
                                                const char* _ob_a1)
{
    while(true)
    {
        OB::Downcall_var _ob_down = _OB_createDowncall("pg_fe_setauthsvc", true);
        try
        {
            OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_down);
            try
            {
                _ob_out -> write_string(_ob_a0);
                _ob_out -> write_string(_ob_a1);
            }
            catch(const CORBA::SystemException& _ob_ex)
            {
                _OB_marshalEx(_ob_down, _ob_ex);
            }
            _OB_postMarshal(_ob_down);
            _OB_request(_ob_down);
            _OB_preUnmarshal(_ob_down);
            _OB_postUnmarshal(_ob_down);
            return;
        }
        catch(const OB::FailureException& _ob_ex)
        {
            _OB_handleFailureException(_ob_down, _ob_ex);
        }
    }
}
