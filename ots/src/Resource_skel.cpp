// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.0

#include <OB/CORBAServer.h>
#include <Resource_skel.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010000L)
#       error ORBacus version mismatch!
#   endif
#endif

//
// IDL:ResourceFactory/create:1.0
//
void
POA_ResourceFactory::_OB_op_create(OB::Upcall_ptr _ob_up)
{
    CORBA::Short _ob_a0;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    _ob_a0 = _ob_in -> read_short();
    _OB_postUnmarshal(_ob_up);
    Resource_var _ob_r = create(_ob_a0);
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    OBMarshal(_ob_r.in(), _ob_out);
    _OB_postMarshal(_ob_up);
}

//
// IDL:ResourceFactory:1.0
//
CORBA::Boolean
POA_ResourceFactory::_is_a(const char* type)
    throw(CORBA::SystemException)
{
    const char** _ob_ids = ResourceFactory::_OB_staticIds();
    for(CORBA::ULong _ob_i = 0 ; _ob_ids[_ob_i] != 0 ; _ob_i++)
        if(strcmp(type, _ob_ids[_ob_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_ResourceFactory::_primary_interface(const PortableServer::ObjectId&,
                                        PortableServer::POA_ptr)
{
    return CORBA::string_dup(ResourceFactory::_OB_staticIds()[0]);
}

ResourceFactory_ptr
POA_ResourceFactory::_this()
{
    CORBA::Object_var obj = _OB_createReference();
    ResourceFactory_var result = ResourceFactory::_narrow(obj);
    return result._retn();
}

OB::DirectStubImpl_ptr
POA_ResourceFactory::_OB_createDirectStubImpl(PortableServer::POA_ptr poa,
                                              const PortableServer::ObjectId& oid)
{
    return new OBDirectStubImpl_ResourceFactory(poa, oid, this);
}

void
POA_ResourceFactory::_OB_dispatch(OB::Upcall_ptr _ob_up)
{
    static const char* _ob_names[] =
    {
        "create"
    };
    static const CORBA::ULong _ob_numNames = 1;

    switch(_OB_findOperation(_ob_up, _ob_names, _ob_numNames))
    {
    case 0: // create
        _OB_op_create(_ob_up);
        return;
    }

    _OB_dispatchBase(_ob_up);
}

//
// IDL:Resource/prepare:1.0
//
void
POA_Resource::_OB_op_prepare(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    CosTransactions::Vote _ob_r = prepare();
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    _ob_out -> write_ulong((CORBA::ULong)_ob_r);
    _OB_postMarshal(_ob_up);
}

//
// IDL:Resource/rollback:1.0
//
void
POA_Resource::_OB_op_rollback(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    rollback();
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:Resource/commit:1.0
//
void
POA_Resource::_OB_op_commit(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    commit();
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:Resource/commit_one_phase:1.0
//
void
POA_Resource::_OB_op_commit_one_phase(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    commit_one_phase();
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:Resource/forget:1.0
//
void
POA_Resource::_OB_op_forget(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    forget();
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:Resource/release:1.0
//
void
POA_Resource::_OB_op_release(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    release();
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:Resource/BeginTrans:1.0
//
void
POA_Resource::_OB_op_BeginTrans(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    CORBA::Boolean _ob_r = BeginTrans();
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    _ob_out -> write_boolean(_ob_r);
    _OB_postMarshal(_ob_up);
}

//
// IDL:Resource/set_recoverycoordinator:1.0
//
void
POA_Resource::_OB_op_set_recoverycoordinator(OB::Upcall_ptr _ob_up)
{
    CosTransactions::RecoveryCoordinator_var _ob_a0;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    OBUnmarshal(_ob_a0.inout(), _ob_in);
    _OB_postUnmarshal(_ob_up);
    set_recoverycoordinator(_ob_a0);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:Resource/heuristic_decision:1.0
//
void
POA_Resource::_OB_op_heuristic_decision(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    heuristic_decision();
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:Resource:1.0
//
CORBA::Boolean
POA_Resource::_is_a(const char* type)
    throw(CORBA::SystemException)
{
    const char** _ob_ids = Resource::_OB_staticIds();
    for(CORBA::ULong _ob_i = 0 ; _ob_ids[_ob_i] != 0 ; _ob_i++)
        if(strcmp(type, _ob_ids[_ob_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_Resource::_primary_interface(const PortableServer::ObjectId&,
                                 PortableServer::POA_ptr)
{
    return CORBA::string_dup(Resource::_OB_staticIds()[0]);
}

Resource_ptr
POA_Resource::_this()
{
    CORBA::Object_var obj = _OB_createReference();
    Resource_var result = Resource::_narrow(obj);
    return result._retn();
}

OB::DirectStubImpl_ptr
POA_Resource::_OB_createDirectStubImpl(PortableServer::POA_ptr poa,
                                       const PortableServer::ObjectId& oid)
{
    return new OBDirectStubImpl_Resource(poa, oid, this);
}

void
POA_Resource::_OB_dispatch(OB::Upcall_ptr _ob_up)
{
    static const char* _ob_names[] =
    {
        "BeginTrans",
        "commit",
        "commit_one_phase",
        "forget",
        "heuristic_decision",
        "pg_BeginTrans",
        "pg_PQclear",
        "pg_PQcmdStatus",
        "pg_PQdb",
        "pg_PQendcopy",
        "pg_PQerrorMessage",
        "pg_PQexec",
        "pg_PQfinish",
        "pg_PQfname",
        "pg_PQfnumber",
        "pg_PQfsize",
        "pg_PQftype",
        "pg_PQgetlength",
        "pg_PQgetline",
        "pg_PQgetvalue",
        "pg_PQhost",
        "pg_PQnfields",
        "pg_PQnotifies",
        "pg_PQntuples",
        "pg_PQoidStatus",
        "pg_PQoptions",
        "pg_PQport",
        "pg_PQputline",
        "pg_PQreset",
        "pg_PQresultStatus",
        "pg_PQsetdb",
        "pg_PQstatus",
        "pg_PQtty",
        "pg_PQuntrace",
        "pg_commit",
        "pg_commit_one_phase",
        "pg_fe_getauthname",
        "pg_fe_setauthsvc",
        "pg_forget",
        "pg_heuristic_decision",
        "pg_prepare",
        "pg_release",
        "pg_rollback",
        "pg_set_recoverycoordinator",
        "prepare",
        "release",
        "rollback",
        "set_recoverycoordinator"
    };
    static const CORBA::ULong _ob_numNames = 48;

    switch(_OB_findOperation(_ob_up, _ob_names, _ob_numNames))
    {
    case 0: // BeginTrans
        _OB_op_BeginTrans(_ob_up);
        return;

    case 1: // commit
        _OB_op_commit(_ob_up);
        return;

    case 2: // commit_one_phase
        _OB_op_commit_one_phase(_ob_up);
        return;

    case 3: // forget
        _OB_op_forget(_ob_up);
        return;

    case 4: // heuristic_decision
        _OB_op_heuristic_decision(_ob_up);
        return;

    case 5: // pg_BeginTrans
        _OB_op_pg_BeginTrans(_ob_up);
        return;

    case 6: // pg_PQclear
        _OB_op_pg_PQclear(_ob_up);
        return;

    case 7: // pg_PQcmdStatus
        _OB_op_pg_PQcmdStatus(_ob_up);
        return;

    case 8: // pg_PQdb
        _OB_op_pg_PQdb(_ob_up);
        return;

    case 9: // pg_PQendcopy
        _OB_op_pg_PQendcopy(_ob_up);
        return;

    case 10: // pg_PQerrorMessage
        _OB_op_pg_PQerrorMessage(_ob_up);
        return;

    case 11: // pg_PQexec
        _OB_op_pg_PQexec(_ob_up);
        return;

    case 12: // pg_PQfinish
        _OB_op_pg_PQfinish(_ob_up);
        return;

    case 13: // pg_PQfname
        _OB_op_pg_PQfname(_ob_up);
        return;

    case 14: // pg_PQfnumber
        _OB_op_pg_PQfnumber(_ob_up);
        return;

    case 15: // pg_PQfsize
        _OB_op_pg_PQfsize(_ob_up);
        return;

    case 16: // pg_PQftype
        _OB_op_pg_PQftype(_ob_up);
        return;

    case 17: // pg_PQgetlength
        _OB_op_pg_PQgetlength(_ob_up);
        return;

    case 18: // pg_PQgetline
        _OB_op_pg_PQgetline(_ob_up);
        return;

    case 19: // pg_PQgetvalue
        _OB_op_pg_PQgetvalue(_ob_up);
        return;

    case 20: // pg_PQhost
        _OB_op_pg_PQhost(_ob_up);
        return;

    case 21: // pg_PQnfields
        _OB_op_pg_PQnfields(_ob_up);
        return;

    case 22: // pg_PQnotifies
        _OB_op_pg_PQnotifies(_ob_up);
        return;

    case 23: // pg_PQntuples
        _OB_op_pg_PQntuples(_ob_up);
        return;

    case 24: // pg_PQoidStatus
        _OB_op_pg_PQoidStatus(_ob_up);
        return;

    case 25: // pg_PQoptions
        _OB_op_pg_PQoptions(_ob_up);
        return;

    case 26: // pg_PQport
        _OB_op_pg_PQport(_ob_up);
        return;

    case 27: // pg_PQputline
        _OB_op_pg_PQputline(_ob_up);
        return;

    case 28: // pg_PQreset
        _OB_op_pg_PQreset(_ob_up);
        return;

    case 29: // pg_PQresultStatus
        _OB_op_pg_PQresultStatus(_ob_up);
        return;

    case 30: // pg_PQsetdb
        _OB_op_pg_PQsetdb(_ob_up);
        return;

    case 31: // pg_PQstatus
        _OB_op_pg_PQstatus(_ob_up);
        return;

    case 32: // pg_PQtty
        _OB_op_pg_PQtty(_ob_up);
        return;

    case 33: // pg_PQuntrace
        _OB_op_pg_PQuntrace(_ob_up);
        return;

    case 34: // pg_commit
        _OB_op_pg_commit(_ob_up);
        return;

    case 35: // pg_commit_one_phase
        _OB_op_pg_commit_one_phase(_ob_up);
        return;

    case 36: // pg_fe_getauthname
        _OB_op_pg_fe_getauthname(_ob_up);
        return;

    case 37: // pg_fe_setauthsvc
        _OB_op_pg_fe_setauthsvc(_ob_up);
        return;

    case 38: // pg_forget
        _OB_op_pg_forget(_ob_up);
        return;

    case 39: // pg_heuristic_decision
        _OB_op_pg_heuristic_decision(_ob_up);
        return;

    case 40: // pg_prepare
        _OB_op_pg_prepare(_ob_up);
        return;

    case 41: // pg_release
        _OB_op_pg_release(_ob_up);
        return;

    case 42: // pg_rollback
        _OB_op_pg_rollback(_ob_up);
        return;

    case 43: // pg_set_recoverycoordinator
        _OB_op_pg_set_recoverycoordinator(_ob_up);
        return;

    case 44: // prepare
        _OB_op_prepare(_ob_up);
        return;

    case 45: // release
        _OB_op_release(_ob_up);
        return;

    case 46: // rollback
        _OB_op_rollback(_ob_up);
        return;

    case 47: // set_recoverycoordinator
        _OB_op_set_recoverycoordinator(_ob_up);
        return;
    }

    _OB_dispatchBase(_ob_up);
}

//
// IDL:ResourceFactory:1.0
//
OBDirectStubImpl_ResourceFactory::OBDirectStubImpl_ResourceFactory(PortableServer::POA_ptr poa,
                                                                   const PortableServer::ObjectId& oid,
                                                                   PortableServer::ServantBase* servant)
#ifdef HAVE_VCPLUSPLUS_BUGS
{
    _ob_initialize(poa, oid, servant);
}
#else
    : OB::DirectStubImpl(poa, oid, servant)
{
}
#endif

//
// IDL:ResourceFactory/create:1.0
//
Resource_ptr
OBDirectStubImpl_ResourceFactory::create(CORBA::Short _ob_a0)
{
    OB::InvocationHandler _ob_handler(this, "create");
    return dynamic_cast<POA_ResourceFactory*>(_ob_servant_) -> create(_ob_a0);
}

//
// IDL:Resource:1.0
//
OBDirectStubImpl_Resource::OBDirectStubImpl_Resource(PortableServer::POA_ptr poa,
                                                     const PortableServer::ObjectId& oid,
                                                     PortableServer::ServantBase* servant)
#ifdef HAVE_VCPLUSPLUS_BUGS
{
    _ob_initialize(poa, oid, servant);
}
#else
    : OB::DirectStubImpl(poa, oid, servant),
      OBDirectStubImpl_PG_Resource(poa, oid, servant)
{
}
#endif

//
// IDL:Resource/prepare:1.0
//
CosTransactions::Vote
OBDirectStubImpl_Resource::prepare()
{
    OB::InvocationHandler _ob_handler(this, "prepare");
    return dynamic_cast<POA_Resource*>(_ob_servant_) -> prepare();
}

//
// IDL:Resource/rollback:1.0
//
void
OBDirectStubImpl_Resource::rollback()
{
    OB::InvocationHandler _ob_handler(this, "rollback");
    dynamic_cast<POA_Resource*>(_ob_servant_) -> rollback();
}

//
// IDL:Resource/commit:1.0
//
void
OBDirectStubImpl_Resource::commit()
{
    OB::InvocationHandler _ob_handler(this, "commit");
    dynamic_cast<POA_Resource*>(_ob_servant_) -> commit();
}

//
// IDL:Resource/commit_one_phase:1.0
//
void
OBDirectStubImpl_Resource::commit_one_phase()
{
    OB::InvocationHandler _ob_handler(this, "commit_one_phase");
    dynamic_cast<POA_Resource*>(_ob_servant_) -> commit_one_phase();
}

//
// IDL:Resource/forget:1.0
//
void
OBDirectStubImpl_Resource::forget()
{
    OB::InvocationHandler _ob_handler(this, "forget");
    dynamic_cast<POA_Resource*>(_ob_servant_) -> forget();
}

//
// IDL:Resource/release:1.0
//
void
OBDirectStubImpl_Resource::release()
{
    OB::InvocationHandler _ob_handler(this, "release");
    dynamic_cast<POA_Resource*>(_ob_servant_) -> release();
}

//
// IDL:Resource/BeginTrans:1.0
//
CORBA::Boolean
OBDirectStubImpl_Resource::BeginTrans()
{
    OB::InvocationHandler _ob_handler(this, "BeginTrans");
    return dynamic_cast<POA_Resource*>(_ob_servant_) -> BeginTrans();
}

//
// IDL:Resource/set_recoverycoordinator:1.0
//
void
OBDirectStubImpl_Resource::set_recoverycoordinator(CosTransactions::RecoveryCoordinator_ptr _ob_a0)
{
    OB::InvocationHandler _ob_handler(this, "set_recoverycoordinator");
    dynamic_cast<POA_Resource*>(_ob_servant_) -> set_recoverycoordinator(_ob_a0);
}

//
// IDL:Resource/heuristic_decision:1.0
//
void
OBDirectStubImpl_Resource::heuristic_decision()
{
    OB::InvocationHandler _ob_handler(this, "heuristic_decision");
    dynamic_cast<POA_Resource*>(_ob_servant_) -> heuristic_decision();
}
