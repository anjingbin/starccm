// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.0

#include <OB/CORBAServer.h>
#include <CosTransactionsOTS_skel.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010000L)
#       error ORBacus version mismatch!
#   endif
#endif

//
// IDL:CosTransactions:1.0
//

//
// IDL:CosTransactions/TransactionFactory/create:1.0
//
void
POA_CosTransactions::TransactionFactory::_OB_op_create(OB::Upcall_ptr _ob_up)
{
    CORBA::ULong _ob_a0;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    _ob_a0 = _ob_in -> read_ulong();
    _OB_postUnmarshal(_ob_up);
    CosTransactions::Control_var _ob_r = create(_ob_a0);
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    OBMarshal(_ob_r.in(), _ob_out);
    _OB_postMarshal(_ob_up);
}

//
// IDL:CosTransactions/TransactionFactory:1.0
//
CORBA::Boolean
POA_CosTransactions::TransactionFactory::_is_a(const char* type)
    throw(CORBA::SystemException)
{
    const char** _ob_ids = CosTransactions::TransactionFactory::_OB_staticIds();
    for(CORBA::ULong _ob_i = 0 ; _ob_ids[_ob_i] != 0 ; _ob_i++)
        if(strcmp(type, _ob_ids[_ob_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_CosTransactions::TransactionFactory::_primary_interface(const PortableServer::ObjectId&,
                                                            PortableServer::POA_ptr)
{
    return CORBA::string_dup(CosTransactions::TransactionFactory::_OB_staticIds()[0]);
}

CosTransactions::TransactionFactory_ptr
POA_CosTransactions::TransactionFactory::_this()
{
    CORBA::Object_var obj = _OB_createReference();
    CosTransactions::TransactionFactory_var result = CosTransactions::TransactionFactory::_narrow(obj);
    return result._retn();
}

OB::DirectStubImpl_ptr
POA_CosTransactions::TransactionFactory::_OB_createDirectStubImpl(PortableServer::POA_ptr poa,
                                                                  const PortableServer::ObjectId& oid)
{
    return new OBDirectStubImpl_CosTransactions::TransactionFactory(poa, oid, this);
}

void
POA_CosTransactions::TransactionFactory::_OB_dispatch(OB::Upcall_ptr _ob_up)
{
    static const char* _ob_names[] =
    {
        "create"
    };
    static const CORBA::ULong _ob_numNames = 1;

    switch(_OB_findOperation(_ob_up, _ob_names, _ob_numNames))
    {
    case 0: // create
        _OB_op_create(_ob_up);
        return;
    }

    _OB_dispatchBase(_ob_up);
}

//
// IDL:CosTransactions/Control/get_terminator:1.0
//
void
POA_CosTransactions::Control::_OB_op_get_terminator(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    CosTransactions::Terminator_var _ob_r = get_terminator();
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    OBMarshal(_ob_r.in(), _ob_out);
    _OB_postMarshal(_ob_up);
}

//
// IDL:CosTransactions/Control/get_coordinator:1.0
//
void
POA_CosTransactions::Control::_OB_op_get_coordinator(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    CosTransactions::Coordinator_var _ob_r = get_coordinator();
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    OBMarshal(_ob_r.in(), _ob_out);
    _OB_postMarshal(_ob_up);
}

//
// IDL:CosTransactions/Control/release:1.0
//
void
POA_CosTransactions::Control::_OB_op_release(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    release();
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:CosTransactions/Control:1.0
//
CORBA::Boolean
POA_CosTransactions::Control::_is_a(const char* type)
    throw(CORBA::SystemException)
{
    const char** _ob_ids = CosTransactions::Control::_OB_staticIds();
    for(CORBA::ULong _ob_i = 0 ; _ob_ids[_ob_i] != 0 ; _ob_i++)
        if(strcmp(type, _ob_ids[_ob_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_CosTransactions::Control::_primary_interface(const PortableServer::ObjectId&,
                                                 PortableServer::POA_ptr)
{
    return CORBA::string_dup(CosTransactions::Control::_OB_staticIds()[0]);
}

CosTransactions::Control_ptr
POA_CosTransactions::Control::_this()
{
    CORBA::Object_var obj = _OB_createReference();
    CosTransactions::Control_var result = CosTransactions::Control::_narrow(obj);
    return result._retn();
}

OB::DirectStubImpl_ptr
POA_CosTransactions::Control::_OB_createDirectStubImpl(PortableServer::POA_ptr poa,
                                                       const PortableServer::ObjectId& oid)
{
    return new OBDirectStubImpl_CosTransactions::Control(poa, oid, this);
}

void
POA_CosTransactions::Control::_OB_dispatch(OB::Upcall_ptr _ob_up)
{
    static const char* _ob_names[] =
    {
        "get_coordinator",
        "get_terminator",
        "release"
    };
    static const CORBA::ULong _ob_numNames = 3;

    switch(_OB_findOperation(_ob_up, _ob_names, _ob_numNames))
    {
    case 0: // get_coordinator
        _OB_op_get_coordinator(_ob_up);
        return;

    case 1: // get_terminator
        _OB_op_get_terminator(_ob_up);
        return;

    case 2: // release
        _OB_op_release(_ob_up);
        return;
    }

    _OB_dispatchBase(_ob_up);
}

//
// IDL:CosTransactions/Terminator/commit:1.0
//
void
POA_CosTransactions::Terminator::_OB_op_commit(OB::Upcall_ptr _ob_up)
{
    CORBA::Boolean _ob_a0;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    _ob_a0 = _ob_in -> read_boolean();
    _OB_postUnmarshal(_ob_up);
    commit(_ob_a0);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:CosTransactions/Terminator/rollback:1.0
//
void
POA_CosTransactions::Terminator::_OB_op_rollback(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    rollback();
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:CosTransactions/Terminator/release:1.0
//
void
POA_CosTransactions::Terminator::_OB_op_release(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    release();
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:CosTransactions/Terminator:1.0
//
CORBA::Boolean
POA_CosTransactions::Terminator::_is_a(const char* type)
    throw(CORBA::SystemException)
{
    const char** _ob_ids = CosTransactions::Terminator::_OB_staticIds();
    for(CORBA::ULong _ob_i = 0 ; _ob_ids[_ob_i] != 0 ; _ob_i++)
        if(strcmp(type, _ob_ids[_ob_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_CosTransactions::Terminator::_primary_interface(const PortableServer::ObjectId&,
                                                    PortableServer::POA_ptr)
{
    return CORBA::string_dup(CosTransactions::Terminator::_OB_staticIds()[0]);
}

CosTransactions::Terminator_ptr
POA_CosTransactions::Terminator::_this()
{
    CORBA::Object_var obj = _OB_createReference();
    CosTransactions::Terminator_var result = CosTransactions::Terminator::_narrow(obj);
    return result._retn();
}

OB::DirectStubImpl_ptr
POA_CosTransactions::Terminator::_OB_createDirectStubImpl(PortableServer::POA_ptr poa,
                                                          const PortableServer::ObjectId& oid)
{
    return new OBDirectStubImpl_CosTransactions::Terminator(poa, oid, this);
}

void
POA_CosTransactions::Terminator::_OB_dispatch(OB::Upcall_ptr _ob_up)
{
    static const char* _ob_names[] =
    {
        "commit",
        "release",
        "rollback"
    };
    static const CORBA::ULong _ob_numNames = 3;

    switch(_OB_findOperation(_ob_up, _ob_names, _ob_numNames))
    {
    case 0: // commit
        _OB_op_commit(_ob_up);
        return;

    case 1: // release
        _OB_op_release(_ob_up);
        return;

    case 2: // rollback
        _OB_op_rollback(_ob_up);
        return;
    }

    _OB_dispatchBase(_ob_up);
}

//
// IDL:CosTransactions/Coordinator/get_status:1.0
//
void
POA_CosTransactions::Coordinator::_OB_op_get_status(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    CosTransactions::Status _ob_r = get_status();
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    _ob_out -> write_ulong((CORBA::ULong)_ob_r);
    _OB_postMarshal(_ob_up);
}

//
// IDL:CosTransactions/Coordinator/is_same_transaction:1.0
//
void
POA_CosTransactions::Coordinator::_OB_op_is_same_transaction(OB::Upcall_ptr _ob_up)
{
    CosTransactions::Coordinator_var _ob_a0;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    OBUnmarshal(_ob_a0.inout(), _ob_in);
    _OB_postUnmarshal(_ob_up);
    CORBA::Boolean _ob_r = is_same_transaction(_ob_a0);
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    _ob_out -> write_boolean(_ob_r);
    _OB_postMarshal(_ob_up);
}

//
// IDL:CosTransactions/Coordinator/register_resource:1.0
//
void
POA_CosTransactions::Coordinator::_OB_op_register_resource(OB::Upcall_ptr _ob_up)
{
    Resource_var _ob_a0;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    OBUnmarshal(_ob_a0.inout(), _ob_in);
    _OB_postUnmarshal(_ob_up);
    CosTransactions::RecoveryCoordinator_var _ob_r = register_resource(_ob_a0);
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    OBMarshal(_ob_r.in(), _ob_out);
    _OB_postMarshal(_ob_up);
}

//
// IDL:CosTransactions/Coordinator/register_synchronization:1.0
//
void
POA_CosTransactions::Coordinator::_OB_op_register_synchronization(OB::Upcall_ptr _ob_up)
{
    CosTransactions::Synchronization_var _ob_a0;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    OBUnmarshal(_ob_a0.inout(), _ob_in);
    _OB_postUnmarshal(_ob_up);
    register_synchronization(_ob_a0);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:CosTransactions/Coordinator/rollback_only:1.0
//
void
POA_CosTransactions::Coordinator::_OB_op_rollback_only(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    rollback_only();
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:CosTransactions/Coordinator/commit:1.0
//
void
POA_CosTransactions::Coordinator::_OB_op_commit(OB::Upcall_ptr _ob_up)
{
    CORBA::Boolean _ob_a0;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    _ob_a0 = _ob_in -> read_boolean();
    _OB_postUnmarshal(_ob_up);
    commit(_ob_a0);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:CosTransactions/Coordinator/rollback:1.0
//
void
POA_CosTransactions::Coordinator::_OB_op_rollback(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    rollback();
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:CosTransactions/Coordinator/change_resourcevote:1.0
//
void
POA_CosTransactions::Coordinator::_OB_op_change_resourcevote(OB::Upcall_ptr _ob_up)
{
    Resource_var _ob_a0;
    CosTransactions::ResourceVote _ob_a1;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    OBUnmarshal(_ob_a0.inout(), _ob_in);
    _ob_a1 = (::CosTransactions::ResourceVote)_ob_in -> read_ulong();
    _OB_postUnmarshal(_ob_up);
    change_resourcevote(_ob_a0, _ob_a1);
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:CosTransactions/Coordinator/release:1.0
//
void
POA_CosTransactions::Coordinator::_OB_op_release(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    release();
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:CosTransactions/Coordinator:1.0
//
CORBA::Boolean
POA_CosTransactions::Coordinator::_is_a(const char* type)
    throw(CORBA::SystemException)
{
    const char** _ob_ids = CosTransactions::Coordinator::_OB_staticIds();
    for(CORBA::ULong _ob_i = 0 ; _ob_ids[_ob_i] != 0 ; _ob_i++)
        if(strcmp(type, _ob_ids[_ob_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_CosTransactions::Coordinator::_primary_interface(const PortableServer::ObjectId&,
                                                     PortableServer::POA_ptr)
{
    return CORBA::string_dup(CosTransactions::Coordinator::_OB_staticIds()[0]);
}

CosTransactions::Coordinator_ptr
POA_CosTransactions::Coordinator::_this()
{
    CORBA::Object_var obj = _OB_createReference();
    CosTransactions::Coordinator_var result = CosTransactions::Coordinator::_narrow(obj);
    return result._retn();
}

OB::DirectStubImpl_ptr
POA_CosTransactions::Coordinator::_OB_createDirectStubImpl(PortableServer::POA_ptr poa,
                                                           const PortableServer::ObjectId& oid)
{
    return new OBDirectStubImpl_CosTransactions::Coordinator(poa, oid, this);
}

void
POA_CosTransactions::Coordinator::_OB_dispatch(OB::Upcall_ptr _ob_up)
{
    static const char* _ob_names[] =
    {
        "change_resourcevote",
        "commit",
        "get_status",
        "is_same_transaction",
        "register_resource",
        "register_synchronization",
        "release",
        "rollback",
        "rollback_only"
    };
    static const CORBA::ULong _ob_numNames = 9;

    switch(_OB_findOperation(_ob_up, _ob_names, _ob_numNames))
    {
    case 0: // change_resourcevote
        _OB_op_change_resourcevote(_ob_up);
        return;

    case 1: // commit
        _OB_op_commit(_ob_up);
        return;

    case 2: // get_status
        _OB_op_get_status(_ob_up);
        return;

    case 3: // is_same_transaction
        _OB_op_is_same_transaction(_ob_up);
        return;

    case 4: // register_resource
        _OB_op_register_resource(_ob_up);
        return;

    case 5: // register_synchronization
        _OB_op_register_synchronization(_ob_up);
        return;

    case 6: // release
        _OB_op_release(_ob_up);
        return;

    case 7: // rollback
        _OB_op_rollback(_ob_up);
        return;

    case 8: // rollback_only
        _OB_op_rollback_only(_ob_up);
        return;
    }

    _OB_dispatchBase(_ob_up);
}

//
// IDL:CosTransactions/RecoveryCoordinator/replay_completion:1.0
//
void
POA_CosTransactions::RecoveryCoordinator::_OB_op_replay_completion(OB::Upcall_ptr _ob_up)
{
    Resource_var _ob_a0;
    OB::InputStreamImpl* _ob_in = _OB_preUnmarshal(_ob_up);
    OBUnmarshal(_ob_a0.inout(), _ob_in);
    _OB_postUnmarshal(_ob_up);
    CosTransactions::Status _ob_r = replay_completion(_ob_a0);
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    _ob_out -> write_ulong((CORBA::ULong)_ob_r);
    _OB_postMarshal(_ob_up);
}

//
// IDL:CosTransactions/RecoveryCoordinator/release:1.0
//
void
POA_CosTransactions::RecoveryCoordinator::_OB_op_release(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    release();
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:CosTransactions/RecoveryCoordinator:1.0
//
CORBA::Boolean
POA_CosTransactions::RecoveryCoordinator::_is_a(const char* type)
    throw(CORBA::SystemException)
{
    const char** _ob_ids = CosTransactions::RecoveryCoordinator::_OB_staticIds();
    for(CORBA::ULong _ob_i = 0 ; _ob_ids[_ob_i] != 0 ; _ob_i++)
        if(strcmp(type, _ob_ids[_ob_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_CosTransactions::RecoveryCoordinator::_primary_interface(const PortableServer::ObjectId&,
                                                             PortableServer::POA_ptr)
{
    return CORBA::string_dup(CosTransactions::RecoveryCoordinator::_OB_staticIds()[0]);
}

CosTransactions::RecoveryCoordinator_ptr
POA_CosTransactions::RecoveryCoordinator::_this()
{
    CORBA::Object_var obj = _OB_createReference();
    CosTransactions::RecoveryCoordinator_var result = CosTransactions::RecoveryCoordinator::_narrow(obj);
    return result._retn();
}

OB::DirectStubImpl_ptr
POA_CosTransactions::RecoveryCoordinator::_OB_createDirectStubImpl(PortableServer::POA_ptr poa,
                                                                   const PortableServer::ObjectId& oid)
{
    return new OBDirectStubImpl_CosTransactions::RecoveryCoordinator(poa, oid, this);
}

void
POA_CosTransactions::RecoveryCoordinator::_OB_dispatch(OB::Upcall_ptr _ob_up)
{
    static const char* _ob_names[] =
    {
        "release",
        "replay_completion"
    };
    static const CORBA::ULong _ob_numNames = 2;

    switch(_OB_findOperation(_ob_up, _ob_names, _ob_numNames))
    {
    case 0: // release
        _OB_op_release(_ob_up);
        return;

    case 1: // replay_completion
        _OB_op_replay_completion(_ob_up);
        return;
    }

    _OB_dispatchBase(_ob_up);
}

//
// IDL:CosTransactions/TransactionalObject:1.0
//
CORBA::Boolean
POA_CosTransactions::TransactionalObject::_is_a(const char* type)
    throw(CORBA::SystemException)
{
    const char** _ob_ids = CosTransactions::TransactionalObject::_OB_staticIds();
    for(CORBA::ULong _ob_i = 0 ; _ob_ids[_ob_i] != 0 ; _ob_i++)
        if(strcmp(type, _ob_ids[_ob_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_CosTransactions::TransactionalObject::_primary_interface(const PortableServer::ObjectId&,
                                                             PortableServer::POA_ptr)
{
    return CORBA::string_dup(CosTransactions::TransactionalObject::_OB_staticIds()[0]);
}

CosTransactions::TransactionalObject_ptr
POA_CosTransactions::TransactionalObject::_this()
{
    CORBA::Object_var obj = _OB_createReference();
    CosTransactions::TransactionalObject_var result = CosTransactions::TransactionalObject::_narrow(obj);
    return result._retn();
}

OB::DirectStubImpl_ptr
POA_CosTransactions::TransactionalObject::_OB_createDirectStubImpl(PortableServer::POA_ptr poa,
                                                                   const PortableServer::ObjectId& oid)
{
    return new OBDirectStubImpl_CosTransactions::TransactionalObject(poa, oid, this);
}

void
POA_CosTransactions::TransactionalObject::_OB_dispatch(OB::Upcall_ptr _ob_up)
{
    _OB_dispatchBase(_ob_up);
}

//
// IDL:CosTransactions/TransactionFactory:1.0
//
OBDirectStubImpl_CosTransactions::TransactionFactory::TransactionFactory(PortableServer::POA_ptr poa,
                                                                         const PortableServer::ObjectId& oid,
                                                                         PortableServer::ServantBase* servant)
#ifdef HAVE_VCPLUSPLUS_BUGS
{
    _ob_initialize(poa, oid, servant);
}
#else
    : OB::DirectStubImpl(poa, oid, servant)
{
}
#endif

//
// IDL:CosTransactions/TransactionFactory/create:1.0
//
CosTransactions::Control_ptr
OBDirectStubImpl_CosTransactions::TransactionFactory::create(CORBA::ULong _ob_a0)
{
    OB::InvocationHandler _ob_handler(this, "create");
    return dynamic_cast<POA_CosTransactions::TransactionFactory*>(_ob_servant_) -> create(_ob_a0);
}

//
// IDL:CosTransactions/Control:1.0
//
OBDirectStubImpl_CosTransactions::Control::Control(PortableServer::POA_ptr poa,
                                                   const PortableServer::ObjectId& oid,
                                                   PortableServer::ServantBase* servant)
#ifdef HAVE_VCPLUSPLUS_BUGS
{
    _ob_initialize(poa, oid, servant);
}
#else
    : OB::DirectStubImpl(poa, oid, servant)
{
}
#endif

//
// IDL:CosTransactions/Control/get_terminator:1.0
//
CosTransactions::Terminator_ptr
OBDirectStubImpl_CosTransactions::Control::get_terminator()
{
    OB::InvocationHandler _ob_handler(this, "get_terminator");
    return dynamic_cast<POA_CosTransactions::Control*>(_ob_servant_) -> get_terminator();
}

//
// IDL:CosTransactions/Control/get_coordinator:1.0
//
CosTransactions::Coordinator_ptr
OBDirectStubImpl_CosTransactions::Control::get_coordinator()
{
    OB::InvocationHandler _ob_handler(this, "get_coordinator");
    return dynamic_cast<POA_CosTransactions::Control*>(_ob_servant_) -> get_coordinator();
}

//
// IDL:CosTransactions/Control/release:1.0
//
void
OBDirectStubImpl_CosTransactions::Control::release()
{
    OB::InvocationHandler _ob_handler(this, "release");
    dynamic_cast<POA_CosTransactions::Control*>(_ob_servant_) -> release();
}

//
// IDL:CosTransactions/Terminator:1.0
//
OBDirectStubImpl_CosTransactions::Terminator::Terminator(PortableServer::POA_ptr poa,
                                                         const PortableServer::ObjectId& oid,
                                                         PortableServer::ServantBase* servant)
#ifdef HAVE_VCPLUSPLUS_BUGS
{
    _ob_initialize(poa, oid, servant);
}
#else
    : OB::DirectStubImpl(poa, oid, servant)
{
}
#endif

//
// IDL:CosTransactions/Terminator/commit:1.0
//
void
OBDirectStubImpl_CosTransactions::Terminator::commit(CORBA::Boolean _ob_a0)
{
    OB::InvocationHandler _ob_handler(this, "commit");
    dynamic_cast<POA_CosTransactions::Terminator*>(_ob_servant_) -> commit(_ob_a0);
}

//
// IDL:CosTransactions/Terminator/rollback:1.0
//
void
OBDirectStubImpl_CosTransactions::Terminator::rollback()
{
    OB::InvocationHandler _ob_handler(this, "rollback");
    dynamic_cast<POA_CosTransactions::Terminator*>(_ob_servant_) -> rollback();
}

//
// IDL:CosTransactions/Terminator/release:1.0
//
void
OBDirectStubImpl_CosTransactions::Terminator::release()
{
    OB::InvocationHandler _ob_handler(this, "release");
    dynamic_cast<POA_CosTransactions::Terminator*>(_ob_servant_) -> release();
}

//
// IDL:CosTransactions/Coordinator:1.0
//
OBDirectStubImpl_CosTransactions::Coordinator::Coordinator(PortableServer::POA_ptr poa,
                                                           const PortableServer::ObjectId& oid,
                                                           PortableServer::ServantBase* servant)
#ifdef HAVE_VCPLUSPLUS_BUGS
{
    _ob_initialize(poa, oid, servant);
}
#else
    : OB::DirectStubImpl(poa, oid, servant)
{
}
#endif

//
// IDL:CosTransactions/Coordinator/get_status:1.0
//
CosTransactions::Status
OBDirectStubImpl_CosTransactions::Coordinator::get_status()
{
    OB::InvocationHandler _ob_handler(this, "get_status");
    return dynamic_cast<POA_CosTransactions::Coordinator*>(_ob_servant_) -> get_status();
}

//
// IDL:CosTransactions/Coordinator/is_same_transaction:1.0
//
CORBA::Boolean
OBDirectStubImpl_CosTransactions::Coordinator::is_same_transaction(CosTransactions::Coordinator_ptr _ob_a0)
{
    OB::InvocationHandler _ob_handler(this, "is_same_transaction");
    return dynamic_cast<POA_CosTransactions::Coordinator*>(_ob_servant_) -> is_same_transaction(_ob_a0);
}

//
// IDL:CosTransactions/Coordinator/register_resource:1.0
//
CosTransactions::RecoveryCoordinator_ptr
OBDirectStubImpl_CosTransactions::Coordinator::register_resource(Resource_ptr _ob_a0)
{
    OB::InvocationHandler _ob_handler(this, "register_resource");
    return dynamic_cast<POA_CosTransactions::Coordinator*>(_ob_servant_) -> register_resource(_ob_a0);
}

//
// IDL:CosTransactions/Coordinator/register_synchronization:1.0
//
void
OBDirectStubImpl_CosTransactions::Coordinator::register_synchronization(CosTransactions::Synchronization_ptr _ob_a0)
{
    OB::InvocationHandler _ob_handler(this, "register_synchronization");
    dynamic_cast<POA_CosTransactions::Coordinator*>(_ob_servant_) -> register_synchronization(_ob_a0);
}

//
// IDL:CosTransactions/Coordinator/rollback_only:1.0
//
void
OBDirectStubImpl_CosTransactions::Coordinator::rollback_only()
{
    OB::InvocationHandler _ob_handler(this, "rollback_only");
    dynamic_cast<POA_CosTransactions::Coordinator*>(_ob_servant_) -> rollback_only();
}

//
// IDL:CosTransactions/Coordinator/commit:1.0
//
void
OBDirectStubImpl_CosTransactions::Coordinator::commit(CORBA::Boolean _ob_a0)
{
    OB::InvocationHandler _ob_handler(this, "commit");
    dynamic_cast<POA_CosTransactions::Coordinator*>(_ob_servant_) -> commit(_ob_a0);
}

//
// IDL:CosTransactions/Coordinator/rollback:1.0
//
void
OBDirectStubImpl_CosTransactions::Coordinator::rollback()
{
    OB::InvocationHandler _ob_handler(this, "rollback");
    dynamic_cast<POA_CosTransactions::Coordinator*>(_ob_servant_) -> rollback();
}

//
// IDL:CosTransactions/Coordinator/change_resourcevote:1.0
//
void
OBDirectStubImpl_CosTransactions::Coordinator::change_resourcevote(Resource_ptr _ob_a0,
                                                                   CosTransactions::ResourceVote _ob_a1)
{
    OB::InvocationHandler _ob_handler(this, "change_resourcevote");
    dynamic_cast<POA_CosTransactions::Coordinator*>(_ob_servant_) -> change_resourcevote(_ob_a0, _ob_a1);
}

//
// IDL:CosTransactions/Coordinator/release:1.0
//
void
OBDirectStubImpl_CosTransactions::Coordinator::release()
{
    OB::InvocationHandler _ob_handler(this, "release");
    dynamic_cast<POA_CosTransactions::Coordinator*>(_ob_servant_) -> release();
}

//
// IDL:CosTransactions/RecoveryCoordinator:1.0
//
OBDirectStubImpl_CosTransactions::RecoveryCoordinator::RecoveryCoordinator(PortableServer::POA_ptr poa,
                                                                           const PortableServer::ObjectId& oid,
                                                                           PortableServer::ServantBase* servant)
#ifdef HAVE_VCPLUSPLUS_BUGS
{
    _ob_initialize(poa, oid, servant);
}
#else
    : OB::DirectStubImpl(poa, oid, servant)
{
}
#endif

//
// IDL:CosTransactions/RecoveryCoordinator/replay_completion:1.0
//
CosTransactions::Status
OBDirectStubImpl_CosTransactions::RecoveryCoordinator::replay_completion(Resource_ptr _ob_a0)
{
    OB::InvocationHandler _ob_handler(this, "replay_completion");
    return dynamic_cast<POA_CosTransactions::RecoveryCoordinator*>(_ob_servant_) -> replay_completion(_ob_a0);
}

//
// IDL:CosTransactions/RecoveryCoordinator/release:1.0
//
void
OBDirectStubImpl_CosTransactions::RecoveryCoordinator::release()
{
    OB::InvocationHandler _ob_handler(this, "release");
    dynamic_cast<POA_CosTransactions::RecoveryCoordinator*>(_ob_servant_) -> release();
}

//
// IDL:CosTransactions/TransactionalObject:1.0
//
OBDirectStubImpl_CosTransactions::TransactionalObject::TransactionalObject(PortableServer::POA_ptr poa,
                                                                           const PortableServer::ObjectId& oid,
                                                                           PortableServer::ServantBase* servant)
#ifdef HAVE_VCPLUSPLUS_BUGS
{
    _ob_initialize(poa, oid, servant);
}
#else
    : OB::DirectStubImpl(poa, oid, servant)
{
}
#endif
