// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.0

#include <OB/CORBAClient.h>
#include <CosTransactionsPolicy.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010000L)
#       error ORBacus version mismatch!
#   endif
#endif

namespace CosTransactions
{

::OB::TypeCodeConst _tc_InvocationPolicy(
"01f812002100000049000000010000002900000049444c3a436f735472616e73616374696f6e7"
"32f496e766f636174696f6e506f6c6963793a312e3000ea120011000000496e766f636174696f"
"6e506f6c69637900"
);

::OB::TypeCodeConst _tc_OTSPolicy(
"01f81200210000003a00000001b57f002200000049444c3a436f735472616e73616374696f6e7"
"32f4f5453506f6c6963793a312e300004000a0000004f5453506f6c69637900"
);

::OB::TypeCodeConst _tc_NonTxTargetPolicy(
"01f81200210000004a00000001b57f002a00000049444c3a436f735472616e73616374696f6e7"
"32f4e6f6e5478546172676574506f6c6963793a312e30003400120000004e6f6e547854617267"
"6574506f6c69637900"
);

} // End of namespace CosTransactions

//
// IDL:CosTransactions/InvocationPolicy:1.0
//
void
OBDuplicate(CosTransactions::InvocationPolicy_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(CosTransactions::InvocationPolicy_ptr p)
{
    if(p)
        p -> _remove_ref();
}

CosTransactions::InvocationPolicy_ptr
CosTransactions::InvocationPolicy::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        InvocationPolicy_ptr v = dynamic_cast<InvocationPolicy_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

CosTransactions::InvocationPolicy_ptr
CosTransactions::InvocationPolicy::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        InvocationPolicy_ptr v = dynamic_cast<InvocationPolicy_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

void
OBMarshal(CosTransactions::InvocationPolicy_ptr, OB::OutputStreamImpl*)
{
    throw CORBA::MARSHAL();
}

void
OBUnmarshal(CosTransactions::InvocationPolicy_ptr&, OB::InputStreamImpl*)
{
    throw CORBA::MARSHAL();
}

void
operator<<=(CORBA::Any& any, CosTransactions::InvocationPolicy_ptr* v)
{
    any.replace(CosTransactions::_tc_InvocationPolicy, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, CosTransactions::InvocationPolicy_ptr v)
{
    CosTransactions::InvocationPolicy_ptr val = CosTransactions::InvocationPolicy::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, CosTransactions::InvocationPolicy_ptr& v)
{
    if(any.check_type(CosTransactions::_tc_InvocationPolicy))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<CosTransactions::InvocationPolicy_ptr>(val);
        }
        else
            v = CosTransactions::InvocationPolicy::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:CosTransactions/OTSPolicy:1.0
//
void
OBDuplicate(CosTransactions::OTSPolicy_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(CosTransactions::OTSPolicy_ptr p)
{
    if(p)
        p -> _remove_ref();
}

CosTransactions::OTSPolicy_ptr
CosTransactions::OTSPolicy::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OTSPolicy_ptr v = dynamic_cast<OTSPolicy_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

CosTransactions::OTSPolicy_ptr
CosTransactions::OTSPolicy::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OTSPolicy_ptr v = dynamic_cast<OTSPolicy_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

void
OBMarshal(CosTransactions::OTSPolicy_ptr, OB::OutputStreamImpl*)
{
    throw CORBA::MARSHAL();
}

void
OBUnmarshal(CosTransactions::OTSPolicy_ptr&, OB::InputStreamImpl*)
{
    throw CORBA::MARSHAL();
}

void
operator<<=(CORBA::Any& any, CosTransactions::OTSPolicy_ptr* v)
{
    any.replace(CosTransactions::_tc_OTSPolicy, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, CosTransactions::OTSPolicy_ptr v)
{
    CosTransactions::OTSPolicy_ptr val = CosTransactions::OTSPolicy::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, CosTransactions::OTSPolicy_ptr& v)
{
    if(any.check_type(CosTransactions::_tc_OTSPolicy))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<CosTransactions::OTSPolicy_ptr>(val);
        }
        else
            v = CosTransactions::OTSPolicy::_nil();

        return true;
    }
    else
        return false;
}

//
// IDL:CosTransactions/NonTxTargetPolicy:1.0
//
void
OBDuplicate(CosTransactions::NonTxTargetPolicy_ptr p)
{
    if(p)
        p -> _add_ref();
}

void
OBRelease(CosTransactions::NonTxTargetPolicy_ptr p)
{
    if(p)
        p -> _remove_ref();
}

CosTransactions::NonTxTargetPolicy_ptr
CosTransactions::NonTxTargetPolicy::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        NonTxTargetPolicy_ptr v = dynamic_cast<NonTxTargetPolicy_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

CosTransactions::NonTxTargetPolicy_ptr
CosTransactions::NonTxTargetPolicy::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        NonTxTargetPolicy_ptr v = dynamic_cast<NonTxTargetPolicy_ptr>(p);
        if(v)
            return _duplicate(v);

        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

void
OBMarshal(CosTransactions::NonTxTargetPolicy_ptr, OB::OutputStreamImpl*)
{
    throw CORBA::MARSHAL();
}

void
OBUnmarshal(CosTransactions::NonTxTargetPolicy_ptr&, OB::InputStreamImpl*)
{
    throw CORBA::MARSHAL();
}

void
operator<<=(CORBA::Any& any, CosTransactions::NonTxTargetPolicy_ptr* v)
{
    any.replace(CosTransactions::_tc_NonTxTargetPolicy, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, CosTransactions::NonTxTargetPolicy_ptr v)
{
    CosTransactions::NonTxTargetPolicy_ptr val = CosTransactions::NonTxTargetPolicy::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, CosTransactions::NonTxTargetPolicy_ptr& v)
{
    if(any.check_type(CosTransactions::_tc_NonTxTargetPolicy))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<CosTransactions::NonTxTargetPolicy_ptr>(val);
        }
        else
            v = CosTransactions::NonTxTargetPolicy::_nil();

        return true;
    }
    else
        return false;
}
