// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.0

#ifndef ___CosTransactionsOTS_skel_h__
#define ___CosTransactionsOTS_skel_h__

#include <CosTransactionsOTS.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010000L)
#       error ORBacus version mismatch!
#   endif
#endif

//
// IDL:CosTransactions:1.0
//
namespace POA_CosTransactions
{

//
// IDL:CosTransactions/TransactionFactory:1.0
//
class TransactionFactory : virtual public PortableServer::ServantBase
{
    TransactionFactory(const TransactionFactory&);
    void operator=(const TransactionFactory&);

protected:

    //
    // IDL:CosTransactions/TransactionFactory/create:1.0
    //
    void _OB_op_create(OB::Upcall_ptr);

public:

    TransactionFactory() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    CosTransactions::TransactionFactory_ptr _this();

    virtual OB::DirectStubImpl_ptr _OB_createDirectStubImpl(PortableServer::POA_ptr,
                                                            const PortableServer::ObjectId&);
    virtual void _OB_dispatch(OB::Upcall_ptr);

    //
    // IDL:CosTransactions/TransactionFactory/create:1.0
    //
    virtual CosTransactions::Control_ptr create(CORBA::ULong time_out)
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;
};

//
// IDL:CosTransactions/Control:1.0
//
class Control : virtual public PortableServer::ServantBase
{
    Control(const Control&);
    void operator=(const Control&);

protected:

    //
    // IDL:CosTransactions/Control/get_terminator:1.0
    //
    void _OB_op_get_terminator(OB::Upcall_ptr);

    //
    // IDL:CosTransactions/Control/get_coordinator:1.0
    //
    void _OB_op_get_coordinator(OB::Upcall_ptr);

    //
    // IDL:CosTransactions/Control/release:1.0
    //
    void _OB_op_release(OB::Upcall_ptr);

public:

    Control() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    CosTransactions::Control_ptr _this();

    virtual OB::DirectStubImpl_ptr _OB_createDirectStubImpl(PortableServer::POA_ptr,
                                                            const PortableServer::ObjectId&);
    virtual void _OB_dispatch(OB::Upcall_ptr);

    //
    // IDL:CosTransactions/Control/get_terminator:1.0
    //
    virtual CosTransactions::Terminator_ptr get_terminator()
        throw(CosTransactions::Unavailable,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:CosTransactions/Control/get_coordinator:1.0
    //
    virtual CosTransactions::Coordinator_ptr get_coordinator()
        throw(CosTransactions::Unavailable,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:CosTransactions/Control/release:1.0
    //
    virtual void release()
        throw(CORBA::SystemException) = 0;
};

//
// IDL:CosTransactions/Terminator:1.0
//
class Terminator : virtual public PortableServer::ServantBase
{
    Terminator(const Terminator&);
    void operator=(const Terminator&);

protected:

    //
    // IDL:CosTransactions/Terminator/commit:1.0
    //
    void _OB_op_commit(OB::Upcall_ptr);

    //
    // IDL:CosTransactions/Terminator/rollback:1.0
    //
    void _OB_op_rollback(OB::Upcall_ptr);

    //
    // IDL:CosTransactions/Terminator/release:1.0
    //
    void _OB_op_release(OB::Upcall_ptr);

public:

    Terminator() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    CosTransactions::Terminator_ptr _this();

    virtual OB::DirectStubImpl_ptr _OB_createDirectStubImpl(PortableServer::POA_ptr,
                                                            const PortableServer::ObjectId&);
    virtual void _OB_dispatch(OB::Upcall_ptr);

    //
    // IDL:CosTransactions/Terminator/commit:1.0
    //
    virtual void commit(CORBA::Boolean report_heuristics)
        throw(CosTransactions::HeuristicMixed,
              CosTransactions::HeuristicHazard,
              CosTransactions::HeuristicRollback,
              CosTransactions::HeuristicCommit,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:CosTransactions/Terminator/rollback:1.0
    //
    virtual void rollback()
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:CosTransactions/Terminator/release:1.0
    //
    virtual void release()
        throw(CORBA::SystemException) = 0;
};

//
// IDL:CosTransactions/Coordinator:1.0
//
class Coordinator : virtual public PortableServer::ServantBase
{
    Coordinator(const Coordinator&);
    void operator=(const Coordinator&);

protected:

    //
    // IDL:CosTransactions/Coordinator/get_status:1.0
    //
    void _OB_op_get_status(OB::Upcall_ptr);

    //
    // IDL:CosTransactions/Coordinator/is_same_transaction:1.0
    //
    void _OB_op_is_same_transaction(OB::Upcall_ptr);

    //
    // IDL:CosTransactions/Coordinator/register_resource:1.0
    //
    void _OB_op_register_resource(OB::Upcall_ptr);

    //
    // IDL:CosTransactions/Coordinator/register_synchronization:1.0
    //
    void _OB_op_register_synchronization(OB::Upcall_ptr);

    //
    // IDL:CosTransactions/Coordinator/rollback_only:1.0
    //
    void _OB_op_rollback_only(OB::Upcall_ptr);

    //
    // IDL:CosTransactions/Coordinator/commit:1.0
    //
    void _OB_op_commit(OB::Upcall_ptr);

    //
    // IDL:CosTransactions/Coordinator/rollback:1.0
    //
    void _OB_op_rollback(OB::Upcall_ptr);

    //
    // IDL:CosTransactions/Coordinator/change_resourcevote:1.0
    //
    void _OB_op_change_resourcevote(OB::Upcall_ptr);

    //
    // IDL:CosTransactions/Coordinator/release:1.0
    //
    void _OB_op_release(OB::Upcall_ptr);

public:

    Coordinator() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    CosTransactions::Coordinator_ptr _this();

    virtual OB::DirectStubImpl_ptr _OB_createDirectStubImpl(PortableServer::POA_ptr,
                                                            const PortableServer::ObjectId&);
    virtual void _OB_dispatch(OB::Upcall_ptr);

    //
    // IDL:CosTransactions/Coordinator/get_status:1.0
    //
    virtual CosTransactions::Status get_status()
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:CosTransactions/Coordinator/is_same_transaction:1.0
    //
    virtual CORBA::Boolean is_same_transaction(CosTransactions::Coordinator_ptr tc)
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:CosTransactions/Coordinator/register_resource:1.0
    //
    virtual CosTransactions::RecoveryCoordinator_ptr register_resource(Resource_ptr r)
        throw(CosTransactions::Inactive,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:CosTransactions/Coordinator/register_synchronization:1.0
    //
    virtual void register_synchronization(CosTransactions::Synchronization_ptr sync)
        throw(CosTransactions::Inactive,
              CosTransactions::SynchronizationUnavailable,
              CORBA::SystemException) = 0;

    //
    // IDL:CosTransactions/Coordinator/rollback_only:1.0
    //
    virtual void rollback_only()
        throw(CosTransactions::Inactive,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:CosTransactions/Coordinator/commit:1.0
    //
    virtual void commit(CORBA::Boolean report_heuristics)
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:CosTransactions/Coordinator/rollback:1.0
    //
    virtual void rollback()
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:CosTransactions/Coordinator/change_resourcevote:1.0
    //
    virtual void change_resourcevote(Resource_ptr r,
                                     CosTransactions::ResourceVote rv)
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:CosTransactions/Coordinator/release:1.0
    //
    virtual void release()
        throw(CORBA::SystemException) = 0;
};

//
// IDL:CosTransactions/RecoveryCoordinator:1.0
//
class RecoveryCoordinator : virtual public PortableServer::ServantBase
{
    RecoveryCoordinator(const RecoveryCoordinator&);
    void operator=(const RecoveryCoordinator&);

protected:

    //
    // IDL:CosTransactions/RecoveryCoordinator/replay_completion:1.0
    //
    void _OB_op_replay_completion(OB::Upcall_ptr);

    //
    // IDL:CosTransactions/RecoveryCoordinator/release:1.0
    //
    void _OB_op_release(OB::Upcall_ptr);

public:

    RecoveryCoordinator() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    CosTransactions::RecoveryCoordinator_ptr _this();

    virtual OB::DirectStubImpl_ptr _OB_createDirectStubImpl(PortableServer::POA_ptr,
                                                            const PortableServer::ObjectId&);
    virtual void _OB_dispatch(OB::Upcall_ptr);

    //
    // IDL:CosTransactions/RecoveryCoordinator/replay_completion:1.0
    //
    virtual CosTransactions::Status replay_completion(Resource_ptr r)
        throw(CosTransactions::NotPrepared,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:CosTransactions/RecoveryCoordinator/release:1.0
    //
    virtual void release()
        throw(CORBA::SystemException) = 0;
};

//
// IDL:CosTransactions/TransactionalObject:1.0
//
class TransactionalObject : virtual public PortableServer::ServantBase
{
    TransactionalObject(const TransactionalObject&);
    void operator=(const TransactionalObject&);

public:

    TransactionalObject() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    CosTransactions::TransactionalObject_ptr _this();

    virtual OB::DirectStubImpl_ptr _OB_createDirectStubImpl(PortableServer::POA_ptr,
                                                            const PortableServer::ObjectId&);
    virtual void _OB_dispatch(OB::Upcall_ptr);
};

} // End of namespace POA_CosTransactions

//
// IDL:CosTransactions:1.0
//
namespace OBDirectStubImpl_CosTransactions
{

//
// IDL:CosTransactions/TransactionFactory:1.0
//
class TransactionFactory : virtual public OBStubImpl_CosTransactions::TransactionFactory,
                           virtual public OB::DirectStubImpl
{
    TransactionFactory(const TransactionFactory&);
    void operator=(const TransactionFactory&);

protected:

#ifdef HAVE_VCPLUSPLUS_BUGS

    TransactionFactory() { }

#endif

    TransactionFactory(PortableServer::POA_ptr,
                       const PortableServer::ObjectId&,
                       PortableServer::ServantBase*);

    friend class POA_CosTransactions::TransactionFactory;

public:

    //
    // IDL:CosTransactions/TransactionFactory/create:1.0
    //
    virtual CosTransactions::Control_ptr create(CORBA::ULong time_out);
};

//
// IDL:CosTransactions/Control:1.0
//
class Control : virtual public OBStubImpl_CosTransactions::Control,
                virtual public OB::DirectStubImpl
{
    Control(const Control&);
    void operator=(const Control&);

protected:

#ifdef HAVE_VCPLUSPLUS_BUGS

    Control() { }

#endif

    Control(PortableServer::POA_ptr,
            const PortableServer::ObjectId&,
            PortableServer::ServantBase*);

    friend class POA_CosTransactions::Control;

public:

    //
    // IDL:CosTransactions/Control/get_terminator:1.0
    //
    virtual CosTransactions::Terminator_ptr get_terminator();

    //
    // IDL:CosTransactions/Control/get_coordinator:1.0
    //
    virtual CosTransactions::Coordinator_ptr get_coordinator();

    //
    // IDL:CosTransactions/Control/release:1.0
    //
    virtual void release();
};

//
// IDL:CosTransactions/Terminator:1.0
//
class Terminator : virtual public OBStubImpl_CosTransactions::Terminator,
                   virtual public OB::DirectStubImpl
{
    Terminator(const Terminator&);
    void operator=(const Terminator&);

protected:

#ifdef HAVE_VCPLUSPLUS_BUGS

    Terminator() { }

#endif

    Terminator(PortableServer::POA_ptr,
               const PortableServer::ObjectId&,
               PortableServer::ServantBase*);

    friend class POA_CosTransactions::Terminator;

public:

    //
    // IDL:CosTransactions/Terminator/commit:1.0
    //
    virtual void commit(CORBA::Boolean report_heuristics);

    //
    // IDL:CosTransactions/Terminator/rollback:1.0
    //
    virtual void rollback();

    //
    // IDL:CosTransactions/Terminator/release:1.0
    //
    virtual void release();
};

//
// IDL:CosTransactions/Coordinator:1.0
//
class Coordinator : virtual public OBStubImpl_CosTransactions::Coordinator,
                    virtual public OB::DirectStubImpl
{
    Coordinator(const Coordinator&);
    void operator=(const Coordinator&);

protected:

#ifdef HAVE_VCPLUSPLUS_BUGS

    Coordinator() { }

#endif

    Coordinator(PortableServer::POA_ptr,
                const PortableServer::ObjectId&,
                PortableServer::ServantBase*);

    friend class POA_CosTransactions::Coordinator;

public:

    //
    // IDL:CosTransactions/Coordinator/get_status:1.0
    //
    virtual CosTransactions::Status get_status();

    //
    // IDL:CosTransactions/Coordinator/is_same_transaction:1.0
    //
    virtual CORBA::Boolean is_same_transaction(CosTransactions::Coordinator_ptr tc);

    //
    // IDL:CosTransactions/Coordinator/register_resource:1.0
    //
    virtual CosTransactions::RecoveryCoordinator_ptr register_resource(Resource_ptr r);

    //
    // IDL:CosTransactions/Coordinator/register_synchronization:1.0
    //
    virtual void register_synchronization(CosTransactions::Synchronization_ptr sync);

    //
    // IDL:CosTransactions/Coordinator/rollback_only:1.0
    //
    virtual void rollback_only();

    //
    // IDL:CosTransactions/Coordinator/commit:1.0
    //
    virtual void commit(CORBA::Boolean report_heuristics);

    //
    // IDL:CosTransactions/Coordinator/rollback:1.0
    //
    virtual void rollback();

    //
    // IDL:CosTransactions/Coordinator/change_resourcevote:1.0
    //
    virtual void change_resourcevote(Resource_ptr r,
                                     CosTransactions::ResourceVote rv);

    //
    // IDL:CosTransactions/Coordinator/release:1.0
    //
    virtual void release();
};

//
// IDL:CosTransactions/RecoveryCoordinator:1.0
//
class RecoveryCoordinator : virtual public OBStubImpl_CosTransactions::RecoveryCoordinator,
                            virtual public OB::DirectStubImpl
{
    RecoveryCoordinator(const RecoveryCoordinator&);
    void operator=(const RecoveryCoordinator&);

protected:

#ifdef HAVE_VCPLUSPLUS_BUGS

    RecoveryCoordinator() { }

#endif

    RecoveryCoordinator(PortableServer::POA_ptr,
                        const PortableServer::ObjectId&,
                        PortableServer::ServantBase*);

    friend class POA_CosTransactions::RecoveryCoordinator;

public:

    //
    // IDL:CosTransactions/RecoveryCoordinator/replay_completion:1.0
    //
    virtual CosTransactions::Status replay_completion(Resource_ptr r);

    //
    // IDL:CosTransactions/RecoveryCoordinator/release:1.0
    //
    virtual void release();
};

//
// IDL:CosTransactions/TransactionalObject:1.0
//
class TransactionalObject : virtual public OBStubImpl_CosTransactions::TransactionalObject,
                            virtual public OB::DirectStubImpl
{
    TransactionalObject(const TransactionalObject&);
    void operator=(const TransactionalObject&);

protected:

#ifdef HAVE_VCPLUSPLUS_BUGS

    TransactionalObject() { }

#endif

    TransactionalObject(PortableServer::POA_ptr,
                        const PortableServer::ObjectId&,
                        PortableServer::ServantBase*);

    friend class POA_CosTransactions::TransactionalObject;

public:
};

} // End of namespace OBDirectStubImpl_CosTransactions

#endif
