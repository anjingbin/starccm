// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.0

#ifndef ___CosTransactionsPolicy_h__
#define ___CosTransactionsPolicy_h__

#include <CosTransactionsPolicyType.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010000L)
#       error ORBacus version mismatch!
#   endif
#endif

namespace CosTransactions
{

class InvocationPolicy;
typedef InvocationPolicy* InvocationPolicy_ptr;
typedef InvocationPolicy* InvocationPolicyRef;

extern OB::TypeCodeConst _tc_InvocationPolicy;

class OTSPolicy;
typedef OTSPolicy* OTSPolicy_ptr;
typedef OTSPolicy* OTSPolicyRef;

extern OB::TypeCodeConst _tc_OTSPolicy;

class NonTxTargetPolicy;
typedef NonTxTargetPolicy* NonTxTargetPolicy_ptr;
typedef NonTxTargetPolicy* NonTxTargetPolicyRef;

extern OB::TypeCodeConst _tc_NonTxTargetPolicy;

} // End of namespace CosTransactions

void OBDuplicate(CosTransactions::InvocationPolicy_ptr);
void OBRelease(CosTransactions::InvocationPolicy_ptr);

void OBMarshal(CosTransactions::InvocationPolicy_ptr, OB::OutputStreamImpl*);
void OBUnmarshal(CosTransactions::InvocationPolicy_ptr&, OB::InputStreamImpl*);

void OBDuplicate(CosTransactions::OTSPolicy_ptr);
void OBRelease(CosTransactions::OTSPolicy_ptr);

void OBMarshal(CosTransactions::OTSPolicy_ptr, OB::OutputStreamImpl*);
void OBUnmarshal(CosTransactions::OTSPolicy_ptr&, OB::InputStreamImpl*);

void OBDuplicate(CosTransactions::NonTxTargetPolicy_ptr);
void OBRelease(CosTransactions::NonTxTargetPolicy_ptr);

void OBMarshal(CosTransactions::NonTxTargetPolicy_ptr, OB::OutputStreamImpl*);
void OBUnmarshal(CosTransactions::NonTxTargetPolicy_ptr&, OB::InputStreamImpl*);

namespace CosTransactions
{

typedef OB::ObjVar< InvocationPolicy > InvocationPolicy_var;
typedef OB::ObjOut< InvocationPolicy > InvocationPolicy_out;

typedef OB::ObjVar< OTSPolicy > OTSPolicy_var;
typedef OB::ObjOut< OTSPolicy > OTSPolicy_out;

typedef OB::ObjVar< NonTxTargetPolicy > NonTxTargetPolicy_var;
typedef OB::ObjOut< NonTxTargetPolicy > NonTxTargetPolicy_out;

} // End of namespace CosTransactions

namespace OBStubImpl_CosTransactions
{

} // End of namespace OBStubImpl_CosTransactions

namespace OBStubImpl_CosTransactions
{

} // End of namespace OBStubImpl_CosTransactions

//
// IDL:CosTransactions:1.0
//
namespace CosTransactions
{

//
// IDL:CosTransactions/InvocationPolicy:1.0
//
class InvocationPolicy : virtual public ::CORBA::Policy
{
    InvocationPolicy(const InvocationPolicy&);
    void operator=(const InvocationPolicy&);

protected:

    static const char* ids_[];

public:

    InvocationPolicy() { }
    virtual ~InvocationPolicy() { }

    typedef InvocationPolicy_ptr _ptr_type;
    typedef InvocationPolicy_var _var_type;

    static inline InvocationPolicy_ptr
    _duplicate(InvocationPolicy_ptr p)
    {
        if(p)
            p -> _add_ref();
        return p;
    }

    static inline InvocationPolicy_ptr
    _nil()
    {
        return 0;
    }

    static InvocationPolicy_ptr _narrow(CORBA::Object_ptr);

    static InvocationPolicy_ptr _narrow(CORBA::AbstractBase_ptr);


    //
    // IDL:CosTransactions/InvocationPolicy/ipv:1.0
    //
    virtual InvocationPolicyValue ipv() = 0;
};

//
// IDL:CosTransactions/OTSPolicy:1.0
//
class OTSPolicy : virtual public ::CORBA::Policy
{
    OTSPolicy(const OTSPolicy&);
    void operator=(const OTSPolicy&);

protected:

    static const char* ids_[];

public:

    OTSPolicy() { }
    virtual ~OTSPolicy() { }

    typedef OTSPolicy_ptr _ptr_type;
    typedef OTSPolicy_var _var_type;

    static inline OTSPolicy_ptr
    _duplicate(OTSPolicy_ptr p)
    {
        if(p)
            p -> _add_ref();
        return p;
    }

    static inline OTSPolicy_ptr
    _nil()
    {
        return 0;
    }

    static OTSPolicy_ptr _narrow(CORBA::Object_ptr);

    static OTSPolicy_ptr _narrow(CORBA::AbstractBase_ptr);


    //
    // IDL:CosTransactions/OTSPolicy/tpv:1.0
    //
    virtual OTSPolicyValue tpv() = 0;
};

//
// IDL:CosTransactions/NonTxTargetPolicy:1.0
//
class NonTxTargetPolicy : virtual public ::CORBA::Policy
{
    NonTxTargetPolicy(const NonTxTargetPolicy&);
    void operator=(const NonTxTargetPolicy&);

protected:

    static const char* ids_[];

public:

    NonTxTargetPolicy() { }
    virtual ~NonTxTargetPolicy() { }

    typedef NonTxTargetPolicy_ptr _ptr_type;
    typedef NonTxTargetPolicy_var _var_type;

    static inline NonTxTargetPolicy_ptr
    _duplicate(NonTxTargetPolicy_ptr p)
    {
        if(p)
            p -> _add_ref();
        return p;
    }

    static inline NonTxTargetPolicy_ptr
    _nil()
    {
        return 0;
    }

    static NonTxTargetPolicy_ptr _narrow(CORBA::Object_ptr);

    static NonTxTargetPolicy_ptr _narrow(CORBA::AbstractBase_ptr);


    //
    // IDL:CosTransactions/NonTxTargetPolicy/tpv:1.0
    //
    virtual NonTxTargetPolicyValue tpv() = 0;
};

} // End of namespace CosTransactions

//
// IDL:CosTransactions:1.0
//
namespace OBProxy_CosTransactions
{

} // End of namespace OBProxy_CosTransactions

//
// IDL:CosTransactions:1.0
//
namespace OBStubImpl_CosTransactions
{

} // End of namespace OBStubImpl_CosTransactions

//
// IDL:CosTransactions:1.0
//
namespace OBMarshalStubImpl_CosTransactions
{

} // End of namespace OBMarshalStubImpl_CosTransactions

//
// IDL:CosTransactions:1.0
//
namespace OBV_CosTransactions
{

} // End of namespace OBV_CosTransactions

//
// IDL:CosTransactions/InvocationPolicy:1.0
//
namespace CORBA
{

inline void
release(::CosTransactions::InvocationPolicy_ptr p)
{
    if(p)
        p -> _remove_ref();
}

inline Boolean
is_nil(::CosTransactions::InvocationPolicy_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, CosTransactions::InvocationPolicy_ptr*);
void operator<<=(CORBA::Any&, CosTransactions::InvocationPolicy_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, CosTransactions::InvocationPolicy_ptr&);

inline void
operator<<=(CORBA::Any_var& any, CosTransactions::InvocationPolicy_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, CosTransactions::InvocationPolicy_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, CosTransactions::InvocationPolicy_ptr& val)
{
    return any.in() >>= val;
}

//
// IDL:CosTransactions/OTSPolicy:1.0
//
namespace CORBA
{

inline void
release(::CosTransactions::OTSPolicy_ptr p)
{
    if(p)
        p -> _remove_ref();
}

inline Boolean
is_nil(::CosTransactions::OTSPolicy_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, CosTransactions::OTSPolicy_ptr*);
void operator<<=(CORBA::Any&, CosTransactions::OTSPolicy_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, CosTransactions::OTSPolicy_ptr&);

inline void
operator<<=(CORBA::Any_var& any, CosTransactions::OTSPolicy_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, CosTransactions::OTSPolicy_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, CosTransactions::OTSPolicy_ptr& val)
{
    return any.in() >>= val;
}

//
// IDL:CosTransactions/NonTxTargetPolicy:1.0
//
namespace CORBA
{

inline void
release(::CosTransactions::NonTxTargetPolicy_ptr p)
{
    if(p)
        p -> _remove_ref();
}

inline Boolean
is_nil(::CosTransactions::NonTxTargetPolicy_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, CosTransactions::NonTxTargetPolicy_ptr*);
void operator<<=(CORBA::Any&, CosTransactions::NonTxTargetPolicy_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, CosTransactions::NonTxTargetPolicy_ptr&);

inline void
operator<<=(CORBA::Any_var& any, CosTransactions::NonTxTargetPolicy_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, CosTransactions::NonTxTargetPolicy_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, CosTransactions::NonTxTargetPolicy_ptr& val)
{
    return any.in() >>= val;
}

#endif
