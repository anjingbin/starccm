// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.0

#ifndef ___PostgreSQLResource_h__
#define ___PostgreSQLResource_h__

#include <CosTransactionsOTS.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010000L)
#       error ORBacus version mismatch!
#   endif
#endif

class PG_Resource;
typedef PG_Resource* PG_Resource_ptr;
typedef PG_Resource* PG_ResourceRef;

extern OB::TypeCodeConst _tc_PG_Resource;

void OBDuplicate(PG_Resource_ptr);
void OBRelease(PG_Resource_ptr);

void OBMarshal(PG_Resource_ptr, OB::OutputStreamImpl*);
void OBUnmarshal(PG_Resource_ptr&, OB::InputStreamImpl*);

typedef OB::ObjVar< PG_Resource > PG_Resource_var;
typedef OB::ObjOut< PG_Resource > PG_Resource_out;

class OBStubImpl_PG_Resource;
typedef OBStubImpl_PG_Resource* OBStubImpl_PG_Resource_ptr;

void OBDuplicate(OBStubImpl_PG_Resource_ptr);
void OBRelease(OBStubImpl_PG_Resource_ptr);

typedef OB::ObjVar< OBStubImpl_PG_Resource > OBStubImpl_PG_Resource_var;

//
// IDL:pg_ConnStatusType:1.0
//
typedef CORBA::Short pg_ConnStatusType;
typedef CORBA::Short_out pg_ConnStatusType_out;
extern OB::TypeCodeConst _tc_pg_ConnStatusType;

//
// IDL:pg_ExecStatusType:1.0
//
typedef CORBA::Short pg_ExecStatusType;
typedef CORBA::Short_out pg_ExecStatusType_out;
extern OB::TypeCodeConst _tc_pg_ExecStatusType;

//
// IDL:pg_PGnotify:1.0
//
struct pg_PGnotify;
typedef OB::VarVar< pg_PGnotify > pg_PGnotify_var;
typedef OB::VarOut< pg_PGnotify > pg_PGnotify_out;

struct pg_PGnotify
{
#ifdef OB_CLEAR_MEM
    pg_PGnotify();
#else
    pg_PGnotify() { }
#endif
    pg_PGnotify(const pg_PGnotify&);
    pg_PGnotify& operator=(const pg_PGnotify&);

    typedef pg_PGnotify_var _var_type;

    OB::StrForStruct relname;
    CORBA::Long be_pid;

    void _OB_marshal(OB::OutputStreamImpl*) const;
    static void _OB_unmarshal(pg_PGnotify&, OB::InputStreamImpl*);
};

extern OB::TypeCodeConst _tc_pg_PGnotify;

//
// IDL:PG_Resource:1.0
//
class PG_Resource : virtual public CORBA::Object
{
    PG_Resource(const PG_Resource&);
    void operator=(const PG_Resource&);

protected:

    static const char* ids_[];

public:

    PG_Resource() { }
    virtual ~PG_Resource() { }

    typedef PG_Resource_ptr _ptr_type;
    typedef PG_Resource_var _var_type;

    static inline PG_Resource_ptr
    _duplicate(PG_Resource_ptr p)
    {
        if(p)
            p -> _add_ref();
        return p;
    }

    static inline PG_Resource_ptr
    _nil()
    {
        return 0;
    }

    static PG_Resource_ptr _narrow(CORBA::Object_ptr);
    static PG_Resource_ptr _unchecked_narrow(CORBA::Object_ptr);

    static PG_Resource_ptr _narrow(CORBA::AbstractBase_ptr);
    static PG_Resource_ptr _unchecked_narrow(CORBA::AbstractBase_ptr);

    static const char** _OB_staticIds();

    //
    // IDL:PG_Resource/pg_prepare:1.0
    //
    virtual ::CosTransactions::Vote pg_prepare() = 0;

    //
    // IDL:PG_Resource/pg_rollback:1.0
    //
    virtual void pg_rollback() = 0;

    //
    // IDL:PG_Resource/pg_commit:1.0
    //
    virtual void pg_commit() = 0;

    //
    // IDL:PG_Resource/pg_commit_one_phase:1.0
    //
    virtual void pg_commit_one_phase() = 0;

    //
    // IDL:PG_Resource/pg_forget:1.0
    //
    virtual void pg_forget() = 0;

    //
    // IDL:PG_Resource/pg_release:1.0
    //
    virtual void pg_release() = 0;

    //
    // IDL:PG_Resource/pg_BeginTrans:1.0
    //
    virtual CORBA::Boolean pg_BeginTrans() = 0;

    //
    // IDL:PG_Resource/pg_set_recoverycoordinator:1.0
    //
    virtual void pg_set_recoverycoordinator(::CosTransactions::RecoveryCoordinator_ptr rc) = 0;

    //
    // IDL:PG_Resource/pg_heuristic_decision:1.0
    //
    virtual void pg_heuristic_decision() = 0;

    //
    // IDL:PG_Resource/PG_CONNECTTION_FAILED:1.0
    //
    struct PG_CONNECTTION_FAILED : public CORBA::UserException
    {
        PG_CONNECTTION_FAILED() { }
        PG_CONNECTTION_FAILED(const PG_CONNECTTION_FAILED&);
        PG_CONNECTTION_FAILED& operator=(const PG_CONNECTTION_FAILED&);

        static PG_CONNECTTION_FAILED* _downcast(CORBA::Exception*);
        static const PG_CONNECTTION_FAILED* _downcast(const CORBA::Exception*);
        virtual const char* _name() const;
        virtual void _raise() const { throw *this; }
        virtual const char* _rep_id() const;
        virtual char* _to_string() const;

        virtual CORBA::Exception* _OB_clone() const;
        virtual void _OB_insertInAny(CORBA::Any&);

        static void _OB_unmarshal(PG_CONNECTTION_FAILED&, OB::InputStreamImpl*);
    };

    static OB::TypeCodeConst _tc_PG_CONNECTTION_FAILED;

    //
    // IDL:PG_Resource/pg_PQsetdb:1.0
    //
    virtual void pg_PQsetdb(const char* pghost,
                            const char* pgport,
                            const char* pgoptions,
                            const char* pgtty,
                            const char* dbName) = 0;

    //
    // IDL:PG_Resource/pg_PQdb:1.0
    //
    virtual char* pg_PQdb() = 0;

    //
    // IDL:PG_Resource/pg_PQhost:1.0
    //
    virtual char* pg_PQhost() = 0;

    //
    // IDL:PG_Resource/pg_PQoptions:1.0
    //
    virtual char* pg_PQoptions() = 0;

    //
    // IDL:PG_Resource/pg_PQport:1.0
    //
    virtual char* pg_PQport() = 0;

    //
    // IDL:PG_Resource/pg_PQtty:1.0
    //
    virtual char* pg_PQtty() = 0;

    //
    // IDL:PG_Resource/pg_PQstatus:1.0
    //
    virtual ::pg_ConnStatusType pg_PQstatus() = 0;

    //
    // IDL:PG_Resource/pg_PQerrorMessage:1.0
    //
    virtual char* pg_PQerrorMessage() = 0;

    //
    // IDL:PG_Resource/pg_PQfinish:1.0
    //
    virtual void pg_PQfinish() = 0;

    //
    // IDL:PG_Resource/pg_PQreset:1.0
    //
    virtual void pg_PQreset() = 0;

    //
    // IDL:PG_Resource/pg_PQuntrace:1.0
    //
    virtual void pg_PQuntrace() = 0;

    //
    // IDL:PG_Resource/pg_PQexec:1.0
    //
    virtual void pg_PQexec(const char* query) = 0;

    //
    // IDL:PG_Resource/pg_PQresultStatus:1.0
    //
    virtual ::pg_ExecStatusType pg_PQresultStatus() = 0;

    //
    // IDL:PG_Resource/pg_PQntuples:1.0
    //
    virtual CORBA::Long pg_PQntuples() = 0;

    //
    // IDL:PG_Resource/pg_PQnfields:1.0
    //
    virtual CORBA::Long pg_PQnfields() = 0;

    //
    // IDL:PG_Resource/pg_PQfname:1.0
    //
    virtual char* pg_PQfname(CORBA::Long field_index) = 0;

    //
    // IDL:PG_Resource/pg_PQfnumber:1.0
    //
    virtual CORBA::Long pg_PQfnumber(const char* field_name) = 0;

    //
    // IDL:PG_Resource/pg_PQftype:1.0
    //
    virtual CORBA::Long pg_PQftype(CORBA::Long field_num) = 0;

    //
    // IDL:PG_Resource/pg_PQfsize:1.0
    //
    virtual CORBA::Long pg_PQfsize(CORBA::Long field_index) = 0;

    //
    // IDL:PG_Resource/pg_PQgetvalue:1.0
    //
    virtual char* pg_PQgetvalue(CORBA::Long tup_num,
                                CORBA::Long field_num) = 0;

    //
    // IDL:PG_Resource/pg_PQgetlength:1.0
    //
    virtual CORBA::Long pg_PQgetlength(CORBA::Long tup_num,
                                       CORBA::Long field_num) = 0;

    //
    // IDL:PG_Resource/pg_PQcmdStatus:1.0
    //
    virtual char* pg_PQcmdStatus() = 0;

    //
    // IDL:PG_Resource/pg_PQoidStatus:1.0
    //
    virtual char* pg_PQoidStatus() = 0;

    //
    // IDL:PG_Resource/pg_PQclear:1.0
    //
    virtual void pg_PQclear() = 0;

    //
    // IDL:PG_Resource/pg_PQnotifies:1.0
    //
    virtual ::pg_PGnotify* pg_PQnotifies() = 0;

    //
    // IDL:PG_Resource/pg_PQgetline:1.0
    //
    virtual CORBA::Long pg_PQgetline(const char* str,
                                     CORBA::Long length) = 0;

    //
    // IDL:PG_Resource/pg_PQputline:1.0
    //
    virtual void pg_PQputline(const char* str) = 0;

    //
    // IDL:PG_Resource/pg_PQendcopy:1.0
    //
    virtual CORBA::Long pg_PQendcopy() = 0;

    //
    // IDL:PG_Resource/pg_fe_getauthname:1.0
    //
    virtual char* pg_fe_getauthname(const char* errorMessage) = 0;

    //
    // IDL:PG_Resource/pg_fe_setauthsvc:1.0
    //
    virtual void pg_fe_setauthsvc(const char* name,
                                  const char* errorMessage) = 0;
};

//
// IDL:PG_Resource:1.0
//
class OBProxy_PG_Resource : virtual public ::PG_Resource,
                            virtual public OBCORBA::Object
{
    OBProxy_PG_Resource(const OBProxy_PG_Resource&);
    void operator=(const OBProxy_PG_Resource&);

protected:

    virtual OB::MarshalStubImpl_ptr _OB_createMarshalStubImpl();

public:

    OBProxy_PG_Resource() { }
    virtual ~OBProxy_PG_Resource() { }

    virtual const char** _OB_ids() const;

    //
    // IDL:PG_Resource/pg_prepare:1.0
    //
    ::CosTransactions::Vote pg_prepare();

    //
    // IDL:PG_Resource/pg_rollback:1.0
    //
    void pg_rollback();

    //
    // IDL:PG_Resource/pg_commit:1.0
    //
    void pg_commit();

    //
    // IDL:PG_Resource/pg_commit_one_phase:1.0
    //
    void pg_commit_one_phase();

    //
    // IDL:PG_Resource/pg_forget:1.0
    //
    void pg_forget();

    //
    // IDL:PG_Resource/pg_release:1.0
    //
    void pg_release();

    //
    // IDL:PG_Resource/pg_BeginTrans:1.0
    //
    CORBA::Boolean pg_BeginTrans();

    //
    // IDL:PG_Resource/pg_set_recoverycoordinator:1.0
    //
    void pg_set_recoverycoordinator(::CosTransactions::RecoveryCoordinator_ptr rc);

    //
    // IDL:PG_Resource/pg_heuristic_decision:1.0
    //
    void pg_heuristic_decision();

    //
    // IDL:PG_Resource/pg_PQsetdb:1.0
    //
    void pg_PQsetdb(const char* pghost,
                    const char* pgport,
                    const char* pgoptions,
                    const char* pgtty,
                    const char* dbName);

    //
    // IDL:PG_Resource/pg_PQdb:1.0
    //
    char* pg_PQdb();

    //
    // IDL:PG_Resource/pg_PQhost:1.0
    //
    char* pg_PQhost();

    //
    // IDL:PG_Resource/pg_PQoptions:1.0
    //
    char* pg_PQoptions();

    //
    // IDL:PG_Resource/pg_PQport:1.0
    //
    char* pg_PQport();

    //
    // IDL:PG_Resource/pg_PQtty:1.0
    //
    char* pg_PQtty();

    //
    // IDL:PG_Resource/pg_PQstatus:1.0
    //
    ::pg_ConnStatusType pg_PQstatus();

    //
    // IDL:PG_Resource/pg_PQerrorMessage:1.0
    //
    char* pg_PQerrorMessage();

    //
    // IDL:PG_Resource/pg_PQfinish:1.0
    //
    void pg_PQfinish();

    //
    // IDL:PG_Resource/pg_PQreset:1.0
    //
    void pg_PQreset();

    //
    // IDL:PG_Resource/pg_PQuntrace:1.0
    //
    void pg_PQuntrace();

    //
    // IDL:PG_Resource/pg_PQexec:1.0
    //
    void pg_PQexec(const char* query);

    //
    // IDL:PG_Resource/pg_PQresultStatus:1.0
    //
    ::pg_ExecStatusType pg_PQresultStatus();

    //
    // IDL:PG_Resource/pg_PQntuples:1.0
    //
    CORBA::Long pg_PQntuples();

    //
    // IDL:PG_Resource/pg_PQnfields:1.0
    //
    CORBA::Long pg_PQnfields();

    //
    // IDL:PG_Resource/pg_PQfname:1.0
    //
    char* pg_PQfname(CORBA::Long field_index);

    //
    // IDL:PG_Resource/pg_PQfnumber:1.0
    //
    CORBA::Long pg_PQfnumber(const char* field_name);

    //
    // IDL:PG_Resource/pg_PQftype:1.0
    //
    CORBA::Long pg_PQftype(CORBA::Long field_num);

    //
    // IDL:PG_Resource/pg_PQfsize:1.0
    //
    CORBA::Long pg_PQfsize(CORBA::Long field_index);

    //
    // IDL:PG_Resource/pg_PQgetvalue:1.0
    //
    char* pg_PQgetvalue(CORBA::Long tup_num,
                        CORBA::Long field_num);

    //
    // IDL:PG_Resource/pg_PQgetlength:1.0
    //
    CORBA::Long pg_PQgetlength(CORBA::Long tup_num,
                               CORBA::Long field_num);

    //
    // IDL:PG_Resource/pg_PQcmdStatus:1.0
    //
    char* pg_PQcmdStatus();

    //
    // IDL:PG_Resource/pg_PQoidStatus:1.0
    //
    char* pg_PQoidStatus();

    //
    // IDL:PG_Resource/pg_PQclear:1.0
    //
    void pg_PQclear();

    //
    // IDL:PG_Resource/pg_PQnotifies:1.0
    //
    ::pg_PGnotify* pg_PQnotifies();

    //
    // IDL:PG_Resource/pg_PQgetline:1.0
    //
    CORBA::Long pg_PQgetline(const char* str,
                             CORBA::Long length);

    //
    // IDL:PG_Resource/pg_PQputline:1.0
    //
    void pg_PQputline(const char* str);

    //
    // IDL:PG_Resource/pg_PQendcopy:1.0
    //
    CORBA::Long pg_PQendcopy();

    //
    // IDL:PG_Resource/pg_fe_getauthname:1.0
    //
    char* pg_fe_getauthname(const char* errorMessage);

    //
    // IDL:PG_Resource/pg_fe_setauthsvc:1.0
    //
    void pg_fe_setauthsvc(const char* name,
                          const char* errorMessage);
};

//
// IDL:PG_Resource:1.0
//
class OBStubImpl_PG_Resource : virtual public OB::StubImplBase
{
    OBStubImpl_PG_Resource(const OBStubImpl_PG_Resource&);
    void operator=(const OBStubImpl_PG_Resource&);

protected:

    OBStubImpl_PG_Resource() { }

public:

    static inline OBStubImpl_PG_Resource_ptr
    _duplicate(OBStubImpl_PG_Resource_ptr p)
    {
        if(p)
            p -> _OB_incRef();
        return p;
    }

    static inline OBStubImpl_PG_Resource_ptr
    _nil()
    {
        return 0;
    }

    //
    // IDL:PG_Resource/pg_prepare:1.0
    //
    virtual ::CosTransactions::Vote pg_prepare() = 0;

    //
    // IDL:PG_Resource/pg_rollback:1.0
    //
    virtual void pg_rollback() = 0;

    //
    // IDL:PG_Resource/pg_commit:1.0
    //
    virtual void pg_commit() = 0;

    //
    // IDL:PG_Resource/pg_commit_one_phase:1.0
    //
    virtual void pg_commit_one_phase() = 0;

    //
    // IDL:PG_Resource/pg_forget:1.0
    //
    virtual void pg_forget() = 0;

    //
    // IDL:PG_Resource/pg_release:1.0
    //
    virtual void pg_release() = 0;

    //
    // IDL:PG_Resource/pg_BeginTrans:1.0
    //
    virtual CORBA::Boolean pg_BeginTrans() = 0;

    //
    // IDL:PG_Resource/pg_set_recoverycoordinator:1.0
    //
    virtual void pg_set_recoverycoordinator(::CosTransactions::RecoveryCoordinator_ptr rc) = 0;

    //
    // IDL:PG_Resource/pg_heuristic_decision:1.0
    //
    virtual void pg_heuristic_decision() = 0;

    //
    // IDL:PG_Resource/pg_PQsetdb:1.0
    //
    virtual void pg_PQsetdb(const char* pghost,
                            const char* pgport,
                            const char* pgoptions,
                            const char* pgtty,
                            const char* dbName) = 0;

    //
    // IDL:PG_Resource/pg_PQdb:1.0
    //
    virtual char* pg_PQdb() = 0;

    //
    // IDL:PG_Resource/pg_PQhost:1.0
    //
    virtual char* pg_PQhost() = 0;

    //
    // IDL:PG_Resource/pg_PQoptions:1.0
    //
    virtual char* pg_PQoptions() = 0;

    //
    // IDL:PG_Resource/pg_PQport:1.0
    //
    virtual char* pg_PQport() = 0;

    //
    // IDL:PG_Resource/pg_PQtty:1.0
    //
    virtual char* pg_PQtty() = 0;

    //
    // IDL:PG_Resource/pg_PQstatus:1.0
    //
    virtual ::pg_ConnStatusType pg_PQstatus() = 0;

    //
    // IDL:PG_Resource/pg_PQerrorMessage:1.0
    //
    virtual char* pg_PQerrorMessage() = 0;

    //
    // IDL:PG_Resource/pg_PQfinish:1.0
    //
    virtual void pg_PQfinish() = 0;

    //
    // IDL:PG_Resource/pg_PQreset:1.0
    //
    virtual void pg_PQreset() = 0;

    //
    // IDL:PG_Resource/pg_PQuntrace:1.0
    //
    virtual void pg_PQuntrace() = 0;

    //
    // IDL:PG_Resource/pg_PQexec:1.0
    //
    virtual void pg_PQexec(const char* query) = 0;

    //
    // IDL:PG_Resource/pg_PQresultStatus:1.0
    //
    virtual ::pg_ExecStatusType pg_PQresultStatus() = 0;

    //
    // IDL:PG_Resource/pg_PQntuples:1.0
    //
    virtual CORBA::Long pg_PQntuples() = 0;

    //
    // IDL:PG_Resource/pg_PQnfields:1.0
    //
    virtual CORBA::Long pg_PQnfields() = 0;

    //
    // IDL:PG_Resource/pg_PQfname:1.0
    //
    virtual char* pg_PQfname(CORBA::Long field_index) = 0;

    //
    // IDL:PG_Resource/pg_PQfnumber:1.0
    //
    virtual CORBA::Long pg_PQfnumber(const char* field_name) = 0;

    //
    // IDL:PG_Resource/pg_PQftype:1.0
    //
    virtual CORBA::Long pg_PQftype(CORBA::Long field_num) = 0;

    //
    // IDL:PG_Resource/pg_PQfsize:1.0
    //
    virtual CORBA::Long pg_PQfsize(CORBA::Long field_index) = 0;

    //
    // IDL:PG_Resource/pg_PQgetvalue:1.0
    //
    virtual char* pg_PQgetvalue(CORBA::Long tup_num,
                                CORBA::Long field_num) = 0;

    //
    // IDL:PG_Resource/pg_PQgetlength:1.0
    //
    virtual CORBA::Long pg_PQgetlength(CORBA::Long tup_num,
                                       CORBA::Long field_num) = 0;

    //
    // IDL:PG_Resource/pg_PQcmdStatus:1.0
    //
    virtual char* pg_PQcmdStatus() = 0;

    //
    // IDL:PG_Resource/pg_PQoidStatus:1.0
    //
    virtual char* pg_PQoidStatus() = 0;

    //
    // IDL:PG_Resource/pg_PQclear:1.0
    //
    virtual void pg_PQclear() = 0;

    //
    // IDL:PG_Resource/pg_PQnotifies:1.0
    //
    virtual ::pg_PGnotify* pg_PQnotifies() = 0;

    //
    // IDL:PG_Resource/pg_PQgetline:1.0
    //
    virtual CORBA::Long pg_PQgetline(const char* str,
                                     CORBA::Long length) = 0;

    //
    // IDL:PG_Resource/pg_PQputline:1.0
    //
    virtual void pg_PQputline(const char* str) = 0;

    //
    // IDL:PG_Resource/pg_PQendcopy:1.0
    //
    virtual CORBA::Long pg_PQendcopy() = 0;

    //
    // IDL:PG_Resource/pg_fe_getauthname:1.0
    //
    virtual char* pg_fe_getauthname(const char* errorMessage) = 0;

    //
    // IDL:PG_Resource/pg_fe_setauthsvc:1.0
    //
    virtual void pg_fe_setauthsvc(const char* name,
                                  const char* errorMessage) = 0;
};

//
// IDL:PG_Resource:1.0
//
class OBMarshalStubImpl_PG_Resource : virtual public OBStubImpl_PG_Resource,
                                      virtual public OB::MarshalStubImpl
{
    OBMarshalStubImpl_PG_Resource(const OBMarshalStubImpl_PG_Resource&);
    void operator=(const OBMarshalStubImpl_PG_Resource&);

protected:

    OBMarshalStubImpl_PG_Resource() { }
    friend class OBProxy_PG_Resource;

public:

    //
    // IDL:PG_Resource/pg_prepare:1.0
    //
    virtual ::CosTransactions::Vote pg_prepare();

    //
    // IDL:PG_Resource/pg_rollback:1.0
    //
    virtual void pg_rollback();

    //
    // IDL:PG_Resource/pg_commit:1.0
    //
    virtual void pg_commit();

    //
    // IDL:PG_Resource/pg_commit_one_phase:1.0
    //
    virtual void pg_commit_one_phase();

    //
    // IDL:PG_Resource/pg_forget:1.0
    //
    virtual void pg_forget();

    //
    // IDL:PG_Resource/pg_release:1.0
    //
    virtual void pg_release();

    //
    // IDL:PG_Resource/pg_BeginTrans:1.0
    //
    virtual CORBA::Boolean pg_BeginTrans();

    //
    // IDL:PG_Resource/pg_set_recoverycoordinator:1.0
    //
    virtual void pg_set_recoverycoordinator(::CosTransactions::RecoveryCoordinator_ptr rc);

    //
    // IDL:PG_Resource/pg_heuristic_decision:1.0
    //
    virtual void pg_heuristic_decision();

    //
    // IDL:PG_Resource/pg_PQsetdb:1.0
    //
    virtual void pg_PQsetdb(const char* pghost,
                            const char* pgport,
                            const char* pgoptions,
                            const char* pgtty,
                            const char* dbName);

    //
    // IDL:PG_Resource/pg_PQdb:1.0
    //
    virtual char* pg_PQdb();

    //
    // IDL:PG_Resource/pg_PQhost:1.0
    //
    virtual char* pg_PQhost();

    //
    // IDL:PG_Resource/pg_PQoptions:1.0
    //
    virtual char* pg_PQoptions();

    //
    // IDL:PG_Resource/pg_PQport:1.0
    //
    virtual char* pg_PQport();

    //
    // IDL:PG_Resource/pg_PQtty:1.0
    //
    virtual char* pg_PQtty();

    //
    // IDL:PG_Resource/pg_PQstatus:1.0
    //
    virtual ::pg_ConnStatusType pg_PQstatus();

    //
    // IDL:PG_Resource/pg_PQerrorMessage:1.0
    //
    virtual char* pg_PQerrorMessage();

    //
    // IDL:PG_Resource/pg_PQfinish:1.0
    //
    virtual void pg_PQfinish();

    //
    // IDL:PG_Resource/pg_PQreset:1.0
    //
    virtual void pg_PQreset();

    //
    // IDL:PG_Resource/pg_PQuntrace:1.0
    //
    virtual void pg_PQuntrace();

    //
    // IDL:PG_Resource/pg_PQexec:1.0
    //
    virtual void pg_PQexec(const char* query);

    //
    // IDL:PG_Resource/pg_PQresultStatus:1.0
    //
    virtual ::pg_ExecStatusType pg_PQresultStatus();

    //
    // IDL:PG_Resource/pg_PQntuples:1.0
    //
    virtual CORBA::Long pg_PQntuples();

    //
    // IDL:PG_Resource/pg_PQnfields:1.0
    //
    virtual CORBA::Long pg_PQnfields();

    //
    // IDL:PG_Resource/pg_PQfname:1.0
    //
    virtual char* pg_PQfname(CORBA::Long field_index);

    //
    // IDL:PG_Resource/pg_PQfnumber:1.0
    //
    virtual CORBA::Long pg_PQfnumber(const char* field_name);

    //
    // IDL:PG_Resource/pg_PQftype:1.0
    //
    virtual CORBA::Long pg_PQftype(CORBA::Long field_num);

    //
    // IDL:PG_Resource/pg_PQfsize:1.0
    //
    virtual CORBA::Long pg_PQfsize(CORBA::Long field_index);

    //
    // IDL:PG_Resource/pg_PQgetvalue:1.0
    //
    virtual char* pg_PQgetvalue(CORBA::Long tup_num,
                                CORBA::Long field_num);

    //
    // IDL:PG_Resource/pg_PQgetlength:1.0
    //
    virtual CORBA::Long pg_PQgetlength(CORBA::Long tup_num,
                                       CORBA::Long field_num);

    //
    // IDL:PG_Resource/pg_PQcmdStatus:1.0
    //
    virtual char* pg_PQcmdStatus();

    //
    // IDL:PG_Resource/pg_PQoidStatus:1.0
    //
    virtual char* pg_PQoidStatus();

    //
    // IDL:PG_Resource/pg_PQclear:1.0
    //
    virtual void pg_PQclear();

    //
    // IDL:PG_Resource/pg_PQnotifies:1.0
    //
    virtual ::pg_PGnotify* pg_PQnotifies();

    //
    // IDL:PG_Resource/pg_PQgetline:1.0
    //
    virtual CORBA::Long pg_PQgetline(const char* str,
                                     CORBA::Long length);

    //
    // IDL:PG_Resource/pg_PQputline:1.0
    //
    virtual void pg_PQputline(const char* str);

    //
    // IDL:PG_Resource/pg_PQendcopy:1.0
    //
    virtual CORBA::Long pg_PQendcopy();

    //
    // IDL:PG_Resource/pg_fe_getauthname:1.0
    //
    virtual char* pg_fe_getauthname(const char* errorMessage);

    //
    // IDL:PG_Resource/pg_fe_setauthsvc:1.0
    //
    virtual void pg_fe_setauthsvc(const char* name,
                                  const char* errorMessage);
};

//
// IDL:pg_PGnotify:1.0
//
void operator<<=(CORBA::Any&, pg_PGnotify*);
void operator<<=(CORBA::Any&, const pg_PGnotify&);
CORBA::Boolean operator>>=(const CORBA::Any&, const pg_PGnotify*&);

inline void
operator<<=(CORBA::Any_var& any, pg_PGnotify* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, const pg_PGnotify& val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, const pg_PGnotify*& val)
{
    return any.in() >>= val;
}

//
// IDL:PG_Resource:1.0
//
namespace CORBA
{

inline void
release(::PG_Resource_ptr p)
{
    if(p)
        p -> _remove_ref();
}

inline Boolean
is_nil(::PG_Resource_ptr p)
{
    return p == 0;
}

inline void
release(OBStubImpl_PG_Resource_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

inline Boolean
is_nil(OBStubImpl_PG_Resource_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, PG_Resource_ptr*);
void operator<<=(CORBA::Any&, PG_Resource_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, PG_Resource_ptr&);

inline void
operator<<=(CORBA::Any_var& any, PG_Resource_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, PG_Resource_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, PG_Resource_ptr& val)
{
    return any.in() >>= val;
}

//
// IDL:PG_Resource/PG_CONNECTTION_FAILED:1.0
//
void operator<<=(CORBA::Any&, PG_Resource::PG_CONNECTTION_FAILED*);
void operator<<=(CORBA::Any&, const PG_Resource::PG_CONNECTTION_FAILED&);
CORBA::Boolean operator>>=(const CORBA::Any&, const PG_Resource::PG_CONNECTTION_FAILED*&);

inline void
operator<<=(CORBA::Any_var& any, PG_Resource::PG_CONNECTTION_FAILED* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, const PG_Resource::PG_CONNECTTION_FAILED& val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, const PG_Resource::PG_CONNECTTION_FAILED*& val)
{
    return any.in() >>= val;
}

#endif
