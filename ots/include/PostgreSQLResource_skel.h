// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.0

#ifndef ___PostgreSQLResource_skel_h__
#define ___PostgreSQLResource_skel_h__

#include <PostgreSQLResource.h>

#include <CosTransactionsOTS_skel.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010000L)
#       error ORBacus version mismatch!
#   endif
#endif

//
// IDL:PG_Resource:1.0
//
class POA_PG_Resource : virtual public PortableServer::ServantBase
{
    POA_PG_Resource(const POA_PG_Resource&);
    void operator=(const POA_PG_Resource&);

protected:

    //
    // IDL:PG_Resource/pg_prepare:1.0
    //
    void _OB_op_pg_prepare(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_rollback:1.0
    //
    void _OB_op_pg_rollback(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_commit:1.0
    //
    void _OB_op_pg_commit(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_commit_one_phase:1.0
    //
    void _OB_op_pg_commit_one_phase(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_forget:1.0
    //
    void _OB_op_pg_forget(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_release:1.0
    //
    void _OB_op_pg_release(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_BeginTrans:1.0
    //
    void _OB_op_pg_BeginTrans(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_set_recoverycoordinator:1.0
    //
    void _OB_op_pg_set_recoverycoordinator(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_heuristic_decision:1.0
    //
    void _OB_op_pg_heuristic_decision(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQsetdb:1.0
    //
    void _OB_op_pg_PQsetdb(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQdb:1.0
    //
    void _OB_op_pg_PQdb(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQhost:1.0
    //
    void _OB_op_pg_PQhost(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQoptions:1.0
    //
    void _OB_op_pg_PQoptions(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQport:1.0
    //
    void _OB_op_pg_PQport(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQtty:1.0
    //
    void _OB_op_pg_PQtty(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQstatus:1.0
    //
    void _OB_op_pg_PQstatus(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQerrorMessage:1.0
    //
    void _OB_op_pg_PQerrorMessage(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQfinish:1.0
    //
    void _OB_op_pg_PQfinish(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQreset:1.0
    //
    void _OB_op_pg_PQreset(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQuntrace:1.0
    //
    void _OB_op_pg_PQuntrace(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQexec:1.0
    //
    void _OB_op_pg_PQexec(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQresultStatus:1.0
    //
    void _OB_op_pg_PQresultStatus(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQntuples:1.0
    //
    void _OB_op_pg_PQntuples(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQnfields:1.0
    //
    void _OB_op_pg_PQnfields(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQfname:1.0
    //
    void _OB_op_pg_PQfname(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQfnumber:1.0
    //
    void _OB_op_pg_PQfnumber(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQftype:1.0
    //
    void _OB_op_pg_PQftype(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQfsize:1.0
    //
    void _OB_op_pg_PQfsize(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQgetvalue:1.0
    //
    void _OB_op_pg_PQgetvalue(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQgetlength:1.0
    //
    void _OB_op_pg_PQgetlength(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQcmdStatus:1.0
    //
    void _OB_op_pg_PQcmdStatus(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQoidStatus:1.0
    //
    void _OB_op_pg_PQoidStatus(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQclear:1.0
    //
    void _OB_op_pg_PQclear(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQnotifies:1.0
    //
    void _OB_op_pg_PQnotifies(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQgetline:1.0
    //
    void _OB_op_pg_PQgetline(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQputline:1.0
    //
    void _OB_op_pg_PQputline(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_PQendcopy:1.0
    //
    void _OB_op_pg_PQendcopy(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_fe_getauthname:1.0
    //
    void _OB_op_pg_fe_getauthname(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_fe_setauthsvc:1.0
    //
    void _OB_op_pg_fe_setauthsvc(OB::Upcall_ptr);

public:

    POA_PG_Resource() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    PG_Resource_ptr _this();

    virtual OB::DirectStubImpl_ptr _OB_createDirectStubImpl(PortableServer::POA_ptr,
                                                            const PortableServer::ObjectId&);
    virtual void _OB_dispatch(OB::Upcall_ptr);

    //
    // IDL:PG_Resource/pg_prepare:1.0
    //
    virtual CosTransactions::Vote pg_prepare()
        throw(CosTransactions::HeuristicMixed,
              CosTransactions::HeuristicHazard,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_rollback:1.0
    //
    virtual void pg_rollback()
        throw(CosTransactions::HeuristicCommit,
              CosTransactions::HeuristicMixed,
              CosTransactions::HeuristicHazard,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_commit:1.0
    //
    virtual void pg_commit()
        throw(CosTransactions::NotPrepared,
              CosTransactions::HeuristicRollback,
              CosTransactions::HeuristicMixed,
              CosTransactions::HeuristicHazard,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_commit_one_phase:1.0
    //
    virtual void pg_commit_one_phase()
        throw(CosTransactions::HeuristicHazard,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_forget:1.0
    //
    virtual void pg_forget()
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_release:1.0
    //
    virtual void pg_release()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_BeginTrans:1.0
    //
    virtual CORBA::Boolean pg_BeginTrans()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_set_recoverycoordinator:1.0
    //
    virtual void pg_set_recoverycoordinator(CosTransactions::RecoveryCoordinator_ptr rc)
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_heuristic_decision:1.0
    //
    virtual void pg_heuristic_decision()
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQsetdb:1.0
    //
    virtual void pg_PQsetdb(const char* pghost,
                            const char* pgport,
                            const char* pgoptions,
                            const char* pgtty,
                            const char* dbName)
        throw(PG_Resource::PG_CONNECTTION_FAILED,
              CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQdb:1.0
    //
    virtual char* pg_PQdb()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQhost:1.0
    //
    virtual char* pg_PQhost()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQoptions:1.0
    //
    virtual char* pg_PQoptions()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQport:1.0
    //
    virtual char* pg_PQport()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQtty:1.0
    //
    virtual char* pg_PQtty()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQstatus:1.0
    //
    virtual pg_ConnStatusType pg_PQstatus()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQerrorMessage:1.0
    //
    virtual char* pg_PQerrorMessage()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQfinish:1.0
    //
    virtual void pg_PQfinish()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQreset:1.0
    //
    virtual void pg_PQreset()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQuntrace:1.0
    //
    virtual void pg_PQuntrace()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQexec:1.0
    //
    virtual void pg_PQexec(const char* query)
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQresultStatus:1.0
    //
    virtual pg_ExecStatusType pg_PQresultStatus()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQntuples:1.0
    //
    virtual CORBA::Long pg_PQntuples()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQnfields:1.0
    //
    virtual CORBA::Long pg_PQnfields()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQfname:1.0
    //
    virtual char* pg_PQfname(CORBA::Long field_index)
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQfnumber:1.0
    //
    virtual CORBA::Long pg_PQfnumber(const char* field_name)
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQftype:1.0
    //
    virtual CORBA::Long pg_PQftype(CORBA::Long field_num)
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQfsize:1.0
    //
    virtual CORBA::Long pg_PQfsize(CORBA::Long field_index)
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQgetvalue:1.0
    //
    virtual char* pg_PQgetvalue(CORBA::Long tup_num,
                                CORBA::Long field_num)
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQgetlength:1.0
    //
    virtual CORBA::Long pg_PQgetlength(CORBA::Long tup_num,
                                       CORBA::Long field_num)
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQcmdStatus:1.0
    //
    virtual char* pg_PQcmdStatus()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQoidStatus:1.0
    //
    virtual char* pg_PQoidStatus()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQclear:1.0
    //
    virtual void pg_PQclear()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQnotifies:1.0
    //
    virtual pg_PGnotify* pg_PQnotifies()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQgetline:1.0
    //
    virtual CORBA::Long pg_PQgetline(const char* str,
                                     CORBA::Long length)
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQputline:1.0
    //
    virtual void pg_PQputline(const char* str)
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_PQendcopy:1.0
    //
    virtual CORBA::Long pg_PQendcopy()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_fe_getauthname:1.0
    //
    virtual char* pg_fe_getauthname(const char* errorMessage)
        throw(CORBA::SystemException) = 0;

    //
    // IDL:PG_Resource/pg_fe_setauthsvc:1.0
    //
    virtual void pg_fe_setauthsvc(const char* name,
                                  const char* errorMessage)
        throw(CORBA::SystemException) = 0;
};

//
// IDL:PG_Resource:1.0
//
class OBDirectStubImpl_PG_Resource : virtual public OBStubImpl_PG_Resource,
                                     virtual public OB::DirectStubImpl
{
    OBDirectStubImpl_PG_Resource(const OBDirectStubImpl_PG_Resource&);
    void operator=(const OBDirectStubImpl_PG_Resource&);

protected:

#ifdef HAVE_VCPLUSPLUS_BUGS

    OBDirectStubImpl_PG_Resource() { }

#endif

    OBDirectStubImpl_PG_Resource(PortableServer::POA_ptr,
                                 const PortableServer::ObjectId&,
                                 PortableServer::ServantBase*);

    friend class POA_PG_Resource;

public:

    //
    // IDL:PG_Resource/pg_prepare:1.0
    //
    virtual CosTransactions::Vote pg_prepare();

    //
    // IDL:PG_Resource/pg_rollback:1.0
    //
    virtual void pg_rollback();

    //
    // IDL:PG_Resource/pg_commit:1.0
    //
    virtual void pg_commit();

    //
    // IDL:PG_Resource/pg_commit_one_phase:1.0
    //
    virtual void pg_commit_one_phase();

    //
    // IDL:PG_Resource/pg_forget:1.0
    //
    virtual void pg_forget();

    //
    // IDL:PG_Resource/pg_release:1.0
    //
    virtual void pg_release();

    //
    // IDL:PG_Resource/pg_BeginTrans:1.0
    //
    virtual CORBA::Boolean pg_BeginTrans();

    //
    // IDL:PG_Resource/pg_set_recoverycoordinator:1.0
    //
    virtual void pg_set_recoverycoordinator(CosTransactions::RecoveryCoordinator_ptr rc);

    //
    // IDL:PG_Resource/pg_heuristic_decision:1.0
    //
    virtual void pg_heuristic_decision();

    //
    // IDL:PG_Resource/pg_PQsetdb:1.0
    //
    virtual void pg_PQsetdb(const char* pghost,
                            const char* pgport,
                            const char* pgoptions,
                            const char* pgtty,
                            const char* dbName);

    //
    // IDL:PG_Resource/pg_PQdb:1.0
    //
    virtual char* pg_PQdb();

    //
    // IDL:PG_Resource/pg_PQhost:1.0
    //
    virtual char* pg_PQhost();

    //
    // IDL:PG_Resource/pg_PQoptions:1.0
    //
    virtual char* pg_PQoptions();

    //
    // IDL:PG_Resource/pg_PQport:1.0
    //
    virtual char* pg_PQport();

    //
    // IDL:PG_Resource/pg_PQtty:1.0
    //
    virtual char* pg_PQtty();

    //
    // IDL:PG_Resource/pg_PQstatus:1.0
    //
    virtual pg_ConnStatusType pg_PQstatus();

    //
    // IDL:PG_Resource/pg_PQerrorMessage:1.0
    //
    virtual char* pg_PQerrorMessage();

    //
    // IDL:PG_Resource/pg_PQfinish:1.0
    //
    virtual void pg_PQfinish();

    //
    // IDL:PG_Resource/pg_PQreset:1.0
    //
    virtual void pg_PQreset();

    //
    // IDL:PG_Resource/pg_PQuntrace:1.0
    //
    virtual void pg_PQuntrace();

    //
    // IDL:PG_Resource/pg_PQexec:1.0
    //
    virtual void pg_PQexec(const char* query);

    //
    // IDL:PG_Resource/pg_PQresultStatus:1.0
    //
    virtual pg_ExecStatusType pg_PQresultStatus();

    //
    // IDL:PG_Resource/pg_PQntuples:1.0
    //
    virtual CORBA::Long pg_PQntuples();

    //
    // IDL:PG_Resource/pg_PQnfields:1.0
    //
    virtual CORBA::Long pg_PQnfields();

    //
    // IDL:PG_Resource/pg_PQfname:1.0
    //
    virtual char* pg_PQfname(CORBA::Long field_index);

    //
    // IDL:PG_Resource/pg_PQfnumber:1.0
    //
    virtual CORBA::Long pg_PQfnumber(const char* field_name);

    //
    // IDL:PG_Resource/pg_PQftype:1.0
    //
    virtual CORBA::Long pg_PQftype(CORBA::Long field_num);

    //
    // IDL:PG_Resource/pg_PQfsize:1.0
    //
    virtual CORBA::Long pg_PQfsize(CORBA::Long field_index);

    //
    // IDL:PG_Resource/pg_PQgetvalue:1.0
    //
    virtual char* pg_PQgetvalue(CORBA::Long tup_num,
                                CORBA::Long field_num);

    //
    // IDL:PG_Resource/pg_PQgetlength:1.0
    //
    virtual CORBA::Long pg_PQgetlength(CORBA::Long tup_num,
                                       CORBA::Long field_num);

    //
    // IDL:PG_Resource/pg_PQcmdStatus:1.0
    //
    virtual char* pg_PQcmdStatus();

    //
    // IDL:PG_Resource/pg_PQoidStatus:1.0
    //
    virtual char* pg_PQoidStatus();

    //
    // IDL:PG_Resource/pg_PQclear:1.0
    //
    virtual void pg_PQclear();

    //
    // IDL:PG_Resource/pg_PQnotifies:1.0
    //
    virtual pg_PGnotify* pg_PQnotifies();

    //
    // IDL:PG_Resource/pg_PQgetline:1.0
    //
    virtual CORBA::Long pg_PQgetline(const char* str,
                                     CORBA::Long length);

    //
    // IDL:PG_Resource/pg_PQputline:1.0
    //
    virtual void pg_PQputline(const char* str);

    //
    // IDL:PG_Resource/pg_PQendcopy:1.0
    //
    virtual CORBA::Long pg_PQendcopy();

    //
    // IDL:PG_Resource/pg_fe_getauthname:1.0
    //
    virtual char* pg_fe_getauthname(const char* errorMessage);

    //
    // IDL:PG_Resource/pg_fe_setauthsvc:1.0
    //
    virtual void pg_fe_setauthsvc(const char* name,
                                  const char* errorMessage);
};

#endif
