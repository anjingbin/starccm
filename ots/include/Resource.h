// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.0

#ifndef ___Resource_h__
#define ___Resource_h__

#include <PostgreSQLResource.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010000L)
#       error ORBacus version mismatch!
#   endif
#endif

class ResourceFactory;
typedef ResourceFactory* ResourceFactory_ptr;
typedef ResourceFactory* ResourceFactoryRef;

extern OB::TypeCodeConst _tc_ResourceFactory;

class Resource;
typedef Resource* Resource_ptr;
typedef Resource* ResourceRef;

extern OB::TypeCodeConst _tc_Resource;

void OBDuplicate(ResourceFactory_ptr);
void OBRelease(ResourceFactory_ptr);

void OBMarshal(ResourceFactory_ptr, OB::OutputStreamImpl*);
void OBUnmarshal(ResourceFactory_ptr&, OB::InputStreamImpl*);

void OBDuplicate(Resource_ptr);
void OBRelease(Resource_ptr);

void OBMarshal(Resource_ptr, OB::OutputStreamImpl*);
void OBUnmarshal(Resource_ptr&, OB::InputStreamImpl*);

typedef OB::ObjVar< ResourceFactory > ResourceFactory_var;
typedef OB::ObjOut< ResourceFactory > ResourceFactory_out;

typedef OB::ObjVar< Resource > Resource_var;
typedef OB::ObjOut< Resource > Resource_out;

class OBStubImpl_ResourceFactory;
typedef OBStubImpl_ResourceFactory* OBStubImpl_ResourceFactory_ptr;

class OBStubImpl_Resource;
typedef OBStubImpl_Resource* OBStubImpl_Resource_ptr;

void OBDuplicate(OBStubImpl_ResourceFactory_ptr);
void OBRelease(OBStubImpl_ResourceFactory_ptr);

void OBDuplicate(OBStubImpl_Resource_ptr);
void OBRelease(OBStubImpl_Resource_ptr);

typedef OB::ObjVar< OBStubImpl_ResourceFactory > OBStubImpl_ResourceFactory_var;

typedef OB::ObjVar< OBStubImpl_Resource > OBStubImpl_Resource_var;

//
// IDL:ResourceFactory:1.0
//
class ResourceFactory : virtual public CORBA::Object
{
    ResourceFactory(const ResourceFactory&);
    void operator=(const ResourceFactory&);

protected:

    static const char* ids_[];

public:

    ResourceFactory() { }
    virtual ~ResourceFactory() { }

    typedef ResourceFactory_ptr _ptr_type;
    typedef ResourceFactory_var _var_type;

    static inline ResourceFactory_ptr
    _duplicate(ResourceFactory_ptr p)
    {
        if(p)
            p -> _add_ref();
        return p;
    }

    static inline ResourceFactory_ptr
    _nil()
    {
        return 0;
    }

    static ResourceFactory_ptr _narrow(CORBA::Object_ptr);
    static ResourceFactory_ptr _unchecked_narrow(CORBA::Object_ptr);

    static ResourceFactory_ptr _narrow(CORBA::AbstractBase_ptr);
    static ResourceFactory_ptr _unchecked_narrow(CORBA::AbstractBase_ptr);

    static const char** _OB_staticIds();

    //
    // IDL:ResourceFactory/create:1.0
    //
    virtual ::Resource_ptr create(CORBA::Short dbtype) = 0;
};

//
// IDL:Resource:1.0
//
class Resource : virtual public ::PG_Resource
{
    Resource(const Resource&);
    void operator=(const Resource&);

protected:

    static const char* ids_[];

public:

    Resource() { }
    virtual ~Resource() { }

    typedef Resource_ptr _ptr_type;
    typedef Resource_var _var_type;

    static inline Resource_ptr
    _duplicate(Resource_ptr p)
    {
        if(p)
            p -> _add_ref();
        return p;
    }

    static inline Resource_ptr
    _nil()
    {
        return 0;
    }

    static Resource_ptr _narrow(CORBA::Object_ptr);
    static Resource_ptr _unchecked_narrow(CORBA::Object_ptr);

    static Resource_ptr _narrow(CORBA::AbstractBase_ptr);
    static Resource_ptr _unchecked_narrow(CORBA::AbstractBase_ptr);

    static const char** _OB_staticIds();

    //
    // IDL:Resource/prepare:1.0
    //
    virtual ::CosTransactions::Vote prepare() = 0;

    //
    // IDL:Resource/rollback:1.0
    //
    virtual void rollback() = 0;

    //
    // IDL:Resource/commit:1.0
    //
    virtual void commit() = 0;

    //
    // IDL:Resource/commit_one_phase:1.0
    //
    virtual void commit_one_phase() = 0;

    //
    // IDL:Resource/forget:1.0
    //
    virtual void forget() = 0;

    //
    // IDL:Resource/release:1.0
    //
    virtual void release() = 0;

    //
    // IDL:Resource/BeginTrans:1.0
    //
    virtual CORBA::Boolean BeginTrans() = 0;

    //
    // IDL:Resource/set_recoverycoordinator:1.0
    //
    virtual void set_recoverycoordinator(::CosTransactions::RecoveryCoordinator_ptr rc) = 0;

    //
    // IDL:Resource/heuristic_decision:1.0
    //
    virtual void heuristic_decision() = 0;
};

//
// IDL:ResourceFactory:1.0
//
class OBProxy_ResourceFactory : virtual public ::ResourceFactory,
                                virtual public OBCORBA::Object
{
    OBProxy_ResourceFactory(const OBProxy_ResourceFactory&);
    void operator=(const OBProxy_ResourceFactory&);

protected:

    virtual OB::MarshalStubImpl_ptr _OB_createMarshalStubImpl();

public:

    OBProxy_ResourceFactory() { }
    virtual ~OBProxy_ResourceFactory() { }

    virtual const char** _OB_ids() const;

    //
    // IDL:ResourceFactory/create:1.0
    //
    ::Resource_ptr create(CORBA::Short dbtype);
};

//
// IDL:Resource:1.0
//
class OBProxy_Resource : virtual public ::Resource,
                         virtual public OBProxy_PG_Resource
{
    OBProxy_Resource(const OBProxy_Resource&);
    void operator=(const OBProxy_Resource&);

protected:

    virtual OB::MarshalStubImpl_ptr _OB_createMarshalStubImpl();

public:

    OBProxy_Resource() { }
    virtual ~OBProxy_Resource() { }

    virtual const char** _OB_ids() const;

    //
    // IDL:Resource/prepare:1.0
    //
    ::CosTransactions::Vote prepare();

    //
    // IDL:Resource/rollback:1.0
    //
    void rollback();

    //
    // IDL:Resource/commit:1.0
    //
    void commit();

    //
    // IDL:Resource/commit_one_phase:1.0
    //
    void commit_one_phase();

    //
    // IDL:Resource/forget:1.0
    //
    void forget();

    //
    // IDL:Resource/release:1.0
    //
    void release();

    //
    // IDL:Resource/BeginTrans:1.0
    //
    CORBA::Boolean BeginTrans();

    //
    // IDL:Resource/set_recoverycoordinator:1.0
    //
    void set_recoverycoordinator(::CosTransactions::RecoveryCoordinator_ptr rc);

    //
    // IDL:Resource/heuristic_decision:1.0
    //
    void heuristic_decision();
};

//
// IDL:ResourceFactory:1.0
//
class OBStubImpl_ResourceFactory : virtual public OB::StubImplBase
{
    OBStubImpl_ResourceFactory(const OBStubImpl_ResourceFactory&);
    void operator=(const OBStubImpl_ResourceFactory&);

protected:

    OBStubImpl_ResourceFactory() { }

public:

    static inline OBStubImpl_ResourceFactory_ptr
    _duplicate(OBStubImpl_ResourceFactory_ptr p)
    {
        if(p)
            p -> _OB_incRef();
        return p;
    }

    static inline OBStubImpl_ResourceFactory_ptr
    _nil()
    {
        return 0;
    }

    //
    // IDL:ResourceFactory/create:1.0
    //
    virtual ::Resource_ptr create(CORBA::Short dbtype) = 0;
};

//
// IDL:Resource:1.0
//
class OBStubImpl_Resource : virtual public OBStubImpl_PG_Resource
{
    OBStubImpl_Resource(const OBStubImpl_Resource&);
    void operator=(const OBStubImpl_Resource&);

protected:

    OBStubImpl_Resource() { }

public:

    static inline OBStubImpl_Resource_ptr
    _duplicate(OBStubImpl_Resource_ptr p)
    {
        if(p)
            p -> _OB_incRef();
        return p;
    }

    static inline OBStubImpl_Resource_ptr
    _nil()
    {
        return 0;
    }

    //
    // IDL:Resource/prepare:1.0
    //
    virtual ::CosTransactions::Vote prepare() = 0;

    //
    // IDL:Resource/rollback:1.0
    //
    virtual void rollback() = 0;

    //
    // IDL:Resource/commit:1.0
    //
    virtual void commit() = 0;

    //
    // IDL:Resource/commit_one_phase:1.0
    //
    virtual void commit_one_phase() = 0;

    //
    // IDL:Resource/forget:1.0
    //
    virtual void forget() = 0;

    //
    // IDL:Resource/release:1.0
    //
    virtual void release() = 0;

    //
    // IDL:Resource/BeginTrans:1.0
    //
    virtual CORBA::Boolean BeginTrans() = 0;

    //
    // IDL:Resource/set_recoverycoordinator:1.0
    //
    virtual void set_recoverycoordinator(::CosTransactions::RecoveryCoordinator_ptr rc) = 0;

    //
    // IDL:Resource/heuristic_decision:1.0
    //
    virtual void heuristic_decision() = 0;
};

//
// IDL:ResourceFactory:1.0
//
class OBMarshalStubImpl_ResourceFactory : virtual public OBStubImpl_ResourceFactory,
                                          virtual public OB::MarshalStubImpl
{
    OBMarshalStubImpl_ResourceFactory(const OBMarshalStubImpl_ResourceFactory&);
    void operator=(const OBMarshalStubImpl_ResourceFactory&);

protected:

    OBMarshalStubImpl_ResourceFactory() { }
    friend class OBProxy_ResourceFactory;

public:

    //
    // IDL:ResourceFactory/create:1.0
    //
    virtual ::Resource_ptr create(CORBA::Short dbtype);
};

//
// IDL:Resource:1.0
//
class OBMarshalStubImpl_Resource : virtual public OBStubImpl_Resource,
                                   virtual public OBMarshalStubImpl_PG_Resource
{
    OBMarshalStubImpl_Resource(const OBMarshalStubImpl_Resource&);
    void operator=(const OBMarshalStubImpl_Resource&);

protected:

    OBMarshalStubImpl_Resource() { }
    friend class OBProxy_Resource;

public:

    //
    // IDL:Resource/prepare:1.0
    //
    virtual ::CosTransactions::Vote prepare();

    //
    // IDL:Resource/rollback:1.0
    //
    virtual void rollback();

    //
    // IDL:Resource/commit:1.0
    //
    virtual void commit();

    //
    // IDL:Resource/commit_one_phase:1.0
    //
    virtual void commit_one_phase();

    //
    // IDL:Resource/forget:1.0
    //
    virtual void forget();

    //
    // IDL:Resource/release:1.0
    //
    virtual void release();

    //
    // IDL:Resource/BeginTrans:1.0
    //
    virtual CORBA::Boolean BeginTrans();

    //
    // IDL:Resource/set_recoverycoordinator:1.0
    //
    virtual void set_recoverycoordinator(::CosTransactions::RecoveryCoordinator_ptr rc);

    //
    // IDL:Resource/heuristic_decision:1.0
    //
    virtual void heuristic_decision();
};

//
// IDL:ResourceFactory:1.0
//
namespace CORBA
{

inline void
release(::ResourceFactory_ptr p)
{
    if(p)
        p -> _remove_ref();
}

inline Boolean
is_nil(::ResourceFactory_ptr p)
{
    return p == 0;
}

inline void
release(OBStubImpl_ResourceFactory_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

inline Boolean
is_nil(OBStubImpl_ResourceFactory_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, ResourceFactory_ptr*);
void operator<<=(CORBA::Any&, ResourceFactory_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, ResourceFactory_ptr&);

inline void
operator<<=(CORBA::Any_var& any, ResourceFactory_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, ResourceFactory_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, ResourceFactory_ptr& val)
{
    return any.in() >>= val;
}

//
// IDL:Resource:1.0
//
namespace CORBA
{

inline void
release(::Resource_ptr p)
{
    if(p)
        p -> _remove_ref();
}

inline Boolean
is_nil(::Resource_ptr p)
{
    return p == 0;
}

inline void
release(OBStubImpl_Resource_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

inline Boolean
is_nil(OBStubImpl_Resource_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, Resource_ptr*);
void operator<<=(CORBA::Any&, Resource_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, Resource_ptr&);

inline void
operator<<=(CORBA::Any_var& any, Resource_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, Resource_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, Resource_ptr& val)
{
    return any.in() >>= val;
}

#endif
