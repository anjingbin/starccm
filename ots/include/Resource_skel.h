// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.0

#ifndef ___Resource_skel_h__
#define ___Resource_skel_h__

#include <Resource.h>

#include <PostgreSQLResource_skel.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010000L)
#       error ORBacus version mismatch!
#   endif
#endif

//
// IDL:ResourceFactory:1.0
//
class POA_ResourceFactory : virtual public PortableServer::ServantBase
{
    POA_ResourceFactory(const POA_ResourceFactory&);
    void operator=(const POA_ResourceFactory&);

protected:

    //
    // IDL:ResourceFactory/create:1.0
    //
    void _OB_op_create(OB::Upcall_ptr);

public:

    POA_ResourceFactory() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    ResourceFactory_ptr _this();

    virtual OB::DirectStubImpl_ptr _OB_createDirectStubImpl(PortableServer::POA_ptr,
                                                            const PortableServer::ObjectId&);
    virtual void _OB_dispatch(OB::Upcall_ptr);

    //
    // IDL:ResourceFactory/create:1.0
    //
    virtual Resource_ptr create(CORBA::Short dbtype)
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;
};

//
// IDL:Resource:1.0
//
class POA_Resource : virtual public POA_PG_Resource
{
    POA_Resource(const POA_Resource&);
    void operator=(const POA_Resource&);

protected:

    //
    // IDL:Resource/prepare:1.0
    //
    void _OB_op_prepare(OB::Upcall_ptr);

    //
    // IDL:Resource/rollback:1.0
    //
    void _OB_op_rollback(OB::Upcall_ptr);

    //
    // IDL:Resource/commit:1.0
    //
    void _OB_op_commit(OB::Upcall_ptr);

    //
    // IDL:Resource/commit_one_phase:1.0
    //
    void _OB_op_commit_one_phase(OB::Upcall_ptr);

    //
    // IDL:Resource/forget:1.0
    //
    void _OB_op_forget(OB::Upcall_ptr);

    //
    // IDL:Resource/release:1.0
    //
    void _OB_op_release(OB::Upcall_ptr);

    //
    // IDL:Resource/BeginTrans:1.0
    //
    void _OB_op_BeginTrans(OB::Upcall_ptr);

    //
    // IDL:Resource/set_recoverycoordinator:1.0
    //
    void _OB_op_set_recoverycoordinator(OB::Upcall_ptr);

    //
    // IDL:Resource/heuristic_decision:1.0
    //
    void _OB_op_heuristic_decision(OB::Upcall_ptr);

public:

    POA_Resource() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    Resource_ptr _this();

    virtual OB::DirectStubImpl_ptr _OB_createDirectStubImpl(PortableServer::POA_ptr,
                                                            const PortableServer::ObjectId&);
    virtual void _OB_dispatch(OB::Upcall_ptr);

    //
    // IDL:Resource/prepare:1.0
    //
    virtual CosTransactions::Vote prepare()
        throw(CosTransactions::HeuristicMixed,
              CosTransactions::HeuristicHazard,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:Resource/rollback:1.0
    //
    virtual void rollback()
        throw(CosTransactions::HeuristicCommit,
              CosTransactions::HeuristicMixed,
              CosTransactions::HeuristicHazard,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:Resource/commit:1.0
    //
    virtual void commit()
        throw(CosTransactions::NotPrepared,
              CosTransactions::HeuristicRollback,
              CosTransactions::HeuristicMixed,
              CosTransactions::HeuristicHazard,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:Resource/commit_one_phase:1.0
    //
    virtual void commit_one_phase()
        throw(CosTransactions::HeuristicHazard,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:Resource/forget:1.0
    //
    virtual void forget()
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:Resource/release:1.0
    //
    virtual void release()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:Resource/BeginTrans:1.0
    //
    virtual CORBA::Boolean BeginTrans()
        throw(CORBA::SystemException) = 0;

    //
    // IDL:Resource/set_recoverycoordinator:1.0
    //
    virtual void set_recoverycoordinator(CosTransactions::RecoveryCoordinator_ptr rc)
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // IDL:Resource/heuristic_decision:1.0
    //
    virtual void heuristic_decision()
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;
};

//
// IDL:ResourceFactory:1.0
//
class OBDirectStubImpl_ResourceFactory : virtual public OBStubImpl_ResourceFactory,
                                         virtual public OB::DirectStubImpl
{
    OBDirectStubImpl_ResourceFactory(const OBDirectStubImpl_ResourceFactory&);
    void operator=(const OBDirectStubImpl_ResourceFactory&);

protected:

#ifdef HAVE_VCPLUSPLUS_BUGS

    OBDirectStubImpl_ResourceFactory() { }

#endif

    OBDirectStubImpl_ResourceFactory(PortableServer::POA_ptr,
                                     const PortableServer::ObjectId&,
                                     PortableServer::ServantBase*);

    friend class POA_ResourceFactory;

public:

    //
    // IDL:ResourceFactory/create:1.0
    //
    virtual Resource_ptr create(CORBA::Short dbtype);
};

//
// IDL:Resource:1.0
//
class OBDirectStubImpl_Resource : virtual public OBStubImpl_Resource,
                                  virtual public OBDirectStubImpl_PG_Resource
{
    OBDirectStubImpl_Resource(const OBDirectStubImpl_Resource&);
    void operator=(const OBDirectStubImpl_Resource&);

protected:

#ifdef HAVE_VCPLUSPLUS_BUGS

    OBDirectStubImpl_Resource() { }

#endif

    OBDirectStubImpl_Resource(PortableServer::POA_ptr,
                              const PortableServer::ObjectId&,
                              PortableServer::ServantBase*);

    friend class POA_Resource;

public:

    //
    // IDL:Resource/prepare:1.0
    //
    virtual CosTransactions::Vote prepare();

    //
    // IDL:Resource/rollback:1.0
    //
    virtual void rollback();

    //
    // IDL:Resource/commit:1.0
    //
    virtual void commit();

    //
    // IDL:Resource/commit_one_phase:1.0
    //
    virtual void commit_one_phase();

    //
    // IDL:Resource/forget:1.0
    //
    virtual void forget();

    //
    // IDL:Resource/release:1.0
    //
    virtual void release();

    //
    // IDL:Resource/BeginTrans:1.0
    //
    virtual CORBA::Boolean BeginTrans();

    //
    // IDL:Resource/set_recoverycoordinator:1.0
    //
    virtual void set_recoverycoordinator(CosTransactions::RecoveryCoordinator_ptr rc);

    //
    // IDL:Resource/heuristic_decision:1.0
    //
    virtual void heuristic_decision();
};

#endif
