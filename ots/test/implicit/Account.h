// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.0

#ifndef ___Account_h__
#define ___Account_h__

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010000L)
#       error ORBacus version mismatch!
#   endif
#endif

class Account;
typedef Account* Account_ptr;
typedef Account* AccountRef;

extern OB::TypeCodeConst _tc_Account;

void OBDuplicate(Account_ptr);
void OBRelease(Account_ptr);

void OBMarshal(Account_ptr, OB::OutputStreamImpl*);
void OBUnmarshal(Account_ptr&, OB::InputStreamImpl*);

typedef OB::ObjVar< Account > Account_var;
typedef OB::ObjOut< Account > Account_out;

class OBStubImpl_Account;
typedef OBStubImpl_Account* OBStubImpl_Account_ptr;

void OBDuplicate(OBStubImpl_Account_ptr);
void OBRelease(OBStubImpl_Account_ptr);

typedef OB::ObjVar< OBStubImpl_Account > OBStubImpl_Account_var;

//
// IDL:implicit/Account:1.0
//
class Account : virtual public CORBA::Object
{
    Account(const Account&);
    void operator=(const Account&);

protected:

    static const char* ids_[];

public:

    Account() { }
    virtual ~Account() { }

    typedef Account_ptr _ptr_type;
    typedef Account_var _var_type;

    static inline Account_ptr
    _duplicate(Account_ptr p)
    {
        if(p)
            p -> _add_ref();
        return p;
    }

    static inline Account_ptr
    _nil()
    {
        return 0;
    }

    static Account_ptr _narrow(CORBA::Object_ptr);
    static Account_ptr _unchecked_narrow(CORBA::Object_ptr);

    static Account_ptr _narrow(CORBA::AbstractBase_ptr);
    static Account_ptr _unchecked_narrow(CORBA::AbstractBase_ptr);

    static const char** _OB_staticIds();

    //
    // IDL:implicit/Account/connect:1.0
    //
    virtual void connect() = 0;

    //
    // IDL:implicit/Account/close:1.0
    //
    virtual void close() = 0;

    //
    // IDL:implicit/Account/sum:1.0
    //
    virtual void sum() = 0;

    //
    // IDL:implicit/Account/deposit:1.0
    //
    virtual void deposit() = 0;

    //
    // IDL:implicit/Account/withdraw:1.0
    //
    virtual void withdraw() = 0;
};

//
// IDL:implicit/Account:1.0
//
class OBProxy_Account : virtual public ::Account,
                        virtual public OBCORBA::Object
{
    OBProxy_Account(const OBProxy_Account&);
    void operator=(const OBProxy_Account&);

protected:

    virtual OB::MarshalStubImpl_ptr _OB_createMarshalStubImpl();

public:

    OBProxy_Account() { }
    virtual ~OBProxy_Account() { }

    virtual const char** _OB_ids() const;

    //
    // IDL:implicit/Account/connect:1.0
    //
    void connect();

    //
    // IDL:implicit/Account/close:1.0
    //
    void close();

    //
    // IDL:implicit/Account/sum:1.0
    //
    void sum();

    //
    // IDL:implicit/Account/deposit:1.0
    //
    void deposit();

    //
    // IDL:implicit/Account/withdraw:1.0
    //
    void withdraw();
};

//
// IDL:implicit/Account:1.0
//
class OBStubImpl_Account : virtual public OB::StubImplBase
{
    OBStubImpl_Account(const OBStubImpl_Account&);
    void operator=(const OBStubImpl_Account&);

protected:

    OBStubImpl_Account() { }

public:

    static inline OBStubImpl_Account_ptr
    _duplicate(OBStubImpl_Account_ptr p)
    {
        if(p)
            p -> _OB_incRef();
        return p;
    }

    static inline OBStubImpl_Account_ptr
    _nil()
    {
        return 0;
    }

    //
    // IDL:implicit/Account/connect:1.0
    //
    virtual void connect() = 0;

    //
    // IDL:implicit/Account/close:1.0
    //
    virtual void close() = 0;

    //
    // IDL:implicit/Account/sum:1.0
    //
    virtual void sum() = 0;

    //
    // IDL:implicit/Account/deposit:1.0
    //
    virtual void deposit() = 0;

    //
    // IDL:implicit/Account/withdraw:1.0
    //
    virtual void withdraw() = 0;
};

//
// IDL:implicit/Account:1.0
//
class OBMarshalStubImpl_Account : virtual public OBStubImpl_Account,
                                  virtual public OB::MarshalStubImpl
{
    OBMarshalStubImpl_Account(const OBMarshalStubImpl_Account&);
    void operator=(const OBMarshalStubImpl_Account&);

protected:

    OBMarshalStubImpl_Account() { }
    friend class OBProxy_Account;

public:

    //
    // IDL:implicit/Account/connect:1.0
    //
    virtual void connect();

    //
    // IDL:implicit/Account/close:1.0
    //
    virtual void close();

    //
    // IDL:implicit/Account/sum:1.0
    //
    virtual void sum();

    //
    // IDL:implicit/Account/deposit:1.0
    //
    virtual void deposit();

    //
    // IDL:implicit/Account/withdraw:1.0
    //
    virtual void withdraw();
};

//
// IDL:implicit/Account:1.0
//
namespace CORBA
{

inline void
release(::Account_ptr p)
{
    if(p)
        p -> _remove_ref();
}

inline Boolean
is_nil(::Account_ptr p)
{
    return p == 0;
}

inline void
release(OBStubImpl_Account_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

inline Boolean
is_nil(OBStubImpl_Account_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, Account_ptr*);
void operator<<=(CORBA::Any&, Account_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, Account_ptr&);

inline void
operator<<=(CORBA::Any_var& any, Account_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, Account_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, Account_ptr& val)
{
    return any.in() >>= val;
}

#endif
