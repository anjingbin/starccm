// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.0

#ifndef ___Counter_h__
#define ___Counter_h__

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010000L)
#       error ORBacus version mismatch!
#   endif
#endif

class Counter;
typedef Counter* Counter_ptr;
typedef Counter* CounterRef;

extern OB::TypeCodeConst _tc_Counter;

void OBDuplicate(Counter_ptr);
void OBRelease(Counter_ptr);

void OBMarshal(Counter_ptr, OB::OutputStreamImpl*);
void OBUnmarshal(Counter_ptr&, OB::InputStreamImpl*);

typedef OB::ObjVar< Counter > Counter_var;
typedef OB::ObjOut< Counter > Counter_out;

class OBStubImpl_Counter;
typedef OBStubImpl_Counter* OBStubImpl_Counter_ptr;

void OBDuplicate(OBStubImpl_Counter_ptr);
void OBRelease(OBStubImpl_Counter_ptr);

typedef OB::ObjVar< OBStubImpl_Counter > OBStubImpl_Counter_var;

//
// IDL:Counter:1.0
//
class Counter : virtual public CORBA::Object
{
    Counter(const Counter&);
    void operator=(const Counter&);

protected:

    static const char* ids_[];

public:

    Counter() { }
    virtual ~Counter() { }

    typedef Counter_ptr _ptr_type;
    typedef Counter_var _var_type;

    static inline Counter_ptr
    _duplicate(Counter_ptr p)
    {
        if(p)
            p -> _add_ref();
        return p;
    }

    static inline Counter_ptr
    _nil()
    {
        return 0;
    }

    static Counter_ptr _narrow(CORBA::Object_ptr);
    static Counter_ptr _unchecked_narrow(CORBA::Object_ptr);

    static Counter_ptr _narrow(CORBA::AbstractBase_ptr);
    static Counter_ptr _unchecked_narrow(CORBA::AbstractBase_ptr);

    static const char** _OB_staticIds();

    //
    // IDL:Counter/count:1.0
    //
    virtual CORBA::Long count() = 0;

    //
    // IDL:Counter/increment:1.0
    //
    virtual void increment() = 0;

    //
    // IDL:Counter/decrement:1.0
    //
    virtual void decrement() = 0;
};

//
// IDL:Counter:1.0
//
class OBProxy_Counter : virtual public ::Counter,
                        virtual public OBCORBA::Object
{
    OBProxy_Counter(const OBProxy_Counter&);
    void operator=(const OBProxy_Counter&);

protected:

    virtual OB::MarshalStubImpl_ptr _OB_createMarshalStubImpl();

public:

    OBProxy_Counter() { }
    virtual ~OBProxy_Counter() { }

    virtual const char** _OB_ids() const;

    //
    // IDL:Counter/count:1.0
    //
    CORBA::Long count();

    //
    // IDL:Counter/increment:1.0
    //
    void increment();

    //
    // IDL:Counter/decrement:1.0
    //
    void decrement();
};

//
// IDL:Counter:1.0
//
class OBStubImpl_Counter : virtual public OB::StubImplBase
{
    OBStubImpl_Counter(const OBStubImpl_Counter&);
    void operator=(const OBStubImpl_Counter&);

protected:

    OBStubImpl_Counter() { }

public:

    static inline OBStubImpl_Counter_ptr
    _duplicate(OBStubImpl_Counter_ptr p)
    {
        if(p)
            p -> _OB_incRef();
        return p;
    }

    static inline OBStubImpl_Counter_ptr
    _nil()
    {
        return 0;
    }

    //
    // IDL:Counter/count:1.0
    //
    virtual CORBA::Long count() = 0;

    //
    // IDL:Counter/increment:1.0
    //
    virtual void increment() = 0;

    //
    // IDL:Counter/decrement:1.0
    //
    virtual void decrement() = 0;
};

//
// IDL:Counter:1.0
//
class OBMarshalStubImpl_Counter : virtual public OBStubImpl_Counter,
                                  virtual public OB::MarshalStubImpl
{
    OBMarshalStubImpl_Counter(const OBMarshalStubImpl_Counter&);
    void operator=(const OBMarshalStubImpl_Counter&);

protected:

    OBMarshalStubImpl_Counter() { }
    friend class OBProxy_Counter;

public:

    //
    // IDL:Counter/count:1.0
    //
    virtual CORBA::Long count();

    //
    // IDL:Counter/increment:1.0
    //
    virtual void increment();

    //
    // IDL:Counter/decrement:1.0
    //
    virtual void decrement();
};

//
// IDL:Counter:1.0
//
namespace CORBA
{

inline void
release(::Counter_ptr p)
{
    if(p)
        p -> _remove_ref();
}

inline Boolean
is_nil(::Counter_ptr p)
{
    return p == 0;
}

inline void
release(OBStubImpl_Counter_ptr p)
{
    if(p)
        p -> _OB_decRef();
}

inline Boolean
is_nil(OBStubImpl_Counter_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, Counter_ptr*);
void operator<<=(CORBA::Any&, Counter_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, Counter_ptr&);

inline void
operator<<=(CORBA::Any_var& any, Counter_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, Counter_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, Counter_ptr& val)
{
    return any.in() >>= val;
}

#endif
