// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 2001
// IONA Technologies, Inc.
// Waltham, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.1.0

#include <OB/CORBAServer.h>
#include <Counter_skel.h>

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined! Is <OB/CORBA.h> included?
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 4010000L)
#       error ORBacus version mismatch!
#   endif
#endif

//
// IDL:Counter/count:1.0
//
void
POA_Counter::_OB_get_count(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    CORBA::Long _ob_r = count();
    OB::OutputStreamImpl* _ob_out = _OB_preMarshal(_ob_up);
    _ob_out -> write_long(_ob_r);
    _OB_postMarshal(_ob_up);
}

//
// IDL:Counter/increment:1.0
//
void
POA_Counter::_OB_op_increment(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    increment();
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:Counter/decrement:1.0
//
void
POA_Counter::_OB_op_decrement(OB::Upcall_ptr _ob_up)
{
    _OB_preUnmarshal(_ob_up);
    _OB_postUnmarshal(_ob_up);
    decrement();
    _OB_preMarshal(_ob_up);
    _OB_postMarshal(_ob_up);
}

//
// IDL:Counter:1.0
//
CORBA::Boolean
POA_Counter::_is_a(const char* type)
    throw(CORBA::SystemException)
{
    const char** _ob_ids = Counter::_OB_staticIds();
    for(CORBA::ULong _ob_i = 0 ; _ob_ids[_ob_i] != 0 ; _ob_i++)
        if(strcmp(type, _ob_ids[_ob_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_Counter::_primary_interface(const PortableServer::ObjectId&,
                                PortableServer::POA_ptr)
{
    return CORBA::string_dup(Counter::_OB_staticIds()[0]);
}

Counter_ptr
POA_Counter::_this()
{
    CORBA::Object_var obj = _OB_createReference();
    Counter_var result = Counter::_narrow(obj);
    return result._retn();
}

OB::DirectStubImpl_ptr
POA_Counter::_OB_createDirectStubImpl(PortableServer::POA_ptr poa,
                                      const PortableServer::ObjectId& oid)
{
    return new OBDirectStubImpl_Counter(poa, oid, this);
}

void
POA_Counter::_OB_dispatch(OB::Upcall_ptr _ob_up)
{
    static const char* _ob_names[] =
    {
        "_get_count",
        "decrement",
        "increment"
    };
    static const CORBA::ULong _ob_numNames = 3;

    switch(_OB_findOperation(_ob_up, _ob_names, _ob_numNames))
    {
    case 0: // _get_count
        _OB_get_count(_ob_up);
        return;

    case 1: // decrement
        _OB_op_decrement(_ob_up);
        return;

    case 2: // increment
        _OB_op_increment(_ob_up);
        return;
    }

    _OB_dispatchBase(_ob_up);
}

//
// IDL:Counter:1.0
//
OBDirectStubImpl_Counter::OBDirectStubImpl_Counter(PortableServer::POA_ptr poa,
                                                   const PortableServer::ObjectId& oid,
                                                   PortableServer::ServantBase* servant)
#ifdef HAVE_VCPLUSPLUS_BUGS
{
    _ob_initialize(poa, oid, servant);
}
#else
    : OB::DirectStubImpl(poa, oid, servant)
{
}
#endif

//
// IDL:Counter/count:1.0
//
CORBA::Long
OBDirectStubImpl_Counter::count()
{
    OB::InvocationHandler _ob_handler(this, "_get_count");
    return dynamic_cast<POA_Counter*>(_ob_servant_) -> count();
}

//
// IDL:Counter/increment:1.0
//
void
OBDirectStubImpl_Counter::increment()
{
    OB::InvocationHandler _ob_handler(this, "increment");
    dynamic_cast<POA_Counter*>(_ob_servant_) -> increment();
}

//
// IDL:Counter/decrement:1.0
//
void
OBDirectStubImpl_Counter::decrement()
{
    OB::InvocationHandler _ob_handler(this, "decrement");
    dynamic_cast<POA_Counter*>(_ob_servant_) -> decrement();
}
