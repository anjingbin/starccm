// *************************************************************************
//
// This File Is Automatically Generated by the StarBusIDL-to-C++ Compiler !
//
// Copyright (c) 2003
// Network Information Security Institute,Computer College,NUDT.
// ChangSha,Hunan,PRC
//
// All Rights Reserved
//
// *************************************************************************

// Version: 5.0.0

#include <STAR/CORBAServer.h>
#include <CosTransactionsOTS_skel.h>

//
// Module declare ::CosTransactions
//

//
// ProtectedOperation declare create
//
void
POA_CosTransactions::TransactionFactory::_STAR_op_create(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    CORBA::ULong _star_a0;
    CosTransactions::Control_var _star_r;
    STAR::InputStreamImpl* _star_in = _STAR_preRemoveHeader(_star_up);
    _star_a0 = _star_in -> read_ulong();
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::TransactionFactory * objImpl=dynamic_cast< POA_CosTransactions::TransactionFactory*>( serv );
    if(objImpl!=NULL) 
    {
         _star_r =  objImpl ->create(_star_a0);
    }
    STAR::OutputStreamImpl* _star_out = _STAR_prePrepareHeader(_star_up);
    STARMarshal(_star_r.in(), _star_out);
    _STAR_postPrepareHeader(_star_up);
}

//
// Interface declare ::CosTransactions::TransactionFactory
//
CORBA::Boolean
POA_CosTransactions::TransactionFactory::_is_a(const char* type)
    throw(CORBA::SystemException)
{
    const char** _star_ids = CosTransactions::TransactionFactory::_STAR_staticIds();
    for(CORBA::ULong _star_i = 0 ; _star_ids[_star_i] != 0 ; _star_i++)
        if(strcmp(type, _star_ids[_star_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_CosTransactions::TransactionFactory::_primary_interface(const PortableServer::ObjectId&,
                                                            PortableServer::POA_ptr)
{
    return CORBA::string_dup(CosTransactions::TransactionFactory::_STAR_staticIds()[0]);
}

CosTransactions::TransactionFactory_ptr
POA_CosTransactions::TransactionFactory::_this()
{
    CORBA::Object_var obj = _STAR_buildReference();
    CosTransactions::TransactionFactory_var result = CosTransactions::TransactionFactory::_narrow(obj);
    return result._retn();
}

void
POA_CosTransactions::TransactionFactory::_STAR_dispatch(STAR::Upcall_ptr _star_up)
{
    static const PortableServer::OperationTableEntry TransactionFactory_Optable_fixed[] =
    {
        {"_component",PortableServer::ServantBase::_STAR_op_get_component},
        {"_interface",PortableServer::ServantBase::_STAR_op_get_interface},
        {"_is_a",PortableServer::ServantBase::_STAR_op_is_a},
        {"_non_existent",PortableServer::ServantBase::_STAR_op_non_existent}
    };
    static const PortableServer::OperationTableEntry TransactionFactory_Optable_unfixed[] =
    {
        {"create",POA_CosTransactions::TransactionFactory::_STAR_op_create}
    };
    static const CORBA::ULong _star_methodCount = 1;

    PortableServer::operationSkel operation;
    if(_STAR_locateOperation(_star_up,TransactionFactory_Optable_unfixed,_star_methodCount, operation))
    {
        (*operation)(this,_star_up);
        return;
    }
    else
    if(_STAR_locateOperation(_star_up,TransactionFactory_Optable_fixed,4, operation))
    {
        (*operation)(this,_star_up);
        return;
    }
    throw CORBA::BAD_OPERATION(0, CORBA::COMPLETED_NO);

}

//
// ProtectedOperation declare get_terminator
//
void
POA_CosTransactions::Control::_STAR_op_get_terminator(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    CosTransactions::Terminator_var _star_r;
    _STAR_preRemoveHeader(_star_up);
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::Control * objImpl=dynamic_cast< POA_CosTransactions::Control*>( serv );
    if(objImpl!=NULL) 
    {
         _star_r =  objImpl ->get_terminator();
    }
    STAR::OutputStreamImpl* _star_out = _STAR_prePrepareHeader(_star_up);
    STARMarshal(_star_r.in(), _star_out);
    _STAR_postPrepareHeader(_star_up);
}

//
// ProtectedOperation declare get_coordinator
//
void
POA_CosTransactions::Control::_STAR_op_get_coordinator(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    CosTransactions::Coordinator_var _star_r;
    _STAR_preRemoveHeader(_star_up);
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::Control * objImpl=dynamic_cast< POA_CosTransactions::Control*>( serv );
    if(objImpl!=NULL) 
    {
         _star_r =  objImpl ->get_coordinator();
    }
    STAR::OutputStreamImpl* _star_out = _STAR_prePrepareHeader(_star_up);
    STARMarshal(_star_r.in(), _star_out);
    _STAR_postPrepareHeader(_star_up);
}

//
// ProtectedOperation declare release
//
void
POA_CosTransactions::Control::_STAR_op_release(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    _STAR_preRemoveHeader(_star_up);
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::Control * objImpl=dynamic_cast< POA_CosTransactions::Control*>( serv );
    if(objImpl!=NULL) 
    {
         objImpl ->release();
    }
    _STAR_prePrepareHeader(_star_up);
    _STAR_postPrepareHeader(_star_up);
}

//
// Interface declare ::CosTransactions::Control
//
CORBA::Boolean
POA_CosTransactions::Control::_is_a(const char* type)
    throw(CORBA::SystemException)
{
    const char** _star_ids = CosTransactions::Control::_STAR_staticIds();
    for(CORBA::ULong _star_i = 0 ; _star_ids[_star_i] != 0 ; _star_i++)
        if(strcmp(type, _star_ids[_star_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_CosTransactions::Control::_primary_interface(const PortableServer::ObjectId&,
                                                 PortableServer::POA_ptr)
{
    return CORBA::string_dup(CosTransactions::Control::_STAR_staticIds()[0]);
}

CosTransactions::Control_ptr
POA_CosTransactions::Control::_this()
{
    CORBA::Object_var obj = _STAR_buildReference();
    CosTransactions::Control_var result = CosTransactions::Control::_narrow(obj);
    return result._retn();
}

void
POA_CosTransactions::Control::_STAR_dispatch(STAR::Upcall_ptr _star_up)
{
    static const PortableServer::OperationTableEntry Control_Optable_fixed[] =
    {
        {"_component",PortableServer::ServantBase::_STAR_op_get_component},
        {"_interface",PortableServer::ServantBase::_STAR_op_get_interface},
        {"_is_a",PortableServer::ServantBase::_STAR_op_is_a},
        {"_non_existent",PortableServer::ServantBase::_STAR_op_non_existent}
    };
    static const PortableServer::OperationTableEntry Control_Optable_unfixed[] =
    {
        {"get_coordinator",POA_CosTransactions::Control::_STAR_op_get_coordinator},
        {"get_terminator",POA_CosTransactions::Control::_STAR_op_get_terminator},
        {"release",POA_CosTransactions::Control::_STAR_op_release}
    };
    static const CORBA::ULong _star_methodCount = 3;

    PortableServer::operationSkel operation;
    if(_STAR_locateOperation(_star_up,Control_Optable_unfixed,_star_methodCount, operation))
    {
        (*operation)(this,_star_up);
        return;
    }
    else
    if(_STAR_locateOperation(_star_up,Control_Optable_fixed,4, operation))
    {
        (*operation)(this,_star_up);
        return;
    }
    throw CORBA::BAD_OPERATION(0, CORBA::COMPLETED_NO);

}

//
// ProtectedOperation declare commit
//
void
POA_CosTransactions::Terminator::_STAR_op_commit(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    CORBA::Boolean _star_a0;
    STAR::InputStreamImpl* _star_in = _STAR_preRemoveHeader(_star_up);
    _star_a0 = _star_in -> read_boolean();
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::Terminator * objImpl=dynamic_cast< POA_CosTransactions::Terminator*>( serv );
    if(objImpl!=NULL) 
    {
         objImpl ->commit(_star_a0);
    }
    _STAR_prePrepareHeader(_star_up);
    _STAR_postPrepareHeader(_star_up);
}

//
// ProtectedOperation declare rollback
//
void
POA_CosTransactions::Terminator::_STAR_op_rollback(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    _STAR_preRemoveHeader(_star_up);
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::Terminator * objImpl=dynamic_cast< POA_CosTransactions::Terminator*>( serv );
    if(objImpl!=NULL) 
    {
         objImpl ->rollback();
    }
    _STAR_prePrepareHeader(_star_up);
    _STAR_postPrepareHeader(_star_up);
}

//
// ProtectedOperation declare release
//
void
POA_CosTransactions::Terminator::_STAR_op_release(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    _STAR_preRemoveHeader(_star_up);
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::Terminator * objImpl=dynamic_cast< POA_CosTransactions::Terminator*>( serv );
    if(objImpl!=NULL) 
    {
         objImpl ->release();
    }
    _STAR_prePrepareHeader(_star_up);
    _STAR_postPrepareHeader(_star_up);
}

//
// Interface declare ::CosTransactions::Terminator
//
CORBA::Boolean
POA_CosTransactions::Terminator::_is_a(const char* type)
    throw(CORBA::SystemException)
{
    const char** _star_ids = CosTransactions::Terminator::_STAR_staticIds();
    for(CORBA::ULong _star_i = 0 ; _star_ids[_star_i] != 0 ; _star_i++)
        if(strcmp(type, _star_ids[_star_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_CosTransactions::Terminator::_primary_interface(const PortableServer::ObjectId&,
                                                    PortableServer::POA_ptr)
{
    return CORBA::string_dup(CosTransactions::Terminator::_STAR_staticIds()[0]);
}

CosTransactions::Terminator_ptr
POA_CosTransactions::Terminator::_this()
{
    CORBA::Object_var obj = _STAR_buildReference();
    CosTransactions::Terminator_var result = CosTransactions::Terminator::_narrow(obj);
    return result._retn();
}

void
POA_CosTransactions::Terminator::_STAR_dispatch(STAR::Upcall_ptr _star_up)
{
    static const PortableServer::OperationTableEntry Terminator_Optable_fixed[] =
    {
        {"_component",PortableServer::ServantBase::_STAR_op_get_component},
        {"_interface",PortableServer::ServantBase::_STAR_op_get_interface},
        {"_is_a",PortableServer::ServantBase::_STAR_op_is_a},
        {"_non_existent",PortableServer::ServantBase::_STAR_op_non_existent}
    };
    static const PortableServer::OperationTableEntry Terminator_Optable_unfixed[] =
    {
        {"commit",POA_CosTransactions::Terminator::_STAR_op_commit},
        {"release",POA_CosTransactions::Terminator::_STAR_op_release},
        {"rollback",POA_CosTransactions::Terminator::_STAR_op_rollback}
    };
    static const CORBA::ULong _star_methodCount = 3;

    PortableServer::operationSkel operation;
    if(_STAR_locateOperation(_star_up,Terminator_Optable_unfixed,_star_methodCount, operation))
    {
        (*operation)(this,_star_up);
        return;
    }
    else
    if(_STAR_locateOperation(_star_up,Terminator_Optable_fixed,4, operation))
    {
        (*operation)(this,_star_up);
        return;
    }
    throw CORBA::BAD_OPERATION(0, CORBA::COMPLETED_NO);

}

//
// ProtectedOperation declare get_status
//
void
POA_CosTransactions::Coordinator::_STAR_op_get_status(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    CosTransactions::Status _star_r;
    _STAR_preRemoveHeader(_star_up);
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::Coordinator * objImpl=dynamic_cast< POA_CosTransactions::Coordinator*>( serv );
    if(objImpl!=NULL) 
    {
         _star_r =  objImpl ->get_status();
    }
    STAR::OutputStreamImpl* _star_out = _STAR_prePrepareHeader(_star_up);
    _star_out -> write_ulong((CORBA::ULong)_star_r);
    _STAR_postPrepareHeader(_star_up);
}

//
// ProtectedOperation declare is_same_transaction
//
void
POA_CosTransactions::Coordinator::_STAR_op_is_same_transaction(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    CosTransactions::Coordinator_var _star_a0;
    CORBA::Boolean _star_r;
    STAR::InputStreamImpl* _star_in = _STAR_preRemoveHeader(_star_up);
    STARUnmarshal(_star_a0.inout(), _star_in);
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::Coordinator * objImpl=dynamic_cast< POA_CosTransactions::Coordinator*>( serv );
    if(objImpl!=NULL) 
    {
         _star_r =  objImpl ->is_same_transaction(_star_a0);
    }
    STAR::OutputStreamImpl* _star_out = _STAR_prePrepareHeader(_star_up);
    _star_out -> write_boolean(_star_r);
    _STAR_postPrepareHeader(_star_up);
}

//
// ProtectedOperation declare register_resource
//
void
POA_CosTransactions::Coordinator::_STAR_op_register_resource(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    Resource_var _star_a0;
    CosTransactions::RecoveryCoordinator_var _star_r;
    STAR::InputStreamImpl* _star_in = _STAR_preRemoveHeader(_star_up);
    STARUnmarshal(_star_a0.inout(), _star_in);
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::Coordinator * objImpl=dynamic_cast< POA_CosTransactions::Coordinator*>( serv );
    if(objImpl!=NULL) 
    {
         _star_r =  objImpl ->register_resource(_star_a0);
    }
    STAR::OutputStreamImpl* _star_out = _STAR_prePrepareHeader(_star_up);
    STARMarshal(_star_r.in(), _star_out);
    _STAR_postPrepareHeader(_star_up);
}

//
// ProtectedOperation declare register_synchronization
//
void
POA_CosTransactions::Coordinator::_STAR_op_register_synchronization(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    CosTransactions::Synchronization_var _star_a0;
    STAR::InputStreamImpl* _star_in = _STAR_preRemoveHeader(_star_up);
    STARUnmarshal(_star_a0.inout(), _star_in);
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::Coordinator * objImpl=dynamic_cast< POA_CosTransactions::Coordinator*>( serv );
    if(objImpl!=NULL) 
    {
         objImpl ->register_synchronization(_star_a0);
    }
    _STAR_prePrepareHeader(_star_up);
    _STAR_postPrepareHeader(_star_up);
}

//
// ProtectedOperation declare rollback_only
//
void
POA_CosTransactions::Coordinator::_STAR_op_rollback_only(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    _STAR_preRemoveHeader(_star_up);
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::Coordinator * objImpl=dynamic_cast< POA_CosTransactions::Coordinator*>( serv );
    if(objImpl!=NULL) 
    {
         objImpl ->rollback_only();
    }
    _STAR_prePrepareHeader(_star_up);
    _STAR_postPrepareHeader(_star_up);
}

//
// ProtectedOperation declare commit
//
void
POA_CosTransactions::Coordinator::_STAR_op_commit(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    CORBA::Boolean _star_a0;
    STAR::InputStreamImpl* _star_in = _STAR_preRemoveHeader(_star_up);
    _star_a0 = _star_in -> read_boolean();
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::Coordinator * objImpl=dynamic_cast< POA_CosTransactions::Coordinator*>( serv );
    if(objImpl!=NULL) 
    {
         objImpl ->commit(_star_a0);
    }
    _STAR_prePrepareHeader(_star_up);
    _STAR_postPrepareHeader(_star_up);
}

//
// ProtectedOperation declare rollback
//
void
POA_CosTransactions::Coordinator::_STAR_op_rollback(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    _STAR_preRemoveHeader(_star_up);
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::Coordinator * objImpl=dynamic_cast< POA_CosTransactions::Coordinator*>( serv );
    if(objImpl!=NULL) 
    {
         objImpl ->rollback();
    }
    _STAR_prePrepareHeader(_star_up);
    _STAR_postPrepareHeader(_star_up);
}

//
// ProtectedOperation declare change_resourcevote
//
void
POA_CosTransactions::Coordinator::_STAR_op_change_resourcevote(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    Resource_var _star_a0;
    CosTransactions::ResourceVote _star_a1;
    STAR::InputStreamImpl* _star_in = _STAR_preRemoveHeader(_star_up);
    STARUnmarshal(_star_a0.inout(), _star_in);
    _star_a1 = (CosTransactions::ResourceVote)_star_in -> read_ulong();
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::Coordinator * objImpl=dynamic_cast< POA_CosTransactions::Coordinator*>( serv );
    if(objImpl!=NULL) 
    {
         objImpl ->change_resourcevote(_star_a0, _star_a1);
    }
    _STAR_prePrepareHeader(_star_up);
    _STAR_postPrepareHeader(_star_up);
}

//
// ProtectedOperation declare release
//
void
POA_CosTransactions::Coordinator::_STAR_op_release(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    _STAR_preRemoveHeader(_star_up);
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::Coordinator * objImpl=dynamic_cast< POA_CosTransactions::Coordinator*>( serv );
    if(objImpl!=NULL) 
    {
         objImpl ->release();
    }
    _STAR_prePrepareHeader(_star_up);
    _STAR_postPrepareHeader(_star_up);
}

//
// Interface declare ::CosTransactions::Coordinator
//
CORBA::Boolean
POA_CosTransactions::Coordinator::_is_a(const char* type)
    throw(CORBA::SystemException)
{
    const char** _star_ids = CosTransactions::Coordinator::_STAR_staticIds();
    for(CORBA::ULong _star_i = 0 ; _star_ids[_star_i] != 0 ; _star_i++)
        if(strcmp(type, _star_ids[_star_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_CosTransactions::Coordinator::_primary_interface(const PortableServer::ObjectId&,
                                                     PortableServer::POA_ptr)
{
    return CORBA::string_dup(CosTransactions::Coordinator::_STAR_staticIds()[0]);
}

CosTransactions::Coordinator_ptr
POA_CosTransactions::Coordinator::_this()
{
    CORBA::Object_var obj = _STAR_buildReference();
    CosTransactions::Coordinator_var result = CosTransactions::Coordinator::_narrow(obj);
    return result._retn();
}

void
POA_CosTransactions::Coordinator::_STAR_dispatch(STAR::Upcall_ptr _star_up)
{
    static const PortableServer::OperationTableEntry Coordinator_Optable_fixed[] =
    {
        {"_component",PortableServer::ServantBase::_STAR_op_get_component},
        {"_interface",PortableServer::ServantBase::_STAR_op_get_interface},
        {"_is_a",PortableServer::ServantBase::_STAR_op_is_a},
        {"_non_existent",PortableServer::ServantBase::_STAR_op_non_existent}
    };
    static const PortableServer::OperationTableEntry Coordinator_Optable_unfixed[] =
    {
        {"change_resourcevote",POA_CosTransactions::Coordinator::_STAR_op_change_resourcevote},
        {"commit",POA_CosTransactions::Coordinator::_STAR_op_commit},
        {"get_status",POA_CosTransactions::Coordinator::_STAR_op_get_status},
        {"is_same_transaction",POA_CosTransactions::Coordinator::_STAR_op_is_same_transaction},
        {"register_resource",POA_CosTransactions::Coordinator::_STAR_op_register_resource},
        {"register_synchronization",POA_CosTransactions::Coordinator::_STAR_op_register_synchronization},
        {"release",POA_CosTransactions::Coordinator::_STAR_op_release},
        {"rollback",POA_CosTransactions::Coordinator::_STAR_op_rollback},
        {"rollback_only",POA_CosTransactions::Coordinator::_STAR_op_rollback_only}
    };
    static const CORBA::ULong _star_methodCount = 9;

    PortableServer::operationSkel operation;
    if(_STAR_locateOperation(_star_up,Coordinator_Optable_unfixed,_star_methodCount, operation))
    {
        (*operation)(this,_star_up);
        return;
    }
    else
    if(_STAR_locateOperation(_star_up,Coordinator_Optable_fixed,4, operation))
    {
        (*operation)(this,_star_up);
        return;
    }
    throw CORBA::BAD_OPERATION(0, CORBA::COMPLETED_NO);

}

//
// ProtectedOperation declare replay_completion
//
void
POA_CosTransactions::RecoveryCoordinator::_STAR_op_replay_completion(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    Resource_var _star_a0;
    CosTransactions::Status _star_r;
    STAR::InputStreamImpl* _star_in = _STAR_preRemoveHeader(_star_up);
    STARUnmarshal(_star_a0.inout(), _star_in);
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::RecoveryCoordinator * objImpl=dynamic_cast< POA_CosTransactions::RecoveryCoordinator*>( serv );
    if(objImpl!=NULL) 
    {
         _star_r =  objImpl ->replay_completion(_star_a0);
    }
    STAR::OutputStreamImpl* _star_out = _STAR_prePrepareHeader(_star_up);
    _star_out -> write_ulong((CORBA::ULong)_star_r);
    _STAR_postPrepareHeader(_star_up);
}

//
// ProtectedOperation declare release
//
void
POA_CosTransactions::RecoveryCoordinator::_STAR_op_release(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    _STAR_preRemoveHeader(_star_up);
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::RecoveryCoordinator * objImpl=dynamic_cast< POA_CosTransactions::RecoveryCoordinator*>( serv );
    if(objImpl!=NULL) 
    {
         objImpl ->release();
    }
    _STAR_prePrepareHeader(_star_up);
    _STAR_postPrepareHeader(_star_up);
}

//
// Interface declare ::CosTransactions::RecoveryCoordinator
//
CORBA::Boolean
POA_CosTransactions::RecoveryCoordinator::_is_a(const char* type)
    throw(CORBA::SystemException)
{
    const char** _star_ids = CosTransactions::RecoveryCoordinator::_STAR_staticIds();
    for(CORBA::ULong _star_i = 0 ; _star_ids[_star_i] != 0 ; _star_i++)
        if(strcmp(type, _star_ids[_star_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_CosTransactions::RecoveryCoordinator::_primary_interface(const PortableServer::ObjectId&,
                                                             PortableServer::POA_ptr)
{
    return CORBA::string_dup(CosTransactions::RecoveryCoordinator::_STAR_staticIds()[0]);
}

CosTransactions::RecoveryCoordinator_ptr
POA_CosTransactions::RecoveryCoordinator::_this()
{
    CORBA::Object_var obj = _STAR_buildReference();
    CosTransactions::RecoveryCoordinator_var result = CosTransactions::RecoveryCoordinator::_narrow(obj);
    return result._retn();
}

void
POA_CosTransactions::RecoveryCoordinator::_STAR_dispatch(STAR::Upcall_ptr _star_up)
{
    static const PortableServer::OperationTableEntry RecoveryCoordinator_Optable_fixed[] =
    {
        {"_component",PortableServer::ServantBase::_STAR_op_get_component},
        {"_interface",PortableServer::ServantBase::_STAR_op_get_interface},
        {"_is_a",PortableServer::ServantBase::_STAR_op_is_a},
        {"_non_existent",PortableServer::ServantBase::_STAR_op_non_existent}
    };
    static const PortableServer::OperationTableEntry RecoveryCoordinator_Optable_unfixed[] =
    {
        {"release",POA_CosTransactions::RecoveryCoordinator::_STAR_op_release},
        {"replay_completion",POA_CosTransactions::RecoveryCoordinator::_STAR_op_replay_completion}
    };
    static const CORBA::ULong _star_methodCount = 2;

    PortableServer::operationSkel operation;
    if(_STAR_locateOperation(_star_up,RecoveryCoordinator_Optable_unfixed,_star_methodCount, operation))
    {
        (*operation)(this,_star_up);
        return;
    }
    else
    if(_STAR_locateOperation(_star_up,RecoveryCoordinator_Optable_fixed,4, operation))
    {
        (*operation)(this,_star_up);
        return;
    }
    throw CORBA::BAD_OPERATION(0, CORBA::COMPLETED_NO);

}

//
// Interface declare ::CosTransactions::TransactionalObject
//
CORBA::Boolean
POA_CosTransactions::TransactionalObject::_is_a(const char* type)
    throw(CORBA::SystemException)
{
    const char** _star_ids = CosTransactions::TransactionalObject::_STAR_staticIds();
    for(CORBA::ULong _star_i = 0 ; _star_ids[_star_i] != 0 ; _star_i++)
        if(strcmp(type, _star_ids[_star_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_CosTransactions::TransactionalObject::_primary_interface(const PortableServer::ObjectId&,
                                                             PortableServer::POA_ptr)
{
    return CORBA::string_dup(CosTransactions::TransactionalObject::_STAR_staticIds()[0]);
}

CosTransactions::TransactionalObject_ptr
POA_CosTransactions::TransactionalObject::_this()
{
    CORBA::Object_var obj = _STAR_buildReference();
    CosTransactions::TransactionalObject_var result = CosTransactions::TransactionalObject::_narrow(obj);
    return result._retn();
}

void
POA_CosTransactions::TransactionalObject::_STAR_dispatch(STAR::Upcall_ptr _star_up)
{
    static const PortableServer::OperationTableEntry TransactionalObject_Optable_fixed[] =
    {
        {"_component",PortableServer::ServantBase::_STAR_op_get_component},
        {"_interface",PortableServer::ServantBase::_STAR_op_get_interface},
        {"_is_a",PortableServer::ServantBase::_STAR_op_is_a},
        {"_non_existent",PortableServer::ServantBase::_STAR_op_non_existent}
    };
    PortableServer::operationSkel operation;
    if(_STAR_locateOperation(_star_up,TransactionalObject_Optable_fixed,3, operation))
    {
        (*operation)(this,_star_up);
        return;
    }
    throw CORBA::BAD_OPERATION(0, CORBA::COMPLETED_NO);
}
