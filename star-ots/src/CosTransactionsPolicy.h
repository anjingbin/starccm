// *************************************************************************
//
// This File Is Automatically Generated by the StarBusIDL-to-C++ Compiler !
//
// Copyright (c) 2003
// Network Information Security Institute,Computer College,NUDT.
// ChangSha,Hunan,PRC
//
// All Rights Reserved
//
// *************************************************************************

// Version: 5.0.0

#ifndef ___CosTransactionsPolicy_h__
#define ___CosTransactionsPolicy_h__

#include <CosTransactionsPolicyType.h>

namespace CosTransactions
{

class InvocationPolicy;
typedef InvocationPolicy* InvocationPolicy_ptr;
typedef InvocationPolicy* InvocationPolicyRef;

extern STAR::TypeCodeConst _tc_InvocationPolicy;

class OTSPolicy;
typedef OTSPolicy* OTSPolicy_ptr;
typedef OTSPolicy* OTSPolicyRef;

extern STAR::TypeCodeConst _tc_OTSPolicy;

class NonTxTargetPolicy;
typedef NonTxTargetPolicy* NonTxTargetPolicy_ptr;
typedef NonTxTargetPolicy* NonTxTargetPolicyRef;

extern STAR::TypeCodeConst _tc_NonTxTargetPolicy;

} // End of namespace CosTransactions

void STARDuplicate(CosTransactions::InvocationPolicy_ptr);
void STARRelease(CosTransactions::InvocationPolicy_ptr);

void STARMarshal(CosTransactions::InvocationPolicy_ptr, STAR::OutputStreamImpl*);
void STARUnmarshal(CosTransactions::InvocationPolicy_ptr&, STAR::InputStreamImpl*);

void STARDuplicate(CosTransactions::OTSPolicy_ptr);
void STARRelease(CosTransactions::OTSPolicy_ptr);

void STARMarshal(CosTransactions::OTSPolicy_ptr, STAR::OutputStreamImpl*);
void STARUnmarshal(CosTransactions::OTSPolicy_ptr&, STAR::InputStreamImpl*);

void STARDuplicate(CosTransactions::NonTxTargetPolicy_ptr);
void STARRelease(CosTransactions::NonTxTargetPolicy_ptr);

void STARMarshal(CosTransactions::NonTxTargetPolicy_ptr, STAR::OutputStreamImpl*);
void STARUnmarshal(CosTransactions::NonTxTargetPolicy_ptr&, STAR::InputStreamImpl*);

namespace CosTransactions
{

typedef STAR::ObjVar< InvocationPolicy > InvocationPolicy_var;
typedef STAR::ObjOut< InvocationPolicy > InvocationPolicy_out;

typedef STAR::ObjVar< OTSPolicy > OTSPolicy_var;
typedef STAR::ObjOut< OTSPolicy > OTSPolicy_out;

typedef STAR::ObjVar< NonTxTargetPolicy > NonTxTargetPolicy_var;
typedef STAR::ObjOut< NonTxTargetPolicy > NonTxTargetPolicy_out;

} // End of namespace CosTransactions

//
// Module declare ::CosTransactions
//
namespace CosTransactions
{

//
// Interface declare ::CosTransactions::InvocationPolicy
//
class InvocationPolicy : virtual public CORBA::Policy
{
    InvocationPolicy(const InvocationPolicy&);
    void operator=(const InvocationPolicy&);

protected:

    static const char* ids_[];

public:

    InvocationPolicy() { }
    virtual ~InvocationPolicy() { }

    typedef InvocationPolicy_ptr _ptr_type;
    typedef InvocationPolicy_var _var_type;

    static inline InvocationPolicy_ptr
    _duplicate(InvocationPolicy_ptr p)
    {
        if(p)
            p -> _STAR_incRef();
        return p;
    }

    static inline InvocationPolicy_ptr
    _nil()
    {
        return 0;
    }

    static InvocationPolicy_ptr _narrow(CORBA::Object_ptr);
    static InvocationPolicy_ptr _narrow(CORBA::AbstractBase_ptr);

    virtual const char** _STAR_ids() const;
    static const char** _STAR_staticIds();

    //
    // Attribute Get declare ::CosTransactions::InvocationPolicy::ipv
    //
    virtual InvocationPolicyValue ipv() = 0;
};


//
// Interface declare ::CosTransactions::OTSPolicy
//
class OTSPolicy : virtual public CORBA::Policy
{
    OTSPolicy(const OTSPolicy&);
    void operator=(const OTSPolicy&);

protected:

    static const char* ids_[];

public:

    OTSPolicy() { }
    virtual ~OTSPolicy() { }

    typedef OTSPolicy_ptr _ptr_type;
    typedef OTSPolicy_var _var_type;

    static inline OTSPolicy_ptr
    _duplicate(OTSPolicy_ptr p)
    {
        if(p)
            p -> _STAR_incRef();
        return p;
    }

    static inline OTSPolicy_ptr
    _nil()
    {
        return 0;
    }

    static OTSPolicy_ptr _narrow(CORBA::Object_ptr);
    static OTSPolicy_ptr _narrow(CORBA::AbstractBase_ptr);

    virtual const char** _STAR_ids() const;
    static const char** _STAR_staticIds();

    //
    // Attribute Get declare ::CosTransactions::OTSPolicy::tpv
    //
    virtual OTSPolicyValue tpv() = 0;
};


//
// Interface declare ::CosTransactions::NonTxTargetPolicy
//
class NonTxTargetPolicy : virtual public CORBA::Policy
{
    NonTxTargetPolicy(const NonTxTargetPolicy&);
    void operator=(const NonTxTargetPolicy&);

protected:

    static const char* ids_[];

public:

    NonTxTargetPolicy() { }
    virtual ~NonTxTargetPolicy() { }

    typedef NonTxTargetPolicy_ptr _ptr_type;
    typedef NonTxTargetPolicy_var _var_type;

    static inline NonTxTargetPolicy_ptr
    _duplicate(NonTxTargetPolicy_ptr p)
    {
        if(p)
            p -> _STAR_incRef();
        return p;
    }

    static inline NonTxTargetPolicy_ptr
    _nil()
    {
        return 0;
    }

    static NonTxTargetPolicy_ptr _narrow(CORBA::Object_ptr);
    static NonTxTargetPolicy_ptr _narrow(CORBA::AbstractBase_ptr);

    virtual const char** _STAR_ids() const;
    static const char** _STAR_staticIds();

    //
    // Attribute Get declare ::CosTransactions::NonTxTargetPolicy::tpv
    //
    virtual NonTxTargetPolicyValue tpv() = 0;
};


} // End of namespace CosTransactions

//
// Module declare ::CosTransactions
//
namespace OBV_CosTransactions
{

} // End of namespace OBV_CosTransactions

//
// Interface declare ::CosTransactions::InvocationPolicy
//
namespace CORBA
{

inline void
release(CosTransactions::InvocationPolicy_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

inline Boolean
is_nil(CosTransactions::InvocationPolicy_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, CosTransactions::InvocationPolicy_ptr*);
void operator<<=(CORBA::Any&, CosTransactions::InvocationPolicy_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, CosTransactions::InvocationPolicy_ptr&);

inline void
operator<<=(CORBA::Any_var& any, CosTransactions::InvocationPolicy_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, CosTransactions::InvocationPolicy_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, CosTransactions::InvocationPolicy_ptr& val)
{
    return any.in() >>= val;
}

//
// Interface declare ::CosTransactions::OTSPolicy
//
namespace CORBA
{

inline void
release(CosTransactions::OTSPolicy_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

inline Boolean
is_nil(CosTransactions::OTSPolicy_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, CosTransactions::OTSPolicy_ptr*);
void operator<<=(CORBA::Any&, CosTransactions::OTSPolicy_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, CosTransactions::OTSPolicy_ptr&);

inline void
operator<<=(CORBA::Any_var& any, CosTransactions::OTSPolicy_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, CosTransactions::OTSPolicy_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, CosTransactions::OTSPolicy_ptr& val)
{
    return any.in() >>= val;
}

//
// Interface declare ::CosTransactions::NonTxTargetPolicy
//
namespace CORBA
{

inline void
release(CosTransactions::NonTxTargetPolicy_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

inline Boolean
is_nil(CosTransactions::NonTxTargetPolicy_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, CosTransactions::NonTxTargetPolicy_ptr*);
void operator<<=(CORBA::Any&, CosTransactions::NonTxTargetPolicy_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, CosTransactions::NonTxTargetPolicy_ptr&);

inline void
operator<<=(CORBA::Any_var& any, CosTransactions::NonTxTargetPolicy_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, CosTransactions::NonTxTargetPolicy_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, CosTransactions::NonTxTargetPolicy_ptr& val)
{
    return any.in() >>= val;
}

#endif
