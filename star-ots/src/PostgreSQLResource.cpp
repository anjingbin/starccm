// *************************************************************************
//
// This File Is Automatically Generated by the StarBusIDL-to-C++ Compiler !
//
// Copyright (c) 2003
// Network Information Security Institute,Computer College,NUDT.
// ChangSha,Hunan,PRC
//
// All Rights Reserved
//
// *************************************************************************

// Version: 5.0.0

#include <STAR/CORBAClient.h>
#include <STAR/CORBAServer.h>
#include <PostgreSQLResource_skel.h>
#include <PostgreSQLResource.h>

STAR::TypeCodeConst _tc_pg_ConnStatusType(
"015384001500000040000000010000001a00000049444c3a70675f436f6e6e537461747573547"
"970653a312e300000001200000070675f436f6e6e5374617475735479706500000002000000"
);

STAR::TypeCodeConst _tc_pg_ExecStatusType(
"015384001500000040000000010000001a00000049444c3a70675f45786563537461747573547"
"970653a312e300000001200000070675f457865635374617475735479706500000002000000"
);

STAR::TypeCodeConst _tc_pg_PGnotify(
"015384000f00000054000000010000001400000049444c3a70675f50476e6f746966793a312e3"
"0000c00000070675f50476e6f7469667900020000000800000072656c6e616d65001200000000"
"0000000700000062655f706964000003000000"
);

STAR::TypeCodeConst _tc_PG_Resource(
"01a77d000e0000002c00000001f0fd7f1400000049444c3a50475f5265736f757263653a312e3"
"0000c00000050475f5265736f7572636500"
);

STAR::TypeCodeConst PG_Resource::_tc_PG_CONNECTTION_FAILED(
"01f112001600000054000000010000002a00000049444c3a50475f5265736f757263652f50475"
"f434f4e4e45435454494f4e5f4641494c45443a312e30007d001600000050475f434f4e4e4543"
"5454494f4e5f4641494c454400690000000000"
);

//
// Struct declare ::pg_PGnotify
//
#ifdef STAR_CLEAR_MEM
pg_PGnotify::pg_PGnotify()
{
    memset(&be_pid, 0, sizeof(be_pid));
}
#endif

pg_PGnotify::pg_PGnotify(const pg_PGnotify& _star_a)
    : relname(_star_a.relname),
      be_pid(_star_a.be_pid)
{
}

pg_PGnotify&
pg_PGnotify::operator=(const pg_PGnotify& _star_a)
{
    if(this != &_star_a)
    {
        relname = _star_a.relname;
        be_pid = _star_a.be_pid;
    }
    return *this;
}

void
pg_PGnotify::_STAR_marshal(STAR::OutputStreamImpl* _star_out) const
{
    _star_out -> write_string(relname);
    _star_out -> write_long(be_pid);
}

void
pg_PGnotify::_STAR_unmarshal(pg_PGnotify& _star_v, STAR::InputStreamImpl* _star_in)
{
    _star_v.relname = _star_in -> read_string();
    _star_v.be_pid = _star_in -> read_long();
}

void
operator<<=(CORBA::Any& any, pg_PGnotify* v)
{
    static const STAR::Info< pg_PGnotify > info;
    any.replace(_tc_pg_PGnotify, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const pg_PGnotify& v)
{
    any <<= new pg_PGnotify(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const pg_PGnotify*& v)
{
    if(any.check_type(_tc_pg_PGnotify))
    {
        if(!any.info())
        {
            STAR::InputStream_var _star_in = any.create_input_stream();
            pg_PGnotify* val = new pg_PGnotify;
            pg_PGnotify::_STAR_unmarshal(*val, _star_in);
            (CORBA::Any&)any <<= val;
        }

        v = (pg_PGnotify*)any.value();
        return true;
    }
    else
        return false;
}

//
// Interface declare ::PG_Resource
//
const char* PG_Resource::ids_[] =
{
    "IDL:PG_Resource:1.0",
    0
};

void
STARDuplicate(PG_Resource_ptr p)
{
    if(p)
        p -> _STAR_incRef();
}

void
STARRelease(PG_Resource_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

PG_Resource_ptr
PG_Resource::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        PG_Resource_ptr v = dynamic_cast<PG_Resource_ptr>(p);
        if(v)
            return _duplicate(v);

        if(p -> _is_a(ids_[0]))
        {
            PG_Resource_broker* val = new PG_Resource_broker;
            val -> _STAR_copyFrom(p);
            return val;
        }
    }

    return _nil();
}

PG_Resource_ptr
PG_Resource::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

PG_Resource_ptr
PG_Resource::_unchecked_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        PG_Resource_ptr v = dynamic_cast<PG_Resource_ptr>(p);
        if(v)
            return _duplicate(v);

        PG_Resource_broker* val = new PG_Resource_broker;
        val -> _STAR_copyFrom(p);
        return val;
    }

    return _nil();
}

PG_Resource_ptr
PG_Resource::_unchecked_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _unchecked_narrow(obj);
    }
    return _nil();
}

const char**
PG_Resource::_STAR_staticIds()
{
    return ids_;
}

void
STARMarshal(PG_Resource_ptr _star_v, STAR::OutputStreamImpl* _star_out)
{
    _star_out -> write_Object(_star_v);
}

void
STARUnmarshal(PG_Resource_ptr& _star_v, STAR::InputStreamImpl* _star_in)
{
    PG_Resource_var old = _star_v;
    CORBA::Object_var p = _star_in -> read_Object();

    if(!CORBA::is_nil(p))
    {
        PG_Resource_broker* _star_obj = new PG_Resource_broker;
        _star_obj -> _STAR_copyFrom(p);
        _star_v = _star_obj;
    }
    else
        _star_v = PG_Resource::_nil();
}

void
operator<<=(CORBA::Any& any, PG_Resource_ptr* v)
{
    any.replace(_tc_PG_Resource, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, PG_Resource_ptr v)
{
    PG_Resource_ptr val = PG_Resource::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, PG_Resource_ptr& v)
{
    if(any.check_type(_tc_PG_Resource))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            if(!(v = dynamic_cast<PG_Resource_ptr>(val)))
            {
                PG_Resource_broker* obj = new PG_Resource_broker;
                obj -> _STAR_copyFrom(val);
                v = obj;
                (CORBA::Any&)any <<= &v;
            }
        }
        else
            v = PG_Resource::_nil();

        return true;
    }
    else
        return false;
}

const char**
PG_Resource_broker::_STAR_ids() const
{
    return ids_;
}

//
// Operation declare PG_Resource_broker::pg_prepare
//
::CosTransactions::Vote
PG_Resource_broker::pg_prepare()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_prepare", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            try
                            {
                                CORBA::String_var _star_id = _star_stub->_STAR_unmarshalExceptionId(_star_down);
                                if(strcmp(_star_id, "IDL:CosTransactions/HeuristicMixed:1.0") == 0)
                                {
                                    ::CosTransactions::HeuristicMixed _star_except;
                                    ::CosTransactions::HeuristicMixed::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/HeuristicHazard:1.0") == 0)
                                {
                                    ::CosTransactions::HeuristicHazard _star_except;
                                    ::CosTransactions::HeuristicHazard::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/TRANSACTION_REQUIRED:1.0") == 0)
                                {
                                    ::CosTransactions::TRANSACTION_REQUIRED _star_except;
                                    ::CosTransactions::TRANSACTION_REQUIRED::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/TRANSACTION_ROLLEDBACK:1.0") == 0)
                                {
                                    ::CosTransactions::TRANSACTION_ROLLEDBACK _star_except;
                                    ::CosTransactions::TRANSACTION_ROLLEDBACK::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/INVALID_TRANSACTION:1.0") == 0)
                                {
                                    ::CosTransactions::INVALID_TRANSACTION _star_except;
                                    ::CosTransactions::INVALID_TRANSACTION::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/WRONG_TRANSACTION:1.0") == 0)
                                {
                                    ::CosTransactions::WRONG_TRANSACTION _star_except;
                                    ::CosTransactions::WRONG_TRANSACTION::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            ::CosTransactions::Vote _star_r;
                            try
                            {
                                _star_r = (CosTransactions::Vote)_star_in -> read_ulong();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_prepare");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_prepare();
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_rollback
//
void
PG_Resource_broker::pg_rollback()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_rollback", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            try
                            {
                                CORBA::String_var _star_id = _star_stub->_STAR_unmarshalExceptionId(_star_down);
                                if(strcmp(_star_id, "IDL:CosTransactions/HeuristicCommit:1.0") == 0)
                                {
                                    ::CosTransactions::HeuristicCommit _star_except;
                                    ::CosTransactions::HeuristicCommit::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/HeuristicMixed:1.0") == 0)
                                {
                                    ::CosTransactions::HeuristicMixed _star_except;
                                    ::CosTransactions::HeuristicMixed::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/HeuristicHazard:1.0") == 0)
                                {
                                    ::CosTransactions::HeuristicHazard _star_except;
                                    ::CosTransactions::HeuristicHazard::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/TRANSACTION_REQUIRED:1.0") == 0)
                                {
                                    ::CosTransactions::TRANSACTION_REQUIRED _star_except;
                                    ::CosTransactions::TRANSACTION_REQUIRED::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/TRANSACTION_ROLLEDBACK:1.0") == 0)
                                {
                                    ::CosTransactions::TRANSACTION_ROLLEDBACK _star_except;
                                    ::CosTransactions::TRANSACTION_ROLLEDBACK::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/INVALID_TRANSACTION:1.0") == 0)
                                {
                                    ::CosTransactions::INVALID_TRANSACTION _star_except;
                                    ::CosTransactions::INVALID_TRANSACTION::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/WRONG_TRANSACTION:1.0") == 0)
                                {
                                    ::CosTransactions::WRONG_TRANSACTION _star_except;
                                    ::CosTransactions::WRONG_TRANSACTION::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            break;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
                #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                    volatile int i = 1;
                                    i++;
                #endif
                                return;
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_rollback");
                    dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_rollback();
                    #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                                        volatile int i = 1;
                                                        i++;
                    #endif
                                                    return;
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_commit
//
void
PG_Resource_broker::pg_commit()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_commit", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            try
                            {
                                CORBA::String_var _star_id = _star_stub->_STAR_unmarshalExceptionId(_star_down);
                                if(strcmp(_star_id, "IDL:CosTransactions/NotPrepared:1.0") == 0)
                                {
                                    ::CosTransactions::NotPrepared _star_except;
                                    ::CosTransactions::NotPrepared::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/HeuristicRollback:1.0") == 0)
                                {
                                    ::CosTransactions::HeuristicRollback _star_except;
                                    ::CosTransactions::HeuristicRollback::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/HeuristicMixed:1.0") == 0)
                                {
                                    ::CosTransactions::HeuristicMixed _star_except;
                                    ::CosTransactions::HeuristicMixed::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/HeuristicHazard:1.0") == 0)
                                {
                                    ::CosTransactions::HeuristicHazard _star_except;
                                    ::CosTransactions::HeuristicHazard::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/TRANSACTION_REQUIRED:1.0") == 0)
                                {
                                    ::CosTransactions::TRANSACTION_REQUIRED _star_except;
                                    ::CosTransactions::TRANSACTION_REQUIRED::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/TRANSACTION_ROLLEDBACK:1.0") == 0)
                                {
                                    ::CosTransactions::TRANSACTION_ROLLEDBACK _star_except;
                                    ::CosTransactions::TRANSACTION_ROLLEDBACK::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/INVALID_TRANSACTION:1.0") == 0)
                                {
                                    ::CosTransactions::INVALID_TRANSACTION _star_except;
                                    ::CosTransactions::INVALID_TRANSACTION::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/WRONG_TRANSACTION:1.0") == 0)
                                {
                                    ::CosTransactions::WRONG_TRANSACTION _star_except;
                                    ::CosTransactions::WRONG_TRANSACTION::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            break;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
                #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                    volatile int i = 1;
                                    i++;
                #endif
                                return;
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_commit");
                    dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_commit();
                    #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                                        volatile int i = 1;
                                                        i++;
                    #endif
                                                    return;
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_commit_one_phase
//
void
PG_Resource_broker::pg_commit_one_phase()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_commit_one_phase", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            try
                            {
                                CORBA::String_var _star_id = _star_stub->_STAR_unmarshalExceptionId(_star_down);
                                if(strcmp(_star_id, "IDL:CosTransactions/HeuristicHazard:1.0") == 0)
                                {
                                    ::CosTransactions::HeuristicHazard _star_except;
                                    ::CosTransactions::HeuristicHazard::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/TRANSACTION_REQUIRED:1.0") == 0)
                                {
                                    ::CosTransactions::TRANSACTION_REQUIRED _star_except;
                                    ::CosTransactions::TRANSACTION_REQUIRED::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/TRANSACTION_ROLLEDBACK:1.0") == 0)
                                {
                                    ::CosTransactions::TRANSACTION_ROLLEDBACK _star_except;
                                    ::CosTransactions::TRANSACTION_ROLLEDBACK::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/INVALID_TRANSACTION:1.0") == 0)
                                {
                                    ::CosTransactions::INVALID_TRANSACTION _star_except;
                                    ::CosTransactions::INVALID_TRANSACTION::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/WRONG_TRANSACTION:1.0") == 0)
                                {
                                    ::CosTransactions::WRONG_TRANSACTION _star_except;
                                    ::CosTransactions::WRONG_TRANSACTION::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            break;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
                #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                    volatile int i = 1;
                                    i++;
                #endif
                                return;
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_commit_one_phase");
                    dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_commit_one_phase();
                    #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                                        volatile int i = 1;
                                                        i++;
                    #endif
                                                    return;
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_forget
//
void
PG_Resource_broker::pg_forget()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_forget", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            try
                            {
                                CORBA::String_var _star_id = _star_stub->_STAR_unmarshalExceptionId(_star_down);
                                if(strcmp(_star_id, "IDL:CosTransactions/TRANSACTION_REQUIRED:1.0") == 0)
                                {
                                    ::CosTransactions::TRANSACTION_REQUIRED _star_except;
                                    ::CosTransactions::TRANSACTION_REQUIRED::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/TRANSACTION_ROLLEDBACK:1.0") == 0)
                                {
                                    ::CosTransactions::TRANSACTION_ROLLEDBACK _star_except;
                                    ::CosTransactions::TRANSACTION_ROLLEDBACK::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/INVALID_TRANSACTION:1.0") == 0)
                                {
                                    ::CosTransactions::INVALID_TRANSACTION _star_except;
                                    ::CosTransactions::INVALID_TRANSACTION::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/WRONG_TRANSACTION:1.0") == 0)
                                {
                                    ::CosTransactions::WRONG_TRANSACTION _star_except;
                                    ::CosTransactions::WRONG_TRANSACTION::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            break;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
                #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                    volatile int i = 1;
                                    i++;
                #endif
                                return;
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_forget");
                    dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_forget();
                    #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                                        volatile int i = 1;
                                                        i++;
                    #endif
                                                    return;
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_release
//
void
PG_Resource_broker::pg_release()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_release", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        _star_stub->_STAR_preRemoveHeader(_star_down);
                        _star_stub->_STAR_postRemoveHeader(_star_down);
                        break;
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
                #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                    volatile int i = 1;
                                    i++;
                #endif
                                return;
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_release");
                    dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_release();
                    #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                                        volatile int i = 1;
                                                        i++;
                    #endif
                                                    return;
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_BeginTrans
//
CORBA::Boolean
PG_Resource_broker::pg_BeginTrans()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_BeginTrans", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::Boolean _star_r;
                            try
                            {
                                _star_r = _star_in -> read_boolean();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_BeginTrans");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_BeginTrans();
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_set_recoverycoordinator
//
void
PG_Resource_broker::pg_set_recoverycoordinator(::CosTransactions::RecoveryCoordinator_ptr _star_a0)
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_set_recoverycoordinator", true);
                    try
                    {
                        STAR::OutputStreamImpl* _star_out = _star_stub->_STAR_prePrepareHeader(_star_down);
                        try
                        {
                            STARMarshal(_star_a0, _star_out);
                        }
                        catch(const CORBA::SystemException& _star_ex)
                        {
                            _star_stub->_STAR_marshalEx(_star_down, _star_ex);
                        }
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            try
                            {
                                CORBA::String_var _star_id = _star_stub->_STAR_unmarshalExceptionId(_star_down);
                                if(strcmp(_star_id, "IDL:CosTransactions/TRANSACTION_REQUIRED:1.0") == 0)
                                {
                                    ::CosTransactions::TRANSACTION_REQUIRED _star_except;
                                    ::CosTransactions::TRANSACTION_REQUIRED::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/TRANSACTION_ROLLEDBACK:1.0") == 0)
                                {
                                    ::CosTransactions::TRANSACTION_ROLLEDBACK _star_except;
                                    ::CosTransactions::TRANSACTION_ROLLEDBACK::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/INVALID_TRANSACTION:1.0") == 0)
                                {
                                    ::CosTransactions::INVALID_TRANSACTION _star_except;
                                    ::CosTransactions::INVALID_TRANSACTION::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/WRONG_TRANSACTION:1.0") == 0)
                                {
                                    ::CosTransactions::WRONG_TRANSACTION _star_except;
                                    ::CosTransactions::WRONG_TRANSACTION::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            break;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
                                return;
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_set_recoverycoordinator");
                    dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_set_recoverycoordinator(_star_a0);
                                                    return;
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_heuristic_decision
//
void
PG_Resource_broker::pg_heuristic_decision()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_heuristic_decision", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            try
                            {
                                CORBA::String_var _star_id = _star_stub->_STAR_unmarshalExceptionId(_star_down);
                                if(strcmp(_star_id, "IDL:CosTransactions/TRANSACTION_REQUIRED:1.0") == 0)
                                {
                                    ::CosTransactions::TRANSACTION_REQUIRED _star_except;
                                    ::CosTransactions::TRANSACTION_REQUIRED::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/TRANSACTION_ROLLEDBACK:1.0") == 0)
                                {
                                    ::CosTransactions::TRANSACTION_ROLLEDBACK _star_except;
                                    ::CosTransactions::TRANSACTION_ROLLEDBACK::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/INVALID_TRANSACTION:1.0") == 0)
                                {
                                    ::CosTransactions::INVALID_TRANSACTION _star_except;
                                    ::CosTransactions::INVALID_TRANSACTION::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                                else if(strcmp(_star_id, "IDL:CosTransactions/WRONG_TRANSACTION:1.0") == 0)
                                {
                                    ::CosTransactions::WRONG_TRANSACTION _star_except;
                                    ::CosTransactions::WRONG_TRANSACTION::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            break;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
                #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                    volatile int i = 1;
                                    i++;
                #endif
                                return;
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_heuristic_decision");
                    dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_heuristic_decision();
                    #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                                        volatile int i = 1;
                                                        i++;
                    #endif
                                                    return;
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Exception declare ::PG_Resource::PG_CONNECTTION_FAILED
//
PG_Resource::PG_CONNECTTION_FAILED::PG_CONNECTTION_FAILED(const PG_CONNECTTION_FAILED& _star_a)
    : CORBA::UserException(_star_a)
{
}

PG_Resource::PG_CONNECTTION_FAILED&
PG_Resource::PG_CONNECTTION_FAILED::operator=(const PG_CONNECTTION_FAILED&)
{
    return *this;
}

PG_Resource::PG_CONNECTTION_FAILED*
PG_Resource::PG_CONNECTTION_FAILED::_downcast(CORBA::Exception* p)
{
    return dynamic_cast<PG_CONNECTTION_FAILED*>(p);
}

const PG_Resource::PG_CONNECTTION_FAILED*
PG_Resource::PG_CONNECTTION_FAILED::_downcast(const CORBA::Exception* p)
{
    return dynamic_cast<const PG_CONNECTTION_FAILED*>(p);
}

const char*
PG_Resource::PG_CONNECTTION_FAILED::_name() const
{
    return "PG_CONNECTTION_FAILED";
}

const char*
PG_Resource::PG_CONNECTTION_FAILED::_rep_id() const
{
    return "IDL:PG_Resource/PG_CONNECTTION_FAILED:1.0";
}

char*
PG_Resource::PG_CONNECTTION_FAILED::_to_string() const
{
    return _STAR_defaultToString("PG_Resource::PG_CONNECTTION_FAILED");
}

CORBA::Exception*
PG_Resource::PG_CONNECTTION_FAILED::_STAR_clone() const
{
    return new PG_CONNECTTION_FAILED(*this);
}

void
PG_Resource::PG_CONNECTTION_FAILED::_STAR_insertInAny(CORBA::Any& any)
{
    any <<= this;
}

void
PG_Resource::PG_CONNECTTION_FAILED::_STAR_unmarshal(PG_CONNECTTION_FAILED&, STAR::InputStreamImpl* _star_in)
{
    CORBA::String_var id = _star_in -> read_string();
    assert(strcmp(id, "IDL:PG_Resource/PG_CONNECTTION_FAILED:1.0") == 0);
}

void
operator<<=(CORBA::Any& any, PG_Resource::PG_CONNECTTION_FAILED* v)
{
    static const STAR::Info< PG_Resource::PG_CONNECTTION_FAILED > info;
    any.replace(PG_Resource::_tc_PG_CONNECTTION_FAILED, v, true, &info);
}

void
operator<<=(CORBA::Any& any, const PG_Resource::PG_CONNECTTION_FAILED& v)
{
    any <<= new PG_Resource::PG_CONNECTTION_FAILED(v);
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, const PG_Resource::PG_CONNECTTION_FAILED*& v)
{
    if(any.check_type(PG_Resource::_tc_PG_CONNECTTION_FAILED))
    {
        if(!any.info())
        {
            STAR::InputStream_var _star_in = any.create_input_stream();
            PG_Resource::PG_CONNECTTION_FAILED* val = new PG_Resource::PG_CONNECTTION_FAILED;
            PG_Resource::PG_CONNECTTION_FAILED::_STAR_unmarshal(*val, _star_in);
            (CORBA::Any&)any <<= val;
        }

        v = (PG_Resource::PG_CONNECTTION_FAILED*)any.value();
        return true;
    }
    else
        return false;
}

//
// Operation declare PG_Resource_broker::pg_PQsetdbLogin
//
void
PG_Resource_broker::pg_PQsetdbLogin(const char* _star_a0,
                                    const char* _star_a1,
                                    const char* _star_a2,
                                    const char* _star_a3,
                                    const char* _star_a4,
                                    const char* _star_a5,
                                    const char* _star_a6)
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQsetdbLogin", true);
                    try
                    {
                        STAR::OutputStreamImpl* _star_out = _star_stub->_STAR_prePrepareHeader(_star_down);
                        try
                        {
                            _star_out -> write_string(_star_a0);
                            _star_out -> write_string(_star_a1);
                            _star_out -> write_string(_star_a2);
                            _star_out -> write_string(_star_a3);
                            _star_out -> write_string(_star_a4);
                            _star_out -> write_string(_star_a5);
                            _star_out -> write_string(_star_a6);
                        }
                        catch(const CORBA::SystemException& _star_ex)
                        {
                            _star_stub->_STAR_marshalEx(_star_down, _star_ex);
                        }
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            try
                            {
                                CORBA::String_var _star_id = _star_stub->_STAR_unmarshalExceptionId(_star_down);
                                if(strcmp(_star_id, "IDL:PG_Resource/PG_CONNECTTION_FAILED:1.0") == 0)
                                {
                                    ::PG_Resource::PG_CONNECTTION_FAILED _star_except;
                                    ::PG_Resource::PG_CONNECTTION_FAILED::_STAR_unmarshal(_star_except, _star_in);
                                    _star_stub->_STAR_setUserException(_star_down, _star_except);
                                }
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            break;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
                                return;
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQsetdbLogin");
                    dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQsetdbLogin(_star_a0, _star_a1, _star_a2, _star_a3, _star_a4, _star_a5, _star_a6);
                                                    return;
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQdb
//
char*
PG_Resource_broker::pg_PQdb()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQdb", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::String_var _star_r;
                            try
                            {
                                _star_r = _star_in -> read_string();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r._retn();
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQdb");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQdb();
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQhost
//
char*
PG_Resource_broker::pg_PQhost()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQhost", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::String_var _star_r;
                            try
                            {
                                _star_r = _star_in -> read_string();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r._retn();
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQhost");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQhost();
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQoptions
//
char*
PG_Resource_broker::pg_PQoptions()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQoptions", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::String_var _star_r;
                            try
                            {
                                _star_r = _star_in -> read_string();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r._retn();
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQoptions");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQoptions();
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQport
//
char*
PG_Resource_broker::pg_PQport()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQport", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::String_var _star_r;
                            try
                            {
                                _star_r = _star_in -> read_string();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r._retn();
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQport");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQport();
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQtty
//
char*
PG_Resource_broker::pg_PQtty()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQtty", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::String_var _star_r;
                            try
                            {
                                _star_r = _star_in -> read_string();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r._retn();
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQtty");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQtty();
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQstatus
//
::pg_ConnStatusType
PG_Resource_broker::pg_PQstatus()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQstatus", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            ::pg_ConnStatusType _star_r;
                            try
                            {
                                _star_r = _star_in -> read_short();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQstatus");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQstatus();
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQerrorMessage
//
char*
PG_Resource_broker::pg_PQerrorMessage()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQerrorMessage", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::String_var _star_r;
                            try
                            {
                                _star_r = _star_in -> read_string();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r._retn();
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQerrorMessage");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQerrorMessage();
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQfinish
//
void
PG_Resource_broker::pg_PQfinish()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQfinish", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        _star_stub->_STAR_preRemoveHeader(_star_down);
                        _star_stub->_STAR_postRemoveHeader(_star_down);
                        break;
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
                #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                    volatile int i = 1;
                                    i++;
                #endif
                                return;
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQfinish");
                    dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQfinish();
                    #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                                        volatile int i = 1;
                                                        i++;
                    #endif
                                                    return;
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQreset
//
void
PG_Resource_broker::pg_PQreset()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQreset", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        _star_stub->_STAR_preRemoveHeader(_star_down);
                        _star_stub->_STAR_postRemoveHeader(_star_down);
                        break;
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
                #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                    volatile int i = 1;
                                    i++;
                #endif
                                return;
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQreset");
                    dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQreset();
                    #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                                        volatile int i = 1;
                                                        i++;
                    #endif
                                                    return;
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQuntrace
//
void
PG_Resource_broker::pg_PQuntrace()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQuntrace", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        _star_stub->_STAR_preRemoveHeader(_star_down);
                        _star_stub->_STAR_postRemoveHeader(_star_down);
                        break;
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
                #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                    volatile int i = 1;
                                    i++;
                #endif
                                return;
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQuntrace");
                    dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQuntrace();
                    #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                                        volatile int i = 1;
                                                        i++;
                    #endif
                                                    return;
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQexec
//
void
PG_Resource_broker::pg_PQexec(const char* _star_a0)
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQexec", true);
                    try
                    {
                        STAR::OutputStreamImpl* _star_out = _star_stub->_STAR_prePrepareHeader(_star_down);
                        try
                        {
                            _star_out -> write_string(_star_a0);
                        }
                        catch(const CORBA::SystemException& _star_ex)
                        {
                            _star_stub->_STAR_marshalEx(_star_down, _star_ex);
                        }
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        _star_stub->_STAR_preRemoveHeader(_star_down);
                        _star_stub->_STAR_postRemoveHeader(_star_down);
                        break;
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
                                return;
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQexec");
                    dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQexec(_star_a0);
                                                    return;
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQresultStatus
//
::pg_ExecStatusType
PG_Resource_broker::pg_PQresultStatus()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQresultStatus", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            ::pg_ExecStatusType _star_r;
                            try
                            {
                                _star_r = _star_in -> read_short();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQresultStatus");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQresultStatus();
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQntuples
//
CORBA::Long
PG_Resource_broker::pg_PQntuples()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQntuples", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::Long _star_r;
                            try
                            {
                                _star_r = _star_in -> read_long();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQntuples");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQntuples();
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQnfields
//
CORBA::Long
PG_Resource_broker::pg_PQnfields()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQnfields", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::Long _star_r;
                            try
                            {
                                _star_r = _star_in -> read_long();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQnfields");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQnfields();
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQfname
//
char*
PG_Resource_broker::pg_PQfname(CORBA::Long _star_a0)
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQfname", true);
                    try
                    {
                        STAR::OutputStreamImpl* _star_out = _star_stub->_STAR_prePrepareHeader(_star_down);
                        try
                        {
                            _star_out -> write_long(_star_a0);
                        }
                        catch(const CORBA::SystemException& _star_ex)
                        {
                            _star_stub->_STAR_marshalEx(_star_down, _star_ex);
                        }
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::String_var _star_r;
                            try
                            {
                                _star_r = _star_in -> read_string();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r._retn();
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQfname");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQfname(_star_a0);
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQfnumber
//
CORBA::Long
PG_Resource_broker::pg_PQfnumber(const char* _star_a0)
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQfnumber", true);
                    try
                    {
                        STAR::OutputStreamImpl* _star_out = _star_stub->_STAR_prePrepareHeader(_star_down);
                        try
                        {
                            _star_out -> write_string(_star_a0);
                        }
                        catch(const CORBA::SystemException& _star_ex)
                        {
                            _star_stub->_STAR_marshalEx(_star_down, _star_ex);
                        }
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::Long _star_r;
                            try
                            {
                                _star_r = _star_in -> read_long();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQfnumber");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQfnumber(_star_a0);
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQftype
//
CORBA::Long
PG_Resource_broker::pg_PQftype(CORBA::Long _star_a0)
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQftype", true);
                    try
                    {
                        STAR::OutputStreamImpl* _star_out = _star_stub->_STAR_prePrepareHeader(_star_down);
                        try
                        {
                            _star_out -> write_long(_star_a0);
                        }
                        catch(const CORBA::SystemException& _star_ex)
                        {
                            _star_stub->_STAR_marshalEx(_star_down, _star_ex);
                        }
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::Long _star_r;
                            try
                            {
                                _star_r = _star_in -> read_long();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQftype");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQftype(_star_a0);
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQfsize
//
CORBA::Long
PG_Resource_broker::pg_PQfsize(CORBA::Long _star_a0)
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQfsize", true);
                    try
                    {
                        STAR::OutputStreamImpl* _star_out = _star_stub->_STAR_prePrepareHeader(_star_down);
                        try
                        {
                            _star_out -> write_long(_star_a0);
                        }
                        catch(const CORBA::SystemException& _star_ex)
                        {
                            _star_stub->_STAR_marshalEx(_star_down, _star_ex);
                        }
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::Long _star_r;
                            try
                            {
                                _star_r = _star_in -> read_long();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQfsize");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQfsize(_star_a0);
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQgetvalue
//
char*
PG_Resource_broker::pg_PQgetvalue(CORBA::Long _star_a0,
                                  CORBA::Long _star_a1)
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQgetvalue", true);
                    try
                    {
                        STAR::OutputStreamImpl* _star_out = _star_stub->_STAR_prePrepareHeader(_star_down);
                        try
                        {
                            _star_out -> write_long(_star_a0);
                            _star_out -> write_long(_star_a1);
                        }
                        catch(const CORBA::SystemException& _star_ex)
                        {
                            _star_stub->_STAR_marshalEx(_star_down, _star_ex);
                        }
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::String_var _star_r;
                            try
                            {
                                _star_r = _star_in -> read_string();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r._retn();
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQgetvalue");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQgetvalue(_star_a0, _star_a1);
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQgetlength
//
CORBA::Long
PG_Resource_broker::pg_PQgetlength(CORBA::Long _star_a0,
                                   CORBA::Long _star_a1)
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQgetlength", true);
                    try
                    {
                        STAR::OutputStreamImpl* _star_out = _star_stub->_STAR_prePrepareHeader(_star_down);
                        try
                        {
                            _star_out -> write_long(_star_a0);
                            _star_out -> write_long(_star_a1);
                        }
                        catch(const CORBA::SystemException& _star_ex)
                        {
                            _star_stub->_STAR_marshalEx(_star_down, _star_ex);
                        }
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::Long _star_r;
                            try
                            {
                                _star_r = _star_in -> read_long();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQgetlength");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQgetlength(_star_a0, _star_a1);
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQcmdStatus
//
char*
PG_Resource_broker::pg_PQcmdStatus()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQcmdStatus", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::String_var _star_r;
                            try
                            {
                                _star_r = _star_in -> read_string();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r._retn();
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQcmdStatus");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQcmdStatus();
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQoidStatus
//
char*
PG_Resource_broker::pg_PQoidStatus()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQoidStatus", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::String_var _star_r;
                            try
                            {
                                _star_r = _star_in -> read_string();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r._retn();
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQoidStatus");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQoidStatus();
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQclear
//
void
PG_Resource_broker::pg_PQclear()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQclear", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        _star_stub->_STAR_preRemoveHeader(_star_down);
                        _star_stub->_STAR_postRemoveHeader(_star_down);
                        break;
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
                #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                    volatile int i = 1;
                                    i++;
                #endif
                                return;
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQclear");
                    dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQclear();
                    #if defined(__GNUC__) && defined(__OPTIMIZE__) // COMPILERFIX
                                                        volatile int i = 1;
                                                        i++;
                    #endif
                                                    return;
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQnotifies
//
::pg_PGnotify*
PG_Resource_broker::pg_PQnotifies()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQnotifies", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            ::pg_PGnotify_var _star_r;
                            try
                            {
                                _star_r = new pg_PGnotify;
                                pg_PGnotify::_STAR_unmarshal(_star_r.inout(), _star_in);
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r._retn();
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQnotifies");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQnotifies();
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQgetline
//
CORBA::Long
PG_Resource_broker::pg_PQgetline(const char* _star_a0,
                                 CORBA::Long _star_a1)
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQgetline", true);
                    try
                    {
                        STAR::OutputStreamImpl* _star_out = _star_stub->_STAR_prePrepareHeader(_star_down);
                        try
                        {
                            _star_out -> write_string(_star_a0);
                            _star_out -> write_long(_star_a1);
                        }
                        catch(const CORBA::SystemException& _star_ex)
                        {
                            _star_stub->_STAR_marshalEx(_star_down, _star_ex);
                        }
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::Long _star_r;
                            try
                            {
                                _star_r = _star_in -> read_long();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQgetline");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQgetline(_star_a0, _star_a1);
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQputline
//
void
PG_Resource_broker::pg_PQputline(const char* _star_a0)
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQputline", true);
                    try
                    {
                        STAR::OutputStreamImpl* _star_out = _star_stub->_STAR_prePrepareHeader(_star_down);
                        try
                        {
                            _star_out -> write_string(_star_a0);
                        }
                        catch(const CORBA::SystemException& _star_ex)
                        {
                            _star_stub->_STAR_marshalEx(_star_down, _star_ex);
                        }
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        _star_stub->_STAR_preRemoveHeader(_star_down);
                        _star_stub->_STAR_postRemoveHeader(_star_down);
                        break;
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
                                return;
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQputline");
                    dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQputline(_star_a0);
                                                    return;
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_PQendcopy
//
CORBA::Long
PG_Resource_broker::pg_PQendcopy()
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_PQendcopy", true);
                    try
                    {
                        _star_stub->_STAR_prePrepareHeader(_star_down);
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::Long _star_r;
                            try
                            {
                                _star_r = _star_in -> read_long();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r;
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_PQendcopy");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_PQendcopy();
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_fe_getauthname
//
char*
PG_Resource_broker::pg_fe_getauthname(const char* _star_a0)
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_fe_getauthname", true);
                    try
                    {
                        STAR::OutputStreamImpl* _star_out = _star_stub->_STAR_prePrepareHeader(_star_down);
                        try
                        {
                            _star_out -> write_string(_star_a0);
                        }
                        catch(const CORBA::SystemException& _star_ex)
                        {
                            _star_stub->_STAR_marshalEx(_star_down, _star_ex);
                        }
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        bool _star_uex;
                        STAR::InputStreamImpl* _star_in = _star_stub->_STAR_preRemoveHeader(_star_down, _star_uex);
                        if(_star_uex)
                        {
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                        }
                        else
                        {
                            CORBA::String_var _star_r;
                            try
                            {
                                _star_r = _star_in -> read_string();
                            }
                            catch(const CORBA::SystemException& _star_ex)
                            {
                                _star_stub->_STAR_unmarshalEx(_star_down, _star_ex);
                            }
                            _star_stub->_STAR_postRemoveHeader(_star_down);
                            return _star_r._retn();
                        }
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_fe_getauthname");
                    return dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_fe_getauthname(_star_a0);
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}

//
// Operation declare PG_Resource_broker::pg_fe_setauthsvc
//
void
PG_Resource_broker::pg_fe_setauthsvc(const char* _star_a0,
                                     const char* _star_a1)
{
    bool _star_retry = true;
    while(true)
    {
        try
        {
            STAR::StubBase_var _star_stubBase = _STAR_getStub();
            STAR::MarshalStub_ptr _star_stub = dynamic_cast<STAR::MarshalStub_ptr>(_star_stubBase.in());
            if (_star_stub!=NULL)
            {
                for(;;)
                {
                    STAR::Downcall_var _star_down = _star_stub->_STAR_createDowncall("pg_fe_setauthsvc", true);
                    try
                    {
                        STAR::OutputStreamImpl* _star_out = _star_stub->_STAR_prePrepareHeader(_star_down);
                        try
                        {
                            _star_out -> write_string(_star_a0);
                            _star_out -> write_string(_star_a1);
                        }
                        catch(const CORBA::SystemException& _star_ex)
                        {
                            _star_stub->_STAR_marshalEx(_star_down, _star_ex);
                        }
                        _star_stub->_STAR_postPrepareHeader(_star_down);
                        _star_stub->_STAR_request(_star_down);
                        _star_stub->_STAR_preRemoveHeader(_star_down);
                        _star_stub->_STAR_postRemoveHeader(_star_down);
                        break;
                    }
                    catch(const STAR::FailureException& _star_ex)
                    {
                        _star_stub->_STAR_handleNetworkFailureException(_star_down, _star_ex);
                    }
                }
                                return;
            }
            else
            {
                STAR::FastStub_ptr _star_stub = dynamic_cast<STAR::FastStub_ptr>(_star_stubBase.in());
                if (_star_stub!=NULL)
                {
                    STAR::OrbMediatedInvokeHelper _star_handler(_star_stub, "pg_fe_setauthsvc");
                    dynamic_cast<POA_PG_Resource*>(_star_stub->_star_servant_) -> pg_fe_setauthsvc(_star_a0, _star_a1);
                                                    return;
                }
                else
                {
                        throw CORBA::INV_OBJREF();
                }
            }
        }
        catch(const STAR::ExceptionBase& _star_ex)
        {
            _STAR_handleException(_star_ex, _star_retry);
        }
    }
}
