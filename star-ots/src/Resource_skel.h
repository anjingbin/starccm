// *************************************************************************
//
// This File Is Automatically Generated by the StarBusIDL-to-C++ Compiler !
//
// Copyright (c) 2003
// Network Information Security Institute,Computer College,NUDT.
// ChangSha,Hunan,PRC
//
// All Rights Reserved
//
// *************************************************************************

// Version: 5.0.0

#ifndef ___Resource_skel_h__
#define ___Resource_skel_h__

#include <Resource.h>
#include <STAR/SkelForServerRequest.h>

#include <PostgreSQLResource_skel.h>

//
// Interface declare ::ResourceFactory
//
class POA_ResourceFactory : virtual public PortableServer::ServantBase,
                            virtual public STAR::SkelForServerRequest
{
    POA_ResourceFactory(const POA_ResourceFactory&);
    void operator=(const POA_ResourceFactory&);

protected:

    //
    // ProtectedOperation declare create
    //
    static void _STAR_op_create(PortableServer::ServantBase *,STAR::Upcall_ptr);

public:

    POA_ResourceFactory() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    ResourceFactory_ptr _this();

    virtual void _STAR_dispatch(STAR::Upcall_ptr);

    //
    // Operation declare create
    //
    virtual Resource_ptr create(CORBA::Short dbtype)
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;
};

//
// Interface declare ::Resource
//
class POA_Resource : virtual public POA_PG_Resource
{
    POA_Resource(const POA_Resource&);
    void operator=(const POA_Resource&);

protected:

    //
    // ProtectedOperation declare prepare
    //
    static void _STAR_op_prepare(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare rollback
    //
    static void _STAR_op_rollback(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare commit
    //
    static void _STAR_op_commit(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare commit_one_phase
    //
    static void _STAR_op_commit_one_phase(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare forget
    //
    static void _STAR_op_forget(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare release
    //
    static void _STAR_op_release(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare BeginTrans
    //
    static void _STAR_op_BeginTrans(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare set_recoverycoordinator
    //
    static void _STAR_op_set_recoverycoordinator(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare heuristic_decision
    //
    static void _STAR_op_heuristic_decision(PortableServer::ServantBase *,STAR::Upcall_ptr);

public:

    POA_Resource() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    Resource_ptr _this();

    virtual void _STAR_dispatch(STAR::Upcall_ptr);

    //
    // Operation declare prepare
    //
    virtual CosTransactions::Vote prepare()
        throw(CosTransactions::HeuristicMixed,
              CosTransactions::HeuristicHazard,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // Operation declare rollback
    //
    virtual void rollback()
        throw(CosTransactions::HeuristicCommit,
              CosTransactions::HeuristicMixed,
              CosTransactions::HeuristicHazard,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // Operation declare commit
    //
    virtual void commit()
        throw(CosTransactions::NotPrepared,
              CosTransactions::HeuristicRollback,
              CosTransactions::HeuristicMixed,
              CosTransactions::HeuristicHazard,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // Operation declare commit_one_phase
    //
    virtual void commit_one_phase()
        throw(CosTransactions::HeuristicHazard,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // Operation declare forget
    //
    virtual void forget()
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // Operation declare release
    //
    virtual void release()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare BeginTrans
    //
    virtual CORBA::Boolean BeginTrans()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare set_recoverycoordinator
    //
    virtual void set_recoverycoordinator(CosTransactions::RecoveryCoordinator_ptr rc)
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // Operation declare heuristic_decision
    //
    virtual void heuristic_decision()
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;
};

#endif
