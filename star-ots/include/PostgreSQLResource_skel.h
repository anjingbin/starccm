// *************************************************************************
//
// This File Is Automatically Generated by the StarBusIDL-to-C++ Compiler !
//
// Copyright (c) 2003
// Network Information Security Institute,Computer College,NUDT.
// ChangSha,Hunan,PRC
//
// All Rights Reserved
//
// *************************************************************************

// Version: 5.0.0

#ifndef ___PostgreSQLResource_skel_h__
#define ___PostgreSQLResource_skel_h__

#include <PostgreSQLResource.h>
#include <STAR/SkelForServerRequest.h>

#include <CosTransactionsOTS_skel.h>

//
// Interface declare ::PG_Resource
//
class POA_PG_Resource : virtual public PortableServer::ServantBase,
                        virtual public STAR::SkelForServerRequest
{
    POA_PG_Resource(const POA_PG_Resource&);
    void operator=(const POA_PG_Resource&);

protected:

    //
    // ProtectedOperation declare pg_prepare
    //
    static void _STAR_op_pg_prepare(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_rollback
    //
    static void _STAR_op_pg_rollback(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_commit
    //
    static void _STAR_op_pg_commit(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_commit_one_phase
    //
    static void _STAR_op_pg_commit_one_phase(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_forget
    //
    static void _STAR_op_pg_forget(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_release
    //
    static void _STAR_op_pg_release(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_BeginTrans
    //
    static void _STAR_op_pg_BeginTrans(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_set_recoverycoordinator
    //
    static void _STAR_op_pg_set_recoverycoordinator(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_heuristic_decision
    //
    static void _STAR_op_pg_heuristic_decision(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQsetdbLogin
    //
    static void _STAR_op_pg_PQsetdbLogin(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQdb
    //
    static void _STAR_op_pg_PQdb(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQhost
    //
    static void _STAR_op_pg_PQhost(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQoptions
    //
    static void _STAR_op_pg_PQoptions(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQport
    //
    static void _STAR_op_pg_PQport(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQtty
    //
    static void _STAR_op_pg_PQtty(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQstatus
    //
    static void _STAR_op_pg_PQstatus(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQerrorMessage
    //
    static void _STAR_op_pg_PQerrorMessage(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQfinish
    //
    static void _STAR_op_pg_PQfinish(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQreset
    //
    static void _STAR_op_pg_PQreset(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQuntrace
    //
    static void _STAR_op_pg_PQuntrace(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQexec
    //
    static void _STAR_op_pg_PQexec(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQresultStatus
    //
    static void _STAR_op_pg_PQresultStatus(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQntuples
    //
    static void _STAR_op_pg_PQntuples(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQnfields
    //
    static void _STAR_op_pg_PQnfields(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQfname
    //
    static void _STAR_op_pg_PQfname(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQfnumber
    //
    static void _STAR_op_pg_PQfnumber(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQftype
    //
    static void _STAR_op_pg_PQftype(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQfsize
    //
    static void _STAR_op_pg_PQfsize(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQgetvalue
    //
    static void _STAR_op_pg_PQgetvalue(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQgetlength
    //
    static void _STAR_op_pg_PQgetlength(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQcmdStatus
    //
    static void _STAR_op_pg_PQcmdStatus(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQoidStatus
    //
    static void _STAR_op_pg_PQoidStatus(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQclear
    //
    static void _STAR_op_pg_PQclear(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQnotifies
    //
    static void _STAR_op_pg_PQnotifies(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQgetline
    //
    static void _STAR_op_pg_PQgetline(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQputline
    //
    static void _STAR_op_pg_PQputline(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_PQendcopy
    //
    static void _STAR_op_pg_PQendcopy(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_fe_getauthname
    //
    static void _STAR_op_pg_fe_getauthname(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare pg_fe_setauthsvc
    //
    static void _STAR_op_pg_fe_setauthsvc(PortableServer::ServantBase *,STAR::Upcall_ptr);

public:

    POA_PG_Resource() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    PG_Resource_ptr _this();

    virtual void _STAR_dispatch(STAR::Upcall_ptr);

    //
    // Operation declare pg_prepare
    //
    virtual CosTransactions::Vote pg_prepare()
        throw(CosTransactions::HeuristicMixed,
              CosTransactions::HeuristicHazard,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // Operation declare pg_rollback
    //
    virtual void pg_rollback()
        throw(CosTransactions::HeuristicCommit,
              CosTransactions::HeuristicMixed,
              CosTransactions::HeuristicHazard,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // Operation declare pg_commit
    //
    virtual void pg_commit()
        throw(CosTransactions::NotPrepared,
              CosTransactions::HeuristicRollback,
              CosTransactions::HeuristicMixed,
              CosTransactions::HeuristicHazard,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // Operation declare pg_commit_one_phase
    //
    virtual void pg_commit_one_phase()
        throw(CosTransactions::HeuristicHazard,
              CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // Operation declare pg_forget
    //
    virtual void pg_forget()
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // Operation declare pg_release
    //
    virtual void pg_release()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_BeginTrans
    //
    virtual CORBA::Boolean pg_BeginTrans()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_set_recoverycoordinator
    //
    virtual void pg_set_recoverycoordinator(CosTransactions::RecoveryCoordinator_ptr rc)
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // Operation declare pg_heuristic_decision
    //
    virtual void pg_heuristic_decision()
        throw(CosTransactions::TRANSACTION_REQUIRED,
              CosTransactions::TRANSACTION_ROLLEDBACK,
              CosTransactions::INVALID_TRANSACTION,
              CosTransactions::WRONG_TRANSACTION,
              CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQsetdbLogin
    //
    virtual void pg_PQsetdbLogin(const char* pghost,
                                 const char* pgport,
                                 const char* pgoptions,
                                 const char* pgtty,
                                 const char* dbName,
                                 const char* login,
                                 const char* pwd)
        throw(PG_Resource::PG_CONNECTTION_FAILED,
              CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQdb
    //
    virtual char* pg_PQdb()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQhost
    //
    virtual char* pg_PQhost()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQoptions
    //
    virtual char* pg_PQoptions()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQport
    //
    virtual char* pg_PQport()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQtty
    //
    virtual char* pg_PQtty()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQstatus
    //
    virtual pg_ConnStatusType pg_PQstatus()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQerrorMessage
    //
    virtual char* pg_PQerrorMessage()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQfinish
    //
    virtual void pg_PQfinish()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQreset
    //
    virtual void pg_PQreset()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQuntrace
    //
    virtual void pg_PQuntrace()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQexec
    //
    virtual void pg_PQexec(const char* query)
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQresultStatus
    //
    virtual pg_ExecStatusType pg_PQresultStatus()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQntuples
    //
    virtual CORBA::Long pg_PQntuples()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQnfields
    //
    virtual CORBA::Long pg_PQnfields()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQfname
    //
    virtual char* pg_PQfname(CORBA::Long field_index)
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQfnumber
    //
    virtual CORBA::Long pg_PQfnumber(const char* field_name)
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQftype
    //
    virtual CORBA::Long pg_PQftype(CORBA::Long field_num)
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQfsize
    //
    virtual CORBA::Long pg_PQfsize(CORBA::Long field_index)
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQgetvalue
    //
    virtual char* pg_PQgetvalue(CORBA::Long tup_num,
                                CORBA::Long field_num)
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQgetlength
    //
    virtual CORBA::Long pg_PQgetlength(CORBA::Long tup_num,
                                       CORBA::Long field_num)
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQcmdStatus
    //
    virtual char* pg_PQcmdStatus()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQoidStatus
    //
    virtual char* pg_PQoidStatus()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQclear
    //
    virtual void pg_PQclear()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQnotifies
    //
    virtual pg_PGnotify* pg_PQnotifies()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQgetline
    //
    virtual CORBA::Long pg_PQgetline(const char* str,
                                     CORBA::Long length)
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQputline
    //
    virtual void pg_PQputline(const char* str)
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_PQendcopy
    //
    virtual CORBA::Long pg_PQendcopy()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_fe_getauthname
    //
    virtual char* pg_fe_getauthname(const char* errorMessage)
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare pg_fe_setauthsvc
    //
    virtual void pg_fe_setauthsvc(const char* name,
                                  const char* errorMessage)
        throw(CORBA::SystemException) = 0;
};

#endif
