// *************************************************************************
//
// This File Is Automatically Generated by the StarBusIDL-to-C++ Compiler !
//
// Copyright (c) 2003
// Network Information Security Institute,Computer College,NUDT.
// ChangSha,Hunan,PRC
//
// All Rights Reserved
//
// *************************************************************************

// Version: 5.0.0

#ifndef ___CosTransactionsCurrent_h__
#define ___CosTransactionsCurrent_h__

#include <STAR/Current.h>
#include <CosTransactionsOTS.h>
#include <CosTransactionsPolicy.h>

namespace CosTransactions
{

class Current;
typedef Current* Current_ptr;
typedef Current* CurrentRef;

extern STAR::TypeCodeConst _tc_Current;

} // End of namespace CosTransactions

void STARDuplicate(CosTransactions::Current_ptr);
void STARRelease(CosTransactions::Current_ptr);

void STARMarshal(CosTransactions::Current_ptr, STAR::OutputStreamImpl*);
void STARUnmarshal(CosTransactions::Current_ptr&, STAR::InputStreamImpl*);

namespace CosTransactions
{

typedef STAR::ObjVar< Current > Current_var;
typedef STAR::ObjOut< Current > Current_out;

} // End of namespace CosTransactions

//
// Module declare ::CosTransactions
//
namespace CosTransactions
{

//
// Interface declare ::CosTransactions::Current
//
class Current : virtual public CORBA::Current
{
    Current(const Current&);
    void operator=(const Current&);

protected:

    static const char* ids_[];

public:

    Current() { }
    virtual ~Current() { }

    typedef Current_ptr _ptr_type;
    typedef Current_var _var_type;

    static inline Current_ptr
    _duplicate(Current_ptr p)
    {
        if(p)
            p -> _STAR_incRef();
        return p;
    }

    static inline Current_ptr
    _nil()
    {
        return 0;
    }

    static Current_ptr _narrow(CORBA::Object_ptr);
    static Current_ptr _narrow(CORBA::AbstractBase_ptr);

    virtual const char** _STAR_ids() const;
    static const char** _STAR_staticIds();

    //
    // Operation declare ::CosTransactions::Current::begin
    //
    virtual void begin() = 0;

    //
    // Operation declare ::CosTransactions::Current::commit
    //
    virtual void commit(CORBA::Boolean report_heuristics) = 0;

    //
    // Operation declare ::CosTransactions::Current::rollback
    //
    virtual void rollback() = 0;

    //
    // Operation declare ::CosTransactions::Current::rollback_only
    //
    virtual void rollback_only() = 0;

    //
    // Operation declare ::CosTransactions::Current::get_status
    //
    virtual ::CosTransactions::Status get_status() = 0;

    //
    // Operation declare ::CosTransactions::Current::set_timeout
    //
    virtual void set_timeout(CORBA::ULong seconds) = 0;

    //
    // Operation declare ::CosTransactions::Current::get_timeout
    //
    virtual CORBA::ULong get_timeout() = 0;

    //
    // Operation declare ::CosTransactions::Current::get_control
    //
    virtual ::CosTransactions::Control_ptr get_control() = 0;

    //
    // Operation declare ::CosTransactions::Current::suspend
    //
    virtual ::CosTransactions::Control_ptr suspend() = 0;

    //
    // Operation declare ::CosTransactions::Current::resume
    //
    virtual void resume(::CosTransactions::Control_ptr which) = 0;
};


} // End of namespace CosTransactions

//
// Module declare ::CosTransactions
//
namespace OBV_CosTransactions
{

} // End of namespace OBV_CosTransactions

//
// Interface declare ::CosTransactions::Current
//
namespace CORBA
{

inline void
release(CosTransactions::Current_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

inline Boolean
is_nil(CosTransactions::Current_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, CosTransactions::Current_ptr*);
void operator<<=(CORBA::Any&, CosTransactions::Current_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, CosTransactions::Current_ptr&);

inline void
operator<<=(CORBA::Any_var& any, CosTransactions::Current_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, CosTransactions::Current_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, CosTransactions::Current_ptr& val)
{
    return any.in() >>= val;
}

#endif
