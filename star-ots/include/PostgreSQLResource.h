// *************************************************************************
//
// This File Is Automatically Generated by the StarBusIDL-to-C++ Compiler !
//
// Copyright (c) 2003
// Network Information Security Institute,Computer College,NUDT.
// ChangSha,Hunan,PRC
//
// All Rights Reserved
//
// *************************************************************************

// Version: 5.0.0

#ifndef ___PostgreSQLResource_h__
#define ___PostgreSQLResource_h__

#include <CosTransactionsOTS.h>

class PG_Resource;
typedef PG_Resource* PG_Resource_ptr;
typedef PG_Resource* PG_ResourceRef;

extern STAR::TypeCodeConst _tc_PG_Resource;

void STARDuplicate(PG_Resource_ptr);
void STARRelease(PG_Resource_ptr);

void STARMarshal(PG_Resource_ptr, STAR::OutputStreamImpl*);
void STARUnmarshal(PG_Resource_ptr&, STAR::InputStreamImpl*);

typedef STAR::ObjVar< PG_Resource > PG_Resource_var;
typedef STAR::ObjOut< PG_Resource > PG_Resource_out;

//
//  declare ::pg_ConnStatusType
//
typedef CORBA::Short pg_ConnStatusType;
typedef CORBA::Short_out pg_ConnStatusType_out;
extern STAR::TypeCodeConst _tc_pg_ConnStatusType;

//
//  declare ::pg_ExecStatusType
//
typedef CORBA::Short pg_ExecStatusType;
typedef CORBA::Short_out pg_ExecStatusType_out;
extern STAR::TypeCodeConst _tc_pg_ExecStatusType;

//
// Struct declare ::pg_PGnotify
//
struct pg_PGnotify;
typedef STAR::VarVar< pg_PGnotify > pg_PGnotify_var;
typedef STAR::VarOut< pg_PGnotify > pg_PGnotify_out;

struct pg_PGnotify
{
#ifdef STAR_CLEAR_MEM
    pg_PGnotify();
#else
    pg_PGnotify() { }
#endif
    pg_PGnotify(const pg_PGnotify&);
    pg_PGnotify& operator=(const pg_PGnotify&);

    typedef pg_PGnotify_var _var_type;

    STAR::StrForStruct relname;
    CORBA::Long be_pid;

    void _STAR_marshal(STAR::OutputStreamImpl*) const;
    static void _STAR_unmarshal(pg_PGnotify&, STAR::InputStreamImpl*);
};

extern STAR::TypeCodeConst _tc_pg_PGnotify;

//
// Interface declare ::PG_Resource
//
class PG_Resource : virtual public CORBA::Object
{
    PG_Resource(const PG_Resource&);
    void operator=(const PG_Resource&);

protected:

    static const char* ids_[];

public:

    PG_Resource() { }
    virtual ~PG_Resource() { }

    typedef PG_Resource_ptr _ptr_type;
    typedef PG_Resource_var _var_type;

    static inline PG_Resource_ptr
    _duplicate(PG_Resource_ptr p)
    {
        if(p)
            p -> _STAR_incRef();
        return p;
    }

    static inline PG_Resource_ptr
    _nil()
    {
        return 0;
    }

    static PG_Resource_ptr _narrow(CORBA::Object_ptr);
    static PG_Resource_ptr _narrow(CORBA::AbstractBase_ptr);

    static PG_Resource_ptr _unchecked_narrow(CORBA::AbstractBase_ptr);
    static PG_Resource_ptr _unchecked_narrow(CORBA::Object_ptr);

    static const char** _STAR_staticIds();

    //
    // Operation declare ::PG_Resource::pg_prepare
    //
    virtual ::CosTransactions::Vote pg_prepare() = 0;

    //
    // Operation declare ::PG_Resource::pg_rollback
    //
    virtual void pg_rollback() = 0;

    //
    // Operation declare ::PG_Resource::pg_commit
    //
    virtual void pg_commit() = 0;

    //
    // Operation declare ::PG_Resource::pg_commit_one_phase
    //
    virtual void pg_commit_one_phase() = 0;

    //
    // Operation declare ::PG_Resource::pg_forget
    //
    virtual void pg_forget() = 0;

    //
    // Operation declare ::PG_Resource::pg_release
    //
    virtual void pg_release() = 0;

    //
    // Operation declare ::PG_Resource::pg_BeginTrans
    //
    virtual CORBA::Boolean pg_BeginTrans() = 0;

    //
    // Operation declare ::PG_Resource::pg_set_recoverycoordinator
    //
    virtual void pg_set_recoverycoordinator(::CosTransactions::RecoveryCoordinator_ptr rc) = 0;

    //
    // Operation declare ::PG_Resource::pg_heuristic_decision
    //
    virtual void pg_heuristic_decision() = 0;

    //
    // Exception declare ::PG_Resource::PG_CONNECTTION_FAILED
    //
    struct PG_CONNECTTION_FAILED : public CORBA::UserException
    {
        PG_CONNECTTION_FAILED() { }
        PG_CONNECTTION_FAILED(const PG_CONNECTTION_FAILED&);
        PG_CONNECTTION_FAILED& operator=(const PG_CONNECTTION_FAILED&);

        static PG_CONNECTTION_FAILED* _downcast(CORBA::Exception*);
        static const PG_CONNECTTION_FAILED* _downcast(const CORBA::Exception*);
        virtual const char* _name() const;
        virtual void _raise() const { throw *this; }
        virtual const char* _rep_id() const;
        virtual char* _to_string() const;

        virtual CORBA::Exception* _STAR_clone() const;
        virtual void _STAR_insertInAny(CORBA::Any&);

        static void _STAR_unmarshal(PG_CONNECTTION_FAILED&, STAR::InputStreamImpl*);
    };

    static STAR::TypeCodeConst _tc_PG_CONNECTTION_FAILED;

    //
    // Operation declare ::PG_Resource::pg_PQsetdbLogin
    //
    virtual void pg_PQsetdbLogin(const char* pghost,
                                 const char* pgport,
                                 const char* pgoptions,
                                 const char* pgtty,
                                 const char* dbName,
                                 const char* login,
                                 const char* pwd) = 0;

    //
    // Operation declare ::PG_Resource::pg_PQdb
    //
    virtual char* pg_PQdb() = 0;

    //
    // Operation declare ::PG_Resource::pg_PQhost
    //
    virtual char* pg_PQhost() = 0;

    //
    // Operation declare ::PG_Resource::pg_PQoptions
    //
    virtual char* pg_PQoptions() = 0;

    //
    // Operation declare ::PG_Resource::pg_PQport
    //
    virtual char* pg_PQport() = 0;

    //
    // Operation declare ::PG_Resource::pg_PQtty
    //
    virtual char* pg_PQtty() = 0;

    //
    // Operation declare ::PG_Resource::pg_PQstatus
    //
    virtual ::pg_ConnStatusType pg_PQstatus() = 0;

    //
    // Operation declare ::PG_Resource::pg_PQerrorMessage
    //
    virtual char* pg_PQerrorMessage() = 0;

    //
    // Operation declare ::PG_Resource::pg_PQfinish
    //
    virtual void pg_PQfinish() = 0;

    //
    // Operation declare ::PG_Resource::pg_PQreset
    //
    virtual void pg_PQreset() = 0;

    //
    // Operation declare ::PG_Resource::pg_PQuntrace
    //
    virtual void pg_PQuntrace() = 0;

    //
    // Operation declare ::PG_Resource::pg_PQexec
    //
    virtual void pg_PQexec(const char* query) = 0;

    //
    // Operation declare ::PG_Resource::pg_PQresultStatus
    //
    virtual ::pg_ExecStatusType pg_PQresultStatus() = 0;

    //
    // Operation declare ::PG_Resource::pg_PQntuples
    //
    virtual CORBA::Long pg_PQntuples() = 0;

    //
    // Operation declare ::PG_Resource::pg_PQnfields
    //
    virtual CORBA::Long pg_PQnfields() = 0;

    //
    // Operation declare ::PG_Resource::pg_PQfname
    //
    virtual char* pg_PQfname(CORBA::Long field_index) = 0;

    //
    // Operation declare ::PG_Resource::pg_PQfnumber
    //
    virtual CORBA::Long pg_PQfnumber(const char* field_name) = 0;

    //
    // Operation declare ::PG_Resource::pg_PQftype
    //
    virtual CORBA::Long pg_PQftype(CORBA::Long field_num) = 0;

    //
    // Operation declare ::PG_Resource::pg_PQfsize
    //
    virtual CORBA::Long pg_PQfsize(CORBA::Long field_index) = 0;

    //
    // Operation declare ::PG_Resource::pg_PQgetvalue
    //
    virtual char* pg_PQgetvalue(CORBA::Long tup_num,
                                CORBA::Long field_num) = 0;

    //
    // Operation declare ::PG_Resource::pg_PQgetlength
    //
    virtual CORBA::Long pg_PQgetlength(CORBA::Long tup_num,
                                       CORBA::Long field_num) = 0;

    //
    // Operation declare ::PG_Resource::pg_PQcmdStatus
    //
    virtual char* pg_PQcmdStatus() = 0;

    //
    // Operation declare ::PG_Resource::pg_PQoidStatus
    //
    virtual char* pg_PQoidStatus() = 0;

    //
    // Operation declare ::PG_Resource::pg_PQclear
    //
    virtual void pg_PQclear() = 0;

    //
    // Operation declare ::PG_Resource::pg_PQnotifies
    //
    virtual ::pg_PGnotify* pg_PQnotifies() = 0;

    //
    // Operation declare ::PG_Resource::pg_PQgetline
    //
    virtual CORBA::Long pg_PQgetline(const char* str,
                                     CORBA::Long length) = 0;

    //
    // Operation declare ::PG_Resource::pg_PQputline
    //
    virtual void pg_PQputline(const char* str) = 0;

    //
    // Operation declare ::PG_Resource::pg_PQendcopy
    //
    virtual CORBA::Long pg_PQendcopy() = 0;

    //
    // Operation declare ::PG_Resource::pg_fe_getauthname
    //
    virtual char* pg_fe_getauthname(const char* errorMessage) = 0;

    //
    // Operation declare ::PG_Resource::pg_fe_setauthsvc
    //
    virtual void pg_fe_setauthsvc(const char* name,
                                  const char* errorMessage) = 0;
};


class PG_Resource_broker : virtual public PG_Resource,
                           virtual public STARCORBA::Object
{
    PG_Resource_broker(const PG_Resource_broker&);
    void operator=(const PG_Resource_broker&);

public:

    PG_Resource_broker() { }
    virtual ~PG_Resource_broker() { }

    virtual const char** _STAR_ids() const;

    //
    // Operation declare ::PG_Resource_broker::pg_prepare
    //
    ::CosTransactions::Vote pg_prepare();

    //
    // Operation declare ::PG_Resource_broker::pg_rollback
    //
    void pg_rollback();

    //
    // Operation declare ::PG_Resource_broker::pg_commit
    //
    void pg_commit();

    //
    // Operation declare ::PG_Resource_broker::pg_commit_one_phase
    //
    void pg_commit_one_phase();

    //
    // Operation declare ::PG_Resource_broker::pg_forget
    //
    void pg_forget();

    //
    // Operation declare ::PG_Resource_broker::pg_release
    //
    void pg_release();

    //
    // Operation declare ::PG_Resource_broker::pg_BeginTrans
    //
    CORBA::Boolean pg_BeginTrans();

    //
    // Operation declare ::PG_Resource_broker::pg_set_recoverycoordinator
    //
    void pg_set_recoverycoordinator(::CosTransactions::RecoveryCoordinator_ptr rc);

    //
    // Operation declare ::PG_Resource_broker::pg_heuristic_decision
    //
    void pg_heuristic_decision();

    //
    // Operation declare ::PG_Resource_broker::pg_PQsetdbLogin
    //
    void pg_PQsetdbLogin(const char* pghost,
                         const char* pgport,
                         const char* pgoptions,
                         const char* pgtty,
                         const char* dbName,
                         const char* login,
                         const char* pwd);

    //
    // Operation declare ::PG_Resource_broker::pg_PQdb
    //
    char* pg_PQdb();

    //
    // Operation declare ::PG_Resource_broker::pg_PQhost
    //
    char* pg_PQhost();

    //
    // Operation declare ::PG_Resource_broker::pg_PQoptions
    //
    char* pg_PQoptions();

    //
    // Operation declare ::PG_Resource_broker::pg_PQport
    //
    char* pg_PQport();

    //
    // Operation declare ::PG_Resource_broker::pg_PQtty
    //
    char* pg_PQtty();

    //
    // Operation declare ::PG_Resource_broker::pg_PQstatus
    //
    ::pg_ConnStatusType pg_PQstatus();

    //
    // Operation declare ::PG_Resource_broker::pg_PQerrorMessage
    //
    char* pg_PQerrorMessage();

    //
    // Operation declare ::PG_Resource_broker::pg_PQfinish
    //
    void pg_PQfinish();

    //
    // Operation declare ::PG_Resource_broker::pg_PQreset
    //
    void pg_PQreset();

    //
    // Operation declare ::PG_Resource_broker::pg_PQuntrace
    //
    void pg_PQuntrace();

    //
    // Operation declare ::PG_Resource_broker::pg_PQexec
    //
    void pg_PQexec(const char* query);

    //
    // Operation declare ::PG_Resource_broker::pg_PQresultStatus
    //
    ::pg_ExecStatusType pg_PQresultStatus();

    //
    // Operation declare ::PG_Resource_broker::pg_PQntuples
    //
    CORBA::Long pg_PQntuples();

    //
    // Operation declare ::PG_Resource_broker::pg_PQnfields
    //
    CORBA::Long pg_PQnfields();

    //
    // Operation declare ::PG_Resource_broker::pg_PQfname
    //
    char* pg_PQfname(CORBA::Long field_index);

    //
    // Operation declare ::PG_Resource_broker::pg_PQfnumber
    //
    CORBA::Long pg_PQfnumber(const char* field_name);

    //
    // Operation declare ::PG_Resource_broker::pg_PQftype
    //
    CORBA::Long pg_PQftype(CORBA::Long field_num);

    //
    // Operation declare ::PG_Resource_broker::pg_PQfsize
    //
    CORBA::Long pg_PQfsize(CORBA::Long field_index);

    //
    // Operation declare ::PG_Resource_broker::pg_PQgetvalue
    //
    char* pg_PQgetvalue(CORBA::Long tup_num,
                        CORBA::Long field_num);

    //
    // Operation declare ::PG_Resource_broker::pg_PQgetlength
    //
    CORBA::Long pg_PQgetlength(CORBA::Long tup_num,
                               CORBA::Long field_num);

    //
    // Operation declare ::PG_Resource_broker::pg_PQcmdStatus
    //
    char* pg_PQcmdStatus();

    //
    // Operation declare ::PG_Resource_broker::pg_PQoidStatus
    //
    char* pg_PQoidStatus();

    //
    // Operation declare ::PG_Resource_broker::pg_PQclear
    //
    void pg_PQclear();

    //
    // Operation declare ::PG_Resource_broker::pg_PQnotifies
    //
    ::pg_PGnotify* pg_PQnotifies();

    //
    // Operation declare ::PG_Resource_broker::pg_PQgetline
    //
    CORBA::Long pg_PQgetline(const char* str,
                             CORBA::Long length);

    //
    // Operation declare ::PG_Resource_broker::pg_PQputline
    //
    void pg_PQputline(const char* str);

    //
    // Operation declare ::PG_Resource_broker::pg_PQendcopy
    //
    CORBA::Long pg_PQendcopy();

    //
    // Operation declare ::PG_Resource_broker::pg_fe_getauthname
    //
    char* pg_fe_getauthname(const char* errorMessage);

    //
    // Operation declare ::PG_Resource_broker::pg_fe_setauthsvc
    //
    void pg_fe_setauthsvc(const char* name,
                          const char* errorMessage);
};

//
// Struct declare ::pg_PGnotify
//
void operator<<=(CORBA::Any&, pg_PGnotify*);
void operator<<=(CORBA::Any&, const pg_PGnotify&);
CORBA::Boolean operator>>=(const CORBA::Any&, const pg_PGnotify*&);

inline void
operator<<=(CORBA::Any_var& any, pg_PGnotify* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, const pg_PGnotify& val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, const pg_PGnotify*& val)
{
    return any.in() >>= val;
}

//
// Interface declare ::PG_Resource
//
namespace CORBA
{

inline void
release(PG_Resource_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

inline Boolean
is_nil(PG_Resource_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, PG_Resource_ptr*);
void operator<<=(CORBA::Any&, PG_Resource_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, PG_Resource_ptr&);

inline void
operator<<=(CORBA::Any_var& any, PG_Resource_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, PG_Resource_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, PG_Resource_ptr& val)
{
    return any.in() >>= val;
}

//
// Exception declare ::PG_Resource::PG_CONNECTTION_FAILED
//
void operator<<=(CORBA::Any&, PG_Resource::PG_CONNECTTION_FAILED*);
void operator<<=(CORBA::Any&, const PG_Resource::PG_CONNECTTION_FAILED&);
CORBA::Boolean operator>>=(const CORBA::Any&, const PG_Resource::PG_CONNECTTION_FAILED*&);

inline void
operator<<=(CORBA::Any_var& any, PG_Resource::PG_CONNECTTION_FAILED* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, const PG_Resource::PG_CONNECTTION_FAILED& val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, const PG_Resource::PG_CONNECTTION_FAILED*& val)
{
    return any.in() >>= val;
}

#endif
