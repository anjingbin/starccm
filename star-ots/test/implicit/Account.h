// *************************************************************************
//
// This File Is Automatically Generated by the StarBusIDL-to-C++ Compiler !
//
// Copyright (c) 2003
// Network Information Security Institute,Computer College,NUDT.
// ChangSha,Hunan,PRC
//
// All Rights Reserved
//
// *************************************************************************

// Version: 5.0.0

#ifndef ___account_h__
#define ___account_h__

class Account;
typedef Account* Account_ptr;
typedef Account* AccountRef;

extern STAR::TypeCodeConst _tc_Account;

void STARDuplicate(Account_ptr);
void STARRelease(Account_ptr);

void STARMarshal(Account_ptr, STAR::OutputStreamImpl*);
void STARUnmarshal(Account_ptr&, STAR::InputStreamImpl*);

typedef STAR::ObjVar< Account > Account_var;
typedef STAR::ObjOut< Account > Account_out;

//
// Interface declare ::Account
//
class Account : virtual public CORBA::Object
{
    Account(const Account&);
    void operator=(const Account&);

protected:

    static const char* ids_[];

public:

    Account() { }
    virtual ~Account() { }

    typedef Account_ptr _ptr_type;
    typedef Account_var _var_type;

    static inline Account_ptr
    _duplicate(Account_ptr p)
    {
        if(p)
            p -> _STAR_incRef();
        return p;
    }

    static inline Account_ptr
    _nil()
    {
        return 0;
    }

    static Account_ptr _narrow(CORBA::Object_ptr);
    static Account_ptr _narrow(CORBA::AbstractBase_ptr);

    static Account_ptr _unchecked_narrow(CORBA::AbstractBase_ptr);
    static Account_ptr _unchecked_narrow(CORBA::Object_ptr);

    static const char** _STAR_staticIds();

    //
    // Operation declare ::Account::connect
    //
    virtual void connect() = 0;

    //
    // Operation declare ::Account::close
    //
    virtual void close() = 0;

    //
    // Operation declare ::Account::sum
    //
    virtual void sum() = 0;

    //
    // Operation declare ::Account::deposit
    //
    virtual void deposit() = 0;

    //
    // Operation declare ::Account::withdraw
    //
    virtual void withdraw() = 0;
};


class Account_broker : virtual public Account,
                       virtual public STARCORBA::Object
{
    Account_broker(const Account_broker&);
    void operator=(const Account_broker&);

public:

    Account_broker() { }
    virtual ~Account_broker() { }

    virtual const char** _STAR_ids() const;

    //
    // Operation declare ::Account_broker::connect
    //
    void connect();

    //
    // Operation declare ::Account_broker::close
    //
    void close();

    //
    // Operation declare ::Account_broker::sum
    //
    void sum();

    //
    // Operation declare ::Account_broker::deposit
    //
    void deposit();

    //
    // Operation declare ::Account_broker::withdraw
    //
    void withdraw();
};

//
// Interface declare ::Account
//
namespace CORBA
{

inline void
release(Account_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

inline Boolean
is_nil(Account_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, Account_ptr*);
void operator<<=(CORBA::Any&, Account_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, Account_ptr&);

inline void
operator<<=(CORBA::Any_var& any, Account_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, Account_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, Account_ptr& val)
{
    return any.in() >>= val;
}

#endif
