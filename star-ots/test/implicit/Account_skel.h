// *************************************************************************
//
// This File Is Automatically Generated by the StarBusIDL-to-C++ Compiler !
//
// Copyright (c) 2003
// Network Information Security Institute,Computer College,NUDT.
// ChangSha,Hunan,PRC
//
// All Rights Reserved
//
// *************************************************************************

// Version: 5.0.0

#ifndef ___account_skel_h__
#define ___account_skel_h__

#include <account.h>
#include <STAR/SkelForServerRequest.h>

//
// Interface declare ::Account
//
class POA_Account : virtual public PortableServer::ServantBase,
                    virtual public STAR::SkelForServerRequest
{
    POA_Account(const POA_Account&);
    void operator=(const POA_Account&);

protected:

    //
    // ProtectedOperation declare connect
    //
    static void _STAR_op_connect(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare close
    //
    static void _STAR_op_close(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare sum
    //
    static void _STAR_op_sum(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare deposit
    //
    static void _STAR_op_deposit(PortableServer::ServantBase *,STAR::Upcall_ptr);

    //
    // ProtectedOperation declare withdraw
    //
    static void _STAR_op_withdraw(PortableServer::ServantBase *,STAR::Upcall_ptr);

public:

    POA_Account() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&,
                                                   PortableServer::POA_ptr);

    Account_ptr _this();

    virtual void _STAR_dispatch(STAR::Upcall_ptr);

    //
    // Operation declare connect
    //
    virtual void connect()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare close
    //
    virtual void close()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare sum
    //
    virtual void sum()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare deposit
    //
    virtual void deposit()
        throw(CORBA::SystemException) = 0;

    //
    // Operation declare withdraw
    //
    virtual void withdraw()
        throw(CORBA::SystemException) = 0;
};

#endif
