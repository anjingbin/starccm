// *************************************************************************
//
// This File Is Automatically Generated by the StarBusIDL-to-C++ Compiler !
//
// Copyright (c) 2003
// Network Information Security Institute,Computer College,NUDT.
// ChangSha,Hunan,PRC
//
// All Rights Reserved
//
// *************************************************************************

// Version: 5.0.0

#ifndef ___counter_h__
#define ___counter_h__

class Counter;
typedef Counter* Counter_ptr;
typedef Counter* CounterRef;

extern STAR::TypeCodeConst _tc_Counter;

void STARDuplicate(Counter_ptr);
void STARRelease(Counter_ptr);

void STARMarshal(Counter_ptr, STAR::OutputStreamImpl*);
void STARUnmarshal(Counter_ptr&, STAR::InputStreamImpl*);

typedef STAR::ObjVar< Counter > Counter_var;
typedef STAR::ObjOut< Counter > Counter_out;

//
// Interface declare ::Counter
//
class Counter : virtual public CORBA::Object
{
    Counter(const Counter&);
    void operator=(const Counter&);

protected:

    static const char* ids_[];

public:

    Counter() { }
    virtual ~Counter() { }

    typedef Counter_ptr _ptr_type;
    typedef Counter_var _var_type;

    static inline Counter_ptr
    _duplicate(Counter_ptr p)
    {
        if(p)
            p -> _STAR_incRef();
        return p;
    }

    static inline Counter_ptr
    _nil()
    {
        return 0;
    }

    static Counter_ptr _narrow(CORBA::Object_ptr);
    static Counter_ptr _narrow(CORBA::AbstractBase_ptr);

    static Counter_ptr _unchecked_narrow(CORBA::AbstractBase_ptr);
    static Counter_ptr _unchecked_narrow(CORBA::Object_ptr);

    static const char** _STAR_staticIds();

    //
    // Attribute Get declare ::Counter::count
    //
    virtual CORBA::Long count() = 0;

    //
    // Operation declare ::Counter::increment
    //
    virtual void increment() = 0;

    //
    // Operation declare ::Counter::decrement
    //
    virtual void decrement() = 0;
};


class Counter_broker : virtual public Counter,
                       virtual public STARCORBA::Object
{
    Counter_broker(const Counter_broker&);
    void operator=(const Counter_broker&);

public:

    Counter_broker() { }
    virtual ~Counter_broker() { }

    virtual const char** _STAR_ids() const;

    //
    // Attribute Get declare ::Counter_broker::count
    //
    CORBA::Long count();

    //
    // Operation declare ::Counter_broker::increment
    //
    void increment();

    //
    // Operation declare ::Counter_broker::decrement
    //
    void decrement();
};

//
// Interface declare ::Counter
//
namespace CORBA
{

inline void
release(Counter_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

inline Boolean
is_nil(Counter_ptr p)
{
    return p == 0;
}

} // End of namespace CORBA

void operator<<=(CORBA::Any&, Counter_ptr*);
void operator<<=(CORBA::Any&, Counter_ptr);
CORBA::Boolean operator>>=(const CORBA::Any&, Counter_ptr&);

inline void
operator<<=(CORBA::Any_var& any, Counter_ptr* val)
{
    any.inout() <<= val;
}

inline void
operator<<=(CORBA::Any_var& any, Counter_ptr val)
{
    any.inout() <<= val;
}

inline CORBA::Boolean
operator>>=(const CORBA::Any_var& any, Counter_ptr& val)
{
    return any.in() >>= val;
}

#endif
