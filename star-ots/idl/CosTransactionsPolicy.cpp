// *************************************************************************
//
// This File Is Automatically Generated by the StarBusIDL-to-C++ Compiler !
//
// Copyright (c) 2003
// Network Information Security Institute,Computer College,NUDT.
// ChangSha,Hunan,PRC
//
// All Rights Reserved
//
// *************************************************************************

// Version: 5.0.0

#include <STAR/CORBAClient.h>
#include <STAR/CORBAServer.h>
#include <CosTransactionsPolicy.h>

namespace CosTransactions
{

STAR::TypeCodeConst _tc_InvocationPolicy(
"0134f5772100000049000000010000002900000049444c3a436f735472616e73616374696f6e7"
"32f496e766f636174696f6e506f6c6963793a312e300034f57711000000496e766f636174696f"
"6e506f6c69637900"
);

STAR::TypeCodeConst _tc_OTSPolicy(
"01717f00210000003a00000001013e002200000049444c3a436f735472616e73616374696f6e7"
"32f4f5453506f6c6963793a312e30007f000a0000004f5453506f6c69637900"
);

STAR::TypeCodeConst _tc_NonTxTargetPolicy(
"01717f00210000004a00000001013e002a00000049444c3a436f735472616e73616374696f6e7"
"32f4e6f6e5478546172676574506f6c6963793a312e3000f577120000004e6f6e547854617267"
"6574506f6c69637900"
);

} // End of namespace CosTransactions

//
// Interface declare ::CosTransactions::InvocationPolicy
//
const char* CosTransactions::InvocationPolicy::ids_[] =
{
    "IDL:CosTransactions/InvocationPolicy:1.0",
    "IDL:omg.org/CORBA/Policy:1.0",
    0
};

void
STARDuplicate(CosTransactions::InvocationPolicy_ptr p)
{
    if(p)
        p -> _STAR_incRef();
}

void
STARRelease(CosTransactions::InvocationPolicy_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

CosTransactions::InvocationPolicy_ptr
CosTransactions::InvocationPolicy::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        InvocationPolicy_ptr v = dynamic_cast<InvocationPolicy_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

CosTransactions::InvocationPolicy_ptr
CosTransactions::InvocationPolicy::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

const char**
CosTransactions::InvocationPolicy::_STAR_ids() const
{
    return ids_;
}

const char**
CosTransactions::InvocationPolicy::_STAR_staticIds()
{
    return ids_;
}

void
STARMarshal(CosTransactions::InvocationPolicy_ptr, STAR::OutputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
STARUnmarshal(CosTransactions::InvocationPolicy_ptr&, STAR::InputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
operator<<=(CORBA::Any& any, CosTransactions::InvocationPolicy_ptr* v)
{
    any.replace(CosTransactions::_tc_InvocationPolicy, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, CosTransactions::InvocationPolicy_ptr v)
{
    CosTransactions::InvocationPolicy_ptr val = CosTransactions::InvocationPolicy::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, CosTransactions::InvocationPolicy_ptr& v)
{
    if(any.check_type(CosTransactions::_tc_InvocationPolicy))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<CosTransactions::InvocationPolicy_ptr>(val);
        }
        else
            v = CosTransactions::InvocationPolicy::_nil();

        return true;
    }
    else
        return false;
}

//
// Interface declare ::CosTransactions::OTSPolicy
//
const char* CosTransactions::OTSPolicy::ids_[] =
{
    "IDL:CosTransactions/OTSPolicy:1.0",
    "IDL:omg.org/CORBA/Policy:1.0",
    0
};

void
STARDuplicate(CosTransactions::OTSPolicy_ptr p)
{
    if(p)
        p -> _STAR_incRef();
}

void
STARRelease(CosTransactions::OTSPolicy_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

CosTransactions::OTSPolicy_ptr
CosTransactions::OTSPolicy::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        OTSPolicy_ptr v = dynamic_cast<OTSPolicy_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

CosTransactions::OTSPolicy_ptr
CosTransactions::OTSPolicy::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

const char**
CosTransactions::OTSPolicy::_STAR_ids() const
{
    return ids_;
}

const char**
CosTransactions::OTSPolicy::_STAR_staticIds()
{
    return ids_;
}

void
STARMarshal(CosTransactions::OTSPolicy_ptr, STAR::OutputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
STARUnmarshal(CosTransactions::OTSPolicy_ptr&, STAR::InputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
operator<<=(CORBA::Any& any, CosTransactions::OTSPolicy_ptr* v)
{
    any.replace(CosTransactions::_tc_OTSPolicy, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, CosTransactions::OTSPolicy_ptr v)
{
    CosTransactions::OTSPolicy_ptr val = CosTransactions::OTSPolicy::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, CosTransactions::OTSPolicy_ptr& v)
{
    if(any.check_type(CosTransactions::_tc_OTSPolicy))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<CosTransactions::OTSPolicy_ptr>(val);
        }
        else
            v = CosTransactions::OTSPolicy::_nil();

        return true;
    }
    else
        return false;
}

//
// Interface declare ::CosTransactions::NonTxTargetPolicy
//
const char* CosTransactions::NonTxTargetPolicy::ids_[] =
{
    "IDL:CosTransactions/NonTxTargetPolicy:1.0",
    "IDL:omg.org/CORBA/Policy:1.0",
    0
};

void
STARDuplicate(CosTransactions::NonTxTargetPolicy_ptr p)
{
    if(p)
        p -> _STAR_incRef();
}

void
STARRelease(CosTransactions::NonTxTargetPolicy_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

CosTransactions::NonTxTargetPolicy_ptr
CosTransactions::NonTxTargetPolicy::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        NonTxTargetPolicy_ptr v = dynamic_cast<NonTxTargetPolicy_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

CosTransactions::NonTxTargetPolicy_ptr
CosTransactions::NonTxTargetPolicy::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

const char**
CosTransactions::NonTxTargetPolicy::_STAR_ids() const
{
    return ids_;
}

const char**
CosTransactions::NonTxTargetPolicy::_STAR_staticIds()
{
    return ids_;
}

void
STARMarshal(CosTransactions::NonTxTargetPolicy_ptr, STAR::OutputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
STARUnmarshal(CosTransactions::NonTxTargetPolicy_ptr&, STAR::InputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
operator<<=(CORBA::Any& any, CosTransactions::NonTxTargetPolicy_ptr* v)
{
    any.replace(CosTransactions::_tc_NonTxTargetPolicy, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, CosTransactions::NonTxTargetPolicy_ptr v)
{
    CosTransactions::NonTxTargetPolicy_ptr val = CosTransactions::NonTxTargetPolicy::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, CosTransactions::NonTxTargetPolicy_ptr& v)
{
    if(any.check_type(CosTransactions::_tc_NonTxTargetPolicy))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<CosTransactions::NonTxTargetPolicy_ptr>(val);
        }
        else
            v = CosTransactions::NonTxTargetPolicy::_nil();

        return true;
    }
    else
        return false;
}
