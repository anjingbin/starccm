// *************************************************************************
//
// This File Is Automatically Generated by the StarBusIDL-to-C++ Compiler !
//
// Copyright (c) 2003
// Network Information Security Institute,Computer College,NUDT.
// ChangSha,Hunan,PRC
//
// All Rights Reserved
//
// *************************************************************************

// Version: 5.0.0

#include <STAR/CORBAClient.h>
#include <STAR/CORBAServer.h>
#include <CosTransactionsCurrent.h>

namespace CosTransactions
{

STAR::TypeCodeConst _tc_Current(
"0134f5772100000034000000010000002000000049444c3a436f735472616e73616374696f6e7"
"32f43757272656e743a312e30000800000043757272656e7400"
);

} // End of namespace CosTransactions

//
// Interface declare ::CosTransactions::Current
//
const char* CosTransactions::Current::ids_[] =
{
    "IDL:CosTransactions/Current:1.0",
    "IDL:omg.org/CORBA/Current:1.0",
    0
};

void
STARDuplicate(CosTransactions::Current_ptr p)
{
    if(p)
        p -> _STAR_incRef();
}

void
STARRelease(CosTransactions::Current_ptr p)
{
    if(p)
        p -> _STAR_decRef();
}

CosTransactions::Current_ptr
CosTransactions::Current::_narrow(CORBA::Object_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        Current_ptr v = dynamic_cast<Current_ptr>(p);
        if(v)
            return _duplicate(v);
    }

    return _nil();
}

CosTransactions::Current_ptr
CosTransactions::Current::_narrow(CORBA::AbstractBase_ptr p)
{
    if(!CORBA::is_nil(p))
    {
        CORBA::Object_var obj = p -> _to_object();
        return _narrow(obj);
    }
    return _nil();
}

const char**
CosTransactions::Current::_STAR_ids() const
{
    return ids_;
}

const char**
CosTransactions::Current::_STAR_staticIds()
{
    return ids_;
}

void
STARMarshal(CosTransactions::Current_ptr, STAR::OutputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
STARUnmarshal(CosTransactions::Current_ptr&, STAR::InputStreamImpl*)
{
    throw CORBA::MARSHAL(STAR::MinorLocalObject, CORBA::COMPLETED_NO);
}

void
operator<<=(CORBA::Any& any, CosTransactions::Current_ptr* v)
{
    any.replace(CosTransactions::_tc_Current, (CORBA::Object_ptr)*v, true);
}

void
operator<<=(CORBA::Any& any, CosTransactions::Current_ptr v)
{
    CosTransactions::Current_ptr val = CosTransactions::Current::_duplicate(v);
    any <<= &val;
}

CORBA::Boolean
operator>>=(const CORBA::Any& any, CosTransactions::Current_ptr& v)
{
    if(any.check_type(CosTransactions::_tc_Current))
    {
        CORBA::Object_ptr val = (CORBA::Object_ptr)any.value();

        if(!CORBA::is_nil(val))
        {
            v = dynamic_cast<CosTransactions::Current_ptr>(val);
        }
        else
            v = CosTransactions::Current::_nil();

        return true;
    }
    else
        return false;
}
