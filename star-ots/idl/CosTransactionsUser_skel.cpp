// *************************************************************************
//
// This File Is Automatically Generated by the StarBusIDL-to-C++ Compiler !
//
// Copyright (c) 2003
// Network Information Security Institute,Computer College,NUDT.
// ChangSha,Hunan,PRC
//
// All Rights Reserved
//
// *************************************************************************

// Version: 5.0.0

#include <STAR/CORBAServer.h>
#include <CosTransactionsUser_skel.h>

//
// Module declare ::CosTransactions
//

//
// ProtectedOperation declare before_completion
//
void
POA_CosTransactions::Synchronization::_STAR_op_before_completion(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    _STAR_preRemoveHeader(_star_up);
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::Synchronization * objImpl=dynamic_cast< POA_CosTransactions::Synchronization*>( serv );
    if(objImpl!=NULL) 
    {
         objImpl ->before_completion();
    }
    _STAR_prePrepareHeader(_star_up);
    _STAR_postPrepareHeader(_star_up);
}

//
// ProtectedOperation declare after_completion
//
void
POA_CosTransactions::Synchronization::_STAR_op_after_completion(PortableServer::ServantBase * serv,STAR::Upcall_ptr _star_up)
{
    CosTransactions::Status _star_a0;
    STAR::InputStreamImpl* _star_in = _STAR_preRemoveHeader(_star_up);
    _star_a0 = (CosTransactions::Status)_star_in -> read_ulong();
    _STAR_postRemoveHeader(_star_up);
    POA_CosTransactions::Synchronization * objImpl=dynamic_cast< POA_CosTransactions::Synchronization*>( serv );
    if(objImpl!=NULL) 
    {
         objImpl ->after_completion(_star_a0);
    }
    _STAR_prePrepareHeader(_star_up);
    _STAR_postPrepareHeader(_star_up);
}

//
// Interface declare ::CosTransactions::Synchronization
//
CORBA::Boolean
POA_CosTransactions::Synchronization::_is_a(const char* type)
    throw(CORBA::SystemException)
{
    const char** _star_ids = CosTransactions::Synchronization::_STAR_staticIds();
    for(CORBA::ULong _star_i = 0 ; _star_ids[_star_i] != 0 ; _star_i++)
        if(strcmp(type, _star_ids[_star_i]) == 0)
            return true;

    return false;
}

CORBA::RepositoryId
POA_CosTransactions::Synchronization::_primary_interface(const PortableServer::ObjectId&,
                                                         PortableServer::POA_ptr)
{
    return CORBA::string_dup(CosTransactions::Synchronization::_STAR_staticIds()[0]);
}

CosTransactions::Synchronization_ptr
POA_CosTransactions::Synchronization::_this()
{
    CORBA::Object_var obj = _STAR_buildReference();
    CosTransactions::Synchronization_var result = CosTransactions::Synchronization::_narrow(obj);
    return result._retn();
}

void
POA_CosTransactions::Synchronization::_STAR_dispatch(STAR::Upcall_ptr _star_up)
{
    static const PortableServer::OperationTableEntry Synchronization_Optable_fixed[] =
    {
        {"_get_component",PortableServer::ServantBase::_STAR_op_get_component},
        {"_interface",PortableServer::ServantBase::_STAR_op_get_interface},
        {"_is_a",PortableServer::ServantBase::_STAR_op_is_a},
        {"_non_existent",PortableServer::ServantBase::_STAR_op_non_existent}
    };
    static const PortableServer::OperationTableEntry Synchronization_Optable_unfixed[] =
    {
        {"after_completion",POA_CosTransactions::Synchronization::_STAR_op_after_completion},
        {"before_completion",POA_CosTransactions::Synchronization::_STAR_op_before_completion}
    };
    static const CORBA::ULong _star_methodCount = 2;

    PortableServer::operationSkel operation;
    if(_STAR_locateOperation(_star_up,Synchronization_Optable_unfixed,_star_methodCount, operation))
    {
        (*operation)(this,_star_up);
        return;
    }
    else
    if(_STAR_locateOperation(_star_up,Synchronization_Optable_fixed,4, operation))
    {
        (*operation)(this,_star_up);
        return;
    }
    throw CORBA::BAD_OPERATION(0, CORBA::COMPLETED_NO);

}
